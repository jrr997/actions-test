{"affix":{"zh-CN":"---\ncategory: Components\ntitle: Affix\nsubtitle: 固钉\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YSm4RI3iOJ8AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*03dxS64LxeQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: 其他\n  order: 7\n---\n\n将页面元素钉在可视范围。\n\n## 何时使用\n\n当内容区域比较长，需要滚动页面时，这部分内容对应的操作或者导航需要在滚动范围内始终展现。常用于侧边菜单和按钮组合。\n\n页面可视范围过小时，慎用此功能以免出现遮挡页面内容的情况。\n\n> 开发者注意事项：\n>\n> 自 `5.10.0` 起，由于 Affix 组件由 class 重构为 FC，之前获取 `ref` 并调用内部实例方法的写法都会失效。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/on-change.tsx\">固定状态改变的回调</code>\n<code src=\"./demo/target.tsx\">滚动容器</code>\n<code src=\"./demo/debug.tsx\" debug>调整浏览器大小，观察 Affix 容器是否发生变化。跟随变化为正常。#17678</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| offsetBottom | 距离窗口底部达到指定偏移量后触发 | number | - |\n| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number | 0 |\n| target | 设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数 | () => HTMLElement | () => window |\n| onChange | 固定状态改变时触发的回调函数 | (affixed?: boolean) => void | - |\n\n**注意：**`Affix` 内的元素不要使用绝对定位，如需要绝对定位的效果，可以直接设置 `Affix` 为绝对定位：\n\n```jsx\n<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>\n```\n\n## FAQ\n\n### Affix 使用 `target` 绑定容器时，元素会跑到容器外。\n\n从性能角度考虑，我们只监听容器滚动事件。如果希望任意滚动，你可以在窗体添加滚动监听：<https://codesandbox.io/s/stupefied-maxwell-ophqnm?file=/index.js>\n\n相关 issue：[#3938](https://github.com/ant-design/ant-design/issues/3938) [#5642](https://github.com/ant-design/ant-design/issues/5642) [#16120](https://github.com/ant-design/ant-design/issues/16120)\n\n### Affix 在水平滚动容器中使用时， 元素 `left` 位置不正确。\n\nAffix 一般只适用于单向滚动的区域，只支持在垂直滚动容器中使用。如果希望在水平容器中使用，你可以考虑使用 原生 `position: sticky` 实现。\n\n相关 issue: [#29108](https://github.com/ant-design/ant-design/issues/29108)\n","en-US":"---\ncategory: Components\ntitle: Affix\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YSm4RI3iOJ8AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*03dxS64LxeQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: Other\n  order: 7\n---\n\nWrap Affix around another component to make it stick the viewport.\n\n## When To Use\n\nOn longer web pages, it's helpful to stick component into the viewport. This is common for menus and actions.\n\nPlease note that Affix should not cover other content on the page, especially when the size of the viewport is small.\n\n> Notes for developers\n>\n> After version `5.10.0`, we rewrite Affix use FC, Some methods of obtaining `ref` and calling internal instance methods will invalid.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/on-change.tsx\">Callback</code>\n<code src=\"./demo/target.tsx\">Container to scroll.</code>\n<code src=\"./demo/debug.tsx\" debug>debug</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| offsetBottom | Offset from the bottom of the viewport (in pixels) | number | - |\n| offsetTop | Offset from the top of the viewport (in pixels) | number | 0 |\n| target | Specifies the scrollable area DOM node | () => HTMLElement | () => window |\n| onChange | Callback for when Affix state is changed | (affixed?: boolean) => void | - |\n\n**Note:** Children of `Affix` must not have the property `position: absolute`, but you can set `position: absolute` on `Affix` itself:\n\n```jsx\n<Affix style={{ position: 'absolute', top: y, left: x }}>...</Affix>\n```\n\n## FAQ\n\n### When binding container with `target` in Affix, elements sometimes move out of the container.\n\nWe only listen to container scroll events for performance consideration. You can add custom listeners if you still want to: <https://codesandbox.io/s/stupefied-maxwell-ophqnm?file=/index.js>\n\nRelated issues：[#3938](https://github.com/ant-design/ant-design/issues/3938) [#5642](https://github.com/ant-design/ant-design/issues/5642) [#16120](https://github.com/ant-design/ant-design/issues/16120)\n\n### When Affix is ​​used in a horizontal scroll container, the position of the element `left` is incorrect.\n\nAffix is ​​generally only applicable to areas with one-way scrolling, and only supports usage in vertical scrolling containers. If you want to use it in a horizontal container, you can consider implementing with the native `position: sticky` property.\n\nRelated issues：[#29108](https://github.com/ant-design/ant-design/issues/29108)\n"},"alert":{"zh-CN":"---\ncategory: Components\nsubtitle: 警告提示\ntitle: Alert\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Ct7bT7rrTTAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-U3XQqYN7VsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: 反馈\n  order: 6\n---\n\n警告提示，展现需要关注的信息。\n\n## 何时使用\n\n- 当某个页面需要向用户显示警告的信息时。\n- 非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/style.tsx\">四种样式</code>\n<code src=\"./demo/closable.tsx\">可关闭的警告提示</code>\n<code src=\"./demo/description.tsx\">含有辅助性文字介绍</code>\n<code src=\"./demo/icon.tsx\">图标</code>\n<code src=\"./demo/banner.tsx\" iframe=\"250\">顶部公告</code>\n<code src=\"./demo/loop-banner.tsx\">轮播的公告</code>\n<code src=\"./demo/smooth-closed.tsx\">平滑地卸载</code>\n<code src=\"./demo/error-boundary.tsx\">React 错误处理</code>\n<code src=\"./demo/custom-icon.tsx\" debug>自定义图标</code>\n<code src=\"./demo/action.tsx\">操作</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| action | 自定义操作项 | ReactNode | - | 4.9.0 |\n| afterClose | 关闭动画结束后触发的回调函数 | () => void | - |  |\n| banner | 是否用作顶部公告 | boolean | false |  |\n| closeIcon | 自定义关闭 Icon，>=5.7.0: 设置为 `null` 或 `false` 时隐藏关闭按钮 | boolean \\| ReactNode | `<CloseOutlined />` |  |\n| description | 警告提示的辅助性文字介绍 | ReactNode | - |  |\n| icon | 自定义图标，`showIcon` 为 true 时有效 | ReactNode | - |  |\n| message | 警告提示内容 | ReactNode | - |  |\n| showIcon | 是否显示辅助图标 | boolean | false，`banner` 模式下默认值为 true |  |\n| type | 指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error` | string | `info`，`banner` 模式下默认值为 `warning` |  |\n| onClose | 关闭时触发的回调函数 | (e: MouseEvent) => void | - |  |\n\n### Alert.ErrorBoundary\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 自定义错误内容，如果未指定会展示报错堆栈 | ReactNode | {{ error stack }} |  |\n| message | 自定义错误标题，如果未指定会展示原生报错信息 | ReactNode | {{ error }} |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Alert\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ntitle: Alert\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Ct7bT7rrTTAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-U3XQqYN7VsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: Feedback\n  order: 6\n---\n\nAlert component for feedback.\n\n## When To Use\n\n- When you need to show alert messages to users.\n- When you need a persistent static container which is closable by user actions.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/style.tsx\">More types</code>\n<code src=\"./demo/closable.tsx\">Closable</code>\n<code src=\"./demo/description.tsx\">Description</code>\n<code src=\"./demo/icon.tsx\">Icon</code>\n<code src=\"./demo/banner.tsx\" iframe=\"250\">Banner</code>\n<code src=\"./demo/loop-banner.tsx\">Loop Banner</code>\n<code src=\"./demo/smooth-closed.tsx\">Smoothly Unmount</code>\n<code src=\"./demo/error-boundary.tsx\">ErrorBoundary</code>\n<code src=\"./demo/custom-icon.tsx\" debug>Custom Icon</code>\n<code src=\"./demo/action.tsx\">Custom action</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| action | The action of Alert | ReactNode | - | 4.9.0 |\n| afterClose | Called when close animation is finished | () => void | - |  |\n| banner | Whether to show as banner | boolean | false |  |\n| closeIcon | Custom close icon, >=5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | `<CloseOutlined />` |  |\n| description | Additional content of Alert | ReactNode | - |  |\n| icon | Custom icon, effective when `showIcon` is true | ReactNode | - |  |\n| message | Content of Alert | ReactNode | - |  |\n| showIcon | Whether to show icon | boolean | false, in `banner` mode default is true |  |\n| type | Type of Alert styles, options: `success`, `info`, `warning`, `error` | string | `info`, in `banner` mode default is `warning` |  |\n| onClose | Callback when Alert is closed | (e: MouseEvent) => void | - |  |\n\n### Alert.ErrorBoundary\n\n| Property    | Description                      | Type      | Default           | Version |\n| ----------- | -------------------------------- | --------- | ----------------- | ------- |\n| description | Custom error description to show | ReactNode | {{ error stack }} |         |\n| message     | Custom error message to show     | ReactNode | {{ error }}       |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Alert\"></ComponentTokenTable>\n"},"anchor":{"zh-CN":"---\ncategory: Components\ntitle: Anchor\nsubtitle: 锚点\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*TBTSR4PyVmkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JGb3RIzyOCkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\ngroup:\n  title: 导航\n  order: 3\n---\n\n用于跳转到页面指定位置。\n\n## 何时使用\n\n需要展现当前页面上可供跳转的锚点链接，以及快速在锚点之间跳转。\n\n> 开发者注意事项：\n>\n> 自 `4.24.0` 起，由于组件从 class 重构成 FC，之前一些获取 `ref` 并调用内部实例方法的写法都会失效\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\" iframe=\"200\">基本</code>\n<code src=\"./demo/horizontal.tsx\" iframe=\"200\">横向 Anchor</code>\n<code src=\"./demo/static.tsx\">静态位置</code>\n<code src=\"./demo/onClick.tsx\">自定义 onClick 事件</code>\n<code src=\"./demo/customizeHighlight.tsx\">自定义锚点高亮</code>\n<code src=\"./demo/targetOffset.tsx\" iframe=\"200\">设置锚点滚动偏移量</code>\n<code src=\"./demo/onChange.tsx\">监听锚点链接改变</code>\n<code src=\"./demo/replace.tsx\" iframe=\"200\">替换历史中的 href</code>\n<code src=\"./demo/legacy-anchor.tsx\" debug>废弃的 JSX 示例</code>\n<code src=\"./demo/component-token.tsx\" iframe=\"800\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Anchor Props\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| affix | 固定模式 | boolean | true |  |\n| bounds | 锚点区域边界 | number | 5 |  |\n| getContainer | 指定滚动的容器 | () => HTMLElement | () => window |  |\n| getCurrentAnchor | 自定义高亮的锚点 | (activeLink: string) => string | - |  |\n| offsetTop | 距离窗口顶部达到指定偏移量后触发 | number |  |  |\n| showInkInFixed | `affix={false}` 时是否显示小方块 | boolean | false |  |\n| targetOffset | 锚点滚动偏移量，默认与 offsetTop 相同，[例子](#components-anchor-demo-targetoffset) | number | - |  |\n| onChange | 监听锚点链接改变 | (currentActiveLink: string) => void | - |  |\n| onClick | `click` 事件的 handler | (e: MouseEvent, link: object) => void | - |  |\n| items | 数据化配置选项内容，支持通过 children 嵌套 | { key, href, title, target, children }\\[] [具体见](#anchoritem) | - | 5.1.0 |\n| direction | 设置导航方向 | `vertical` \\| `horizontal` | `vertical` | 5.2.0 |\n| replace | 替换浏览器历史记录中项目的 href 而不是推送它 | boolean | false | 5.7.0 |\n\n### AnchorItem\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| key | 唯一标志 | string \\| number | - |  |\n| href | 锚点链接 | string | - |  |\n| target | 该属性指定在何处显示链接的资源 | string | - |  |\n| title | 文字内容 | ReactNode | - |  |\n| children | 嵌套的 Anchor Link，`注意：水平方向该属性不支持` | [AnchorItem](#anchoritem)\\[] | - |  |\n| replace | 替换浏览器历史记录中的项目 href 而不是推送它 | boolean | false | 5.7.0 |\n\n### Link Props\n\n建议使用 items 形式。\n\n| 参数   | 说明                           | 类型      | 默认值 | 版本 |\n| ------ | ------------------------------ | --------- | ------ | ---- |\n| href   | 锚点链接                       | string    | -      |      |\n| target | 该属性指定在何处显示链接的资源 | string    | -      |      |\n| title  | 文字内容                       | ReactNode | -      |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Anchor\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ntitle: Anchor\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*TBTSR4PyVmkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JGb3RIzyOCkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\ngroup:\n  title: Navigation\n  order: 3\n---\n\nHyperlinks to scroll on one page.\n\n## When To Use\n\nFor displaying anchor hyperlinks on page and jumping between them.\n\n> Notes for developers\n>\n> After version `4.24.0`, we rewrite Anchor use FC, Some methods of obtaining `ref` and calling internal instance methods will invalid.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\" iframe=\"200\">Basic</code>\n<code src=\"./demo/horizontal.tsx\" iframe=\"200\">Horizontal Anchor</code>\n<code src=\"./demo/static.tsx\" >Static Anchor</code>\n<code src=\"./demo/onClick.tsx\">Customize the onClick event</code>\n<code src=\"./demo/customizeHighlight.tsx\">Customize the anchor highlight</code>\n<code src=\"./demo/targetOffset.tsx\" iframe=\"200\">Set Anchor scroll offset</code>\n<code src=\"./demo/onChange.tsx\">Listening for anchor link change</code>\n<code src=\"./demo/replace.tsx\" iframe=\"200\">Replace href in history</code>\n<code src=\"./demo/legacy-anchor.tsx\" debug>Deprecated JSX demo</code>\n<code src=\"./demo/component-token.tsx\" iframe=\"800\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Anchor Props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| affix | Fixed mode of Anchor | boolean | true |  |\n| bounds | Bounding distance of anchor area | number | 5 |  |\n| getContainer | Scrolling container | () => HTMLElement | () => window |  |\n| getCurrentAnchor | Customize the anchor highlight | (activeLink: string) => string | - |  |\n| offsetTop | Pixels to offset from top when calculating position of scroll | number | 0 |  |\n| showInkInFixed | Whether show ink-square when `affix={false}` | boolean | false |  |\n| targetOffset | Anchor scroll offset, default as `offsetTop`, [example](#components-anchor-demo-targetoffset) | number | - |  |\n| onChange | Listening for anchor link change | (currentActiveLink: string) => void |  |  |\n| onClick | Set the handler to handle `click` event | (e: MouseEvent, link: object) => void | - |  |\n| items | Data configuration option content, support nesting through children | { key, href, title, target, children }\\[] [see](#anchoritem) | - | 5.1.0 |\n| direction | Set Anchor direction | `vertical` \\| `horizontal` | `vertical` | 5.2.0 |\n| replace | Replace items' href in browser history instead of pushing it | boolean | false | 5.7.0 |\n\n### AnchorItem\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| key | The unique identifier of the Anchor Link | string \\| number | - |  |\n| href | The target of hyperlink | string |  |  |\n| target | Specifies where to display the linked URL | string |  |  |\n| title | The content of hyperlink | ReactNode |  |  |\n| children | Nested Anchor Link, `Attention: This attribute does not support horizontal orientation` | [AnchorItem](#anchoritem)\\[] | - |  |\n| replace | Replace item href in browser history instead of pushing it | boolean | false | 5.7.0 |\n\n### Link Props\n\nWe recommend using the items form instead.\n\n| Property | Description                               | Type      | Default | Version |\n| -------- | ----------------------------------------- | --------- | ------- | ------- |\n| href     | The target of hyperlink                   | string    |         |         |\n| target   | Specifies where to display the linked URL | string    |         |         |\n| title    | The content of hyperlink                  | ReactNode |         |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Anchor\"></ComponentTokenTable>\n"},"app":{"zh-CN":"---\ncategory: Components\nsubtitle: 包裹组件\ngroup: 其他\ntitle: App\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HJz8SZos2wgAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*oC92TK44Ex8AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ntag: New\n---\n\n新的包裹组件，提供重置样式和提供消费上下文的默认环境。\n\n## 何时使用\n\n- 提供可消费 React context 的 `message.xxx`、`Modal.xxx`、`notification.xxx` 的静态方法，可以简化 useMessage 等方法需要手动植入 `contextHolder` 的问题。\n- 提供基于 `.ant-app` 的默认重置样式，解决原生元素没有 antd 规范样式的问题。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/config.tsx\">Hooks 配置</code>\n\n## 如何使用\n\n### 基础用法\n\nApp 组件通过 `Context` 提供上下文方法调用，因而 useApp 需要作为子组件才能使用，我们推荐在应用中顶层包裹 App。\n\n```tsx\nimport React from 'react';\nimport { App } from 'antd';\n\nconst MyPage: React.FC = () => {\n  const { message, notification, modal } = App.useApp();\n  message.success('Good!');\n  notification.info({ message: 'Good' });\n  modal.warning({ title: 'Good' });\n  // ....\n  // other message, notification, modal static function\n  return <div>Hello word</div>;\n};\n\nconst MyApp: React.FC = () => (\n  <App>\n    <MyPage />\n  </App>\n);\n\nexport default MyApp;\n```\n\n注意：App.useApp 必须在 App 之下方可使用。\n\n### 与 ConfigProvider 先后顺序\n\nApp 组件只能在 `ConfigProvider` 之下才能使用 Design Token， 如果需要使用其样式重置能力，则 ConfigProvider 与 App 组件必须成对出现。\n\n```tsx\n<ConfigProvider theme={{ ... }}>\n  <App>\n    ...\n  </App>\n</ConfigProvider>\n```\n\n### 内嵌使用场景（如无必要，尽量不做嵌套）\n\n```tsx\n<App>\n  <Space>\n    ...\n    <App>...</App>\n  </Space>\n</App>\n```\n\n### 全局场景（redux 场景）\n\n```tsx\n// Entry component\nimport { App } from 'antd';\nimport type { MessageInstance } from 'antd/es/message/interface';\nimport type { ModalStaticFunctions } from 'antd/es/modal/confirm';\nimport type { NotificationInstance } from 'antd/es/notification/interface';\n\nlet message: MessageInstance;\nlet notification: NotificationInstance;\nlet modal: Omit<ModalStaticFunctions, 'warn'>;\n\nexport default () => {\n  const staticFunction = App.useApp();\n  message = staticFunction.message;\n  modal = staticFunction.modal;\n  notification = staticFunction.notification;\n  return null;\n};\n\nexport { message, notification, modal };\n```\n\n```tsx\n// sub page\nimport React from 'react';\nimport { Button, Space } from 'antd';\n\nimport { message } from './store';\n\nexport default () => {\n  const showMessage = () => {\n    message.success('Success!');\n  };\n\n  return (\n    <Space>\n      <Button type=\"primary\" onClick={showMessage}>\n        Open message\n      </Button>\n    </Space>\n  );\n};\n```\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### App\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| component | 设置渲染元素，为 `false` 则不创建 DOM 节点 | ComponentType | div | 5.11.0 |\n| message | App 内 Message 的全局配置 | [MessageConfig](/components/message-cn/#messageconfig) | - | 5.3.0 |\n| notification | App 内 Notification 的全局配置 | [NotificationConfig](/components/notification-cn/#notificationconfig) | - | 5.3.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"App\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Other\ntitle: App\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HJz8SZos2wgAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*oC92TK44Ex8AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ntag: New\n---\n\nApplication wrapper for some global usages.\n\n## When To Use\n\n- Provide reset styles based on `.ant-app` element.\n- You could use static methods of `message/notification/Modal` form `useApp` without writing `contextHolder` manually.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/config.tsx\">Hooks config</code>\n\n## How to use\n\n### Basic usage\n\nApp provides upstream and downstream method calls through `Context`, because useApp needs to be used as a subcomponent, we recommend encapsulating App at the top level in the application.\n\n```tsx\nimport React from 'react';\nimport { App } from 'antd';\n\nconst MyPage: React.FC = () => {\n  const { message, notification, modal } = App.useApp();\n  message.success('Good!');\n  notification.info({ message: 'Good' });\n  modal.warning({ title: 'Good' });\n  // ....\n  // other message, notification, modal static function\n  return <div>Hello word</div>;\n};\n\nconst MyApp: React.FC = () => (\n  <App>\n    <MyPage />\n  </App>\n);\n\nexport default MyApp;\n```\n\nNote: App.useApp must be available under App.\n\n### Sequence with ConfigProvider\n\nThe App component can only use the token in the `ConfigProvider`, if you need to use the Token, the ConfigProvider and the App component must appear in pairs.\n\n```tsx\n<ConfigProvider theme={{ ... }}>\n  <App>\n    ...\n  </App>\n</ConfigProvider>\n```\n\n### Embedded usage scenarios (if not necessary, try not to do nesting)\n\n```tsx\n<App>\n  <Space>\n    ...\n    <App>...</App>\n  </Space>\n</App>\n```\n\n### Global scene (redux scene)\n\n```tsx\n// Entry component\nimport { App } from 'antd';\nimport type { MessageInstance } from 'antd/es/message/interface';\nimport type { ModalStaticFunctions } from 'antd/es/modal/confirm';\nimport type { NotificationInstance } from 'antd/es/notification/interface';\n\nlet message: MessageInstance;\nlet notification: NotificationInstance;\nlet modal: Omit<ModalStaticFunctions, 'warn'>;\n\nexport default () => {\n  const staticFunction = App.useApp();\n  message = staticFunction.message;\n  modal = staticFunction.modal;\n  notification = staticFunction.notification;\n  return null;\n};\n\nexport { message, modal, notification };\n```\n\n```tsx\n// sub page\nimport React from 'react';\nimport { Button, Space } from 'antd';\n\nimport { message } from './store';\n\nexport default () => {\n  const showMessage = () => {\n    message.success('Success!');\n  };\n\n  return (\n    <Space>\n      <Button type=\"primary\" onClick={showMessage}>\n        Open message\n      </Button>\n    </Space>\n  );\n};\n```\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### App\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| component | Config render element, if `false` will not create DOM node | ComponentType | div | 5.11.0 |\n| message | Global config for Message | [MessageConfig](/components/message/#messageconfig) | - | 5.3.0 |\n| notification | Global config for Notification | [NotificationConfig](/components/notification/#notificationconfig) | - | 5.3.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"App\"></ComponentTokenTable>\n"},"auto-complete":{"zh-CN":"---\ncategory: Components\nsubtitle: 自动完成\ntitle: AutoComplete\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*g8THS4NpV6sAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*WERTQ6qvgEYAAAAAAAAAAAAADrJ8AQ/original\ngroup:\n  title: 数据录入\n  order: 4\ndemo:\n  cols: 2\n---\n\n输入框自动完成功能。\n\n## 何时使用\n\n- 需要一个输入框而不是选择器。\n- 需要输入建议/辅助提示。\n\n和 Select 的区别是：\n\n- AutoComplete 是一个带提示的文本输入框，用户可以自由输入，关键词是辅助**输入**。\n- Select 是在限定的可选项中进行选择，关键词是**选择**。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本使用</code>\n<code src=\"./demo/options.tsx\">自定义选项</code>\n<code src=\"./demo/custom.tsx\">自定义输入组件</code>\n<code src=\"./demo/non-case-sensitive.tsx\">不区分大小写</code>\n<code src=\"./demo/certain-category.tsx\">查询模式 - 确定类目</code>\n<code src=\"./demo/uncertain-category.tsx\">查询模式 - 不确定类目</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">多种形态</code>\n<code src=\"./demo/allowClear.tsx\">自定义清除按钮</code>\n<code src=\"./demo/form-debug.tsx\" debug>在 Form 中 Debug</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |\n| autoFocus | 自动获取焦点 | boolean | false |  |\n| backfill | 使用键盘选择选项的时候把选中项回填到输入框中 | boolean | false |  |\n| children (自动完成的数据源) | 自动完成的数据源 | React.ReactElement&lt;OptionProps> \\| Array&lt;React.ReactElement&lt;OptionProps>> | - |  |\n| children (自定义输入框) | 自定义输入框 | HTMLInputElement \\| HTMLTextAreaElement \\| React.ReactElement&lt;InputProps> | &lt;Input /> |  |\n| defaultActiveFirstOption | 是否默认高亮第一个选项 | boolean | true |  |\n| defaultOpen | 是否默认展开下拉菜单 | boolean | - |  |\n| defaultValue | 指定默认选中的条目 | string | - |  |\n| disabled | 是否禁用 | boolean | false |  |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| dropdownMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean \\| number | true |  |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false | boolean \\| function(inputValue, option) | true |  |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body |  |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | - |  |\n| open | 是否展开下拉菜单 | boolean | - |  |\n| options | 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能 | { label, value }\\[] | - |  |\n| placeholder | 输入框提示 | string | - |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| value | 指定当前选中的条目 | string | - |  |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onBlur | 失去焦点时的回调 | function() | - |  |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value) | - |  |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - |  |\n| onFocus | 获得焦点时的回调 | function() | - |  |\n| onSearch | 搜索补全项的时候调用 | function(value) | - |  |\n| onSelect | 被选中时调用，参数为选中项的 value 值 | function(value, option) | - |  |\n| onClear | 清除内容时的回调 | function | - | 4.6.0 |\n\n## 方法\n\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Select\"></ComponentTokenTable>\n\n## FAQ\n\n### 为何受控状态下使用 onSearch 无法输入中文？\n\n请使用 `onChange` 进行受控管理。`onSearch` 触发于搜索输入，与 `onChange` 时机不同。此外，点击选项时也不会触发 `onSearch` 事件。\n\n相关 issue：[#18230](https://github.com/ant-design/ant-design/issues/18230) [#17916](https://github.com/ant-design/ant-design/issues/17916)\n\n### 为何 options 为空时，受控 open 展开不会显示下拉菜单？\n\nAutoComplete 组件本质上是 Input 输入框的一种扩展，当 `options` 为空时，显示空文本会让用户误以为该组件不可操作，实际上它仍然可以进行文本输入操作。因此，为了避免给用户带来困惑，当 `options` 为空时，`open` 属性为 `true` 也不会展示下拉菜单，需要与 `options` 属性配合使用。\n","en-US":"---\ncategory: Components\ntitle: AutoComplete\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*g8THS4NpV6sAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*WERTQ6qvgEYAAAAAAAAAAAAADrJ8AQ/original\ngroup:\n  title: Data Entry\n  order: 4\ndemo:\n  cols: 2\n---\n\nAutocomplete function of input field.\n\n## When To Use\n\n- When you need an input box instead of a selector.\n- When you need input suggestions or helping text.\n\nThe differences with Select are:\n\n- AutoComplete is an input box with text hints, and users can type freely. The keyword is aiding **input**.\n- Select is selecting among given choices. The keyword is **select**.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/options.tsx\">Customized</code>\n<code src=\"./demo/custom.tsx\">Customize Input Component</code>\n<code src=\"./demo/non-case-sensitive.tsx\">Non-case-sensitive AutoComplete</code>\n<code src=\"./demo/certain-category.tsx\">Lookup-Patterns - Certain Category</code>\n<code src=\"./demo/uncertain-category.tsx\">Lookup-Patterns - Uncertain Category</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n<code src=\"./demo/allowClear.tsx\">Customize clear button</code>\n<code src=\"./demo/form-debug.tsx\" debug>Debug in Form</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Show clear button | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support Object type |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| backfill | If backfill selected item the input when using keyboard | boolean | false |  |\n| children (for customize input element) | Customize input element | HTMLInputElement \\| HTMLTextAreaElement \\| React.ReactElement&lt;InputProps> | &lt;Input /> |  |\n| children (for dataSource) | Data source to auto complete | React.ReactElement&lt;OptionProps> \\| Array&lt;React.ReactElement&lt;OptionProps>> | - |  |\n| defaultActiveFirstOption | Whether active first option by default | boolean | true |  |\n| defaultOpen | Initial open state of dropdown | boolean | - |  |\n| defaultValue | Initial selected option | string | - |  |\n| disabled | Whether disabled select | boolean | false |  |\n| popupClassName | The className of dropdown menu | string | - | 4.23.0 |\n| dropdownMatchSelectWidth | Determine whether the dropdown menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll | boolean \\| number | true |  |\n| filterOption | If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded | boolean \\| function(inputValue, option) | true |  |\n| notFoundContent | Specify content to show when no result matches | string | `Not Found` |  |\n| open | Controlled open state of dropdown | boolean | - |  |\n| options | Select options. Will get better perf than jsx definition | { label, value }\\[] | - |  |\n| placeholder | The placeholder of input | string | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| value | Selected option | string | - |  |\n| variant | Variants of input | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onBlur | Called when leaving the component | function() | - |  |\n| onChange | Called when selecting an option or changing an input value | function(value) | - |  |\n| onDropdownVisibleChange | Call when dropdown open | function(open) | - |  |\n| onFocus | Called when entering the component | function() | - |  |\n| onSearch | Called when searching items | function(value) | - |  |\n| onSelect | Called when a option is selected. param is option's value and option instance | function(value, option) | - |  |\n| onClear | Called when clear | function | - | 4.6.0 |\n\n## Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Select\"></ComponentTokenTable>\n\n## FAQ\n\n### Why doesn't the text composition system work well with onSearch in controlled mode?\n\nPlease use `onChange` to manage control state. `onSearch` is used for searching input which is not the same as `onChange`. Besides, clicking on the option will not trigger the `onSearch` event.\n\nRelated issue: [#18230](https://github.com/ant-design/ant-design/issues/18230) [#17916](https://github.com/ant-design/ant-design/issues/17916)\n\n### Why won't a controlled open AutoComplete display a drop-down menu when options are empty?\n\nThe AutoComplete component is essentially an extension of the Input form element. When the `options` property is empty, displaying empty text could mislead the user into believing the component is not operational, when in fact they are still able to input text. To avoid confusion, the `open` property will not display the drop-down menu when set to `true` and in combination with an empty `options` property. The `open` property must be used in conjunction with the `options` property.\n"},"avatar":{"zh-CN":"---\ncategory: Components\nsubtitle: 头像\ntitle: Avatar\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JJBSS5lBG4IAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YbgyQaRGz-UAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: 数据展示\n  order: 5\n---\n\n用来代表用户或事物，支持图片、图标或字符展示。\n\n## 设计师专属\n\n安装 [Kitchen Sketch 插件 💎](https://kitchen.alipay.com)，一键填充高逼格头像和文本。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/type.tsx\">类型</code>\n<code src=\"./demo/dynamic.tsx\">自动调整字符大小</code>\n<code src=\"./demo/badge.tsx\">带徽标的头像</code>\n<code src=\"./demo/group.tsx\">Avatar.Group</code>\n<code src=\"./demo/toggle-debug.tsx\" debug>隐藏情况下计算字符对齐</code>\n<code src=\"./demo/responsive.tsx\">响应式尺寸</code>\n<code src=\"./demo/fallback.tsx\" debug>图片不存在时</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Avatar\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alt | 图像无法显示时的替代文本 | string | - |  |\n| gap | 字符类型距离左右两侧边界单位像素 | number | 4 | 4.3.0 |\n| icon | 设置头像的自定义图标 | ReactNode | - |  |\n| shape | 指定头像的形状 | `circle` \\| `square` | `circle` |  |\n| size | 设置头像的大小 | number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...} | `default` | 4.7.0 |\n| src | 图片类头像的资源地址或者图片元素 | string \\| ReactNode | - | ReactNode: 4.8.0 |\n| srcSet | 设置图片类头像响应式资源地址 | string | - |  |\n| draggable | 图片是否允许拖动 | boolean \\| `'true'` \\| `'false'` | true |  |\n| crossOrigin | CORS 属性设置 | `'anonymous'` \\| `'use-credentials'` \\| `''` | - | 4.17.0 |\n| onError | 图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为 | () => boolean | - |  |\n\n> Tip：你可以设置 `icon` 或 `children` 作为图片加载失败的默认 fallback 行为，优先级为 `icon` > `children`\n\n### Avatar.Group (4.5.0+)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| maxCount | 显示的最大头像个数 | number | - |  |\n| maxPopoverPlacement | 多余头像气泡弹出位置 | `top` \\| `bottom` | `top` |  |\n| maxPopoverTrigger | 设置多余头像 Popover 的触发方式 | `hover` \\| `focus` \\| `click` | `hover` | 4.17.0 |\n| maxStyle | 多余头像样式 | CSSProperties | - |  |\n| size | 设置头像的大小 | number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...} | `default` | 4.8.0 |\n| shape | 设置头像的形状 | `circle` \\| `square` | `circle` | 5.8.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Avatar\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ntitle: Avatar\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JJBSS5lBG4IAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YbgyQaRGz-UAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: Data Display\n  order: 5\n---\n\nAvatars can be used to represent people or objects. It supports images, `Icon`s, or letters.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/type.tsx\">Type</code>\n<code src=\"./demo/dynamic.tsx\">Autoset Font Size</code>\n<code src=\"./demo/badge.tsx\">With Badge</code>\n<code src=\"./demo/group.tsx\">Avatar.Group</code>\n<code src=\"./demo/toggle-debug.tsx\" debug>Calculate text style when hiding</code>\n<code src=\"./demo/responsive.tsx\">Responsive Size</code>\n<code src=\"./demo/fallback.tsx\" debug>Fallback</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Avatar\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| alt | This attribute defines the alternative text describing the image | string | - |  |\n| gap | Letter type unit distance between left and right sides | number | 4 | 4.3.0 |\n| icon | Custom icon type for an icon avatar | ReactNode | - |  |\n| shape | The shape of avatar | `circle` \\| `square` | `circle` |  |\n| size | The size of the avatar | number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...} | `default` | 4.7.0 |\n| src | The address of the image for an image avatar or image element | string \\| ReactNode | - | ReactNode: 4.8.0 |\n| srcSet | A list of sources to use for different screen resolutions | string | - |  |\n| draggable | Whether the picture is allowed to be dragged | boolean \\| `'true'` \\| `'false'` | true |  |\n| crossOrigin | CORS settings attributes | `'anonymous'` \\| `'use-credentials'` \\| `''` | - | 4.17.0 |\n| onError | Handler when img load error, return false to prevent default fallback behavior | () => boolean | - |  |\n\n> Tip: You can set `icon` or `children` as the fallback for image load error, with the priority of `icon` > `children`\n\n### Avatar.Group (4.5.0+)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| maxCount | Max avatars to show | number | - |  |\n| maxPopoverPlacement | The placement of excess avatar Popover | `top` \\| `bottom` | `top` |  |\n| maxPopoverTrigger | Set the trigger of excess avatar Popover | `hover` \\| `focus` \\| `click` | `hover` | 4.17.0 |\n| maxStyle | The style of excess avatar style | CSSProperties | - |  |\n| size | The size of the avatar | number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...} | `default` | 4.8.0 |\n| shape | The shape of the avatar | `circle` \\| `square` | `circle` | 5.8.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Avatar\"></ComponentTokenTable>\n"},"badge":{"zh-CN":"---\ncategory: Components\nsubtitle: 徽标数\ntitle: Badge\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*e0qITYqF394AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*v8EQT7KoGbcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup: 数据展示\n---\n\n图标右上角的圆形徽标数字。\n\n## 何时使用\n\n一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/no-wrapper.tsx\">独立使用</code>\n<code src=\"./demo/overflow.tsx\">封顶数字</code>\n<code src=\"./demo/dot.tsx\">讨嫌的小红点</code>\n<code src=\"./demo/change.tsx\">动态</code>\n<code src=\"./demo/link.tsx\">可点击</code>\n<code src=\"./demo/offset.tsx\">自定义位置偏移</code>\n<code src=\"./demo/size.tsx\">大小</code>\n<code src=\"./demo/status.tsx\">状态点</code>\n<code src=\"./demo/colorful.tsx\">多彩徽标</code>\n<code src=\"./demo/ribbon.tsx\">缎带</code>\n<code src=\"./demo/ribbon-debug.tsx\" debug>Ribbon Debug</code>\n<code src=\"./demo/mix.tsx\" debug>各种混用的情况</code>\n<code src=\"./demo/title.tsx\" debug>自定义标题</code>\n<code src=\"./demo/colorful-with-count-debug.tsx\" debug>多彩徽标支持 count 显示 Debug</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Badge\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 自定义小圆点的颜色 | string | - |  |\n| count | 展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏 | ReactNode | - |  |\n| classNames | 语义化结构 class | Record<SemanticDOM, string> | - | 5.7.0 |\n| dot | 不展示数字，只有一个小红点 | boolean | false |  |\n| offset | 设置状态点的位置偏移 | \\[number, number] | - |  |\n| overflowCount | 展示封顶的数字值 | number | 99 |  |\n| showZero | 当数值为 0 时，是否展示 Badge | boolean | false |  |\n| size | 在设置了 `count` 的前提下有效，设置小圆点的大小 | `default` \\| `small` | - | - |\n| status | 设置 Badge 为状态点 | `success` \\| `processing` \\| `default` \\| `error` \\| `warning` | - |  |\n| styles | 语义化结构 style | Record<SemanticDOM, CSSProperties> | - | 5.7.0 |\n| text | 在设置了 `status` 的前提下有效，设置状态点的文本 | ReactNode | - |  |\n| title | 设置鼠标放在状态点上时显示的文字 | string | - |  |\n\n### Badge.Ribbon\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 自定义缎带的颜色 | string | - |  |\n| placement | 缎带的位置，`start` 和 `end` 随文字方向（RTL 或 LTR）变动 | `start` \\| `end` | `end` |  |\n| text | 缎带中填入的内容 | ReactNode | - |  |\n\n### `styles` 和 `classNames` 属性\n\n| 名称      | 说明         | 版本  |\n| --------- | ------------ | ----- |\n| root      | 设置根元素   | 5.7.0 |\n| indicator | 设置徽标元素 | 5.7.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Badge\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ntitle: Badge\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*e0qITYqF394AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*v8EQT7KoGbcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup: Data Display\n---\n\nSmall numerical value or status descriptor for UI elements.\n\n## When To Use\n\nBadge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/no-wrapper.tsx\">Standalone</code>\n<code src=\"./demo/overflow.tsx\">Overflow Count</code>\n<code src=\"./demo/dot.tsx\">Red badge</code>\n<code src=\"./demo/change.tsx\">Dynamic</code>\n<code src=\"./demo/link.tsx\">Clickable</code>\n<code src=\"./demo/offset.tsx\">Offset</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/colorful.tsx\">Colorful Badge</code>\n<code src=\"./demo/ribbon.tsx\">Ribbon</code>\n<code src=\"./demo/ribbon-debug.tsx\" debug>Ribbon Debug</code>\n<code src=\"./demo/mix.tsx\" debug>Mixed usage</code>\n<code src=\"./demo/title.tsx\" debug>Title</code>\n<code src=\"./demo/colorful-with-count-debug.tsx\" debug>Colorful Badge support count Debug</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Badge\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| color | Customize Badge dot color | string | - |  |\n| count | Number to show in badge | ReactNode | - |  |\n| classNames | Semantic DOM class | Record<SemanticDOM, string> | - | 5.7.0 |\n| dot | Whether to display a red dot instead of `count` | boolean | false |  |\n| offset | Set offset of the badge dot | \\[number, number] | - |  |\n| overflowCount | Max count to show | number | 99 |  |\n| showZero | Whether to show badge when `count` is zero | boolean | false |  |\n| size | If `count` is set, `size` sets the size of badge | `default` \\| `small` | - | - |\n| status | Set Badge as a status dot | `success` \\| `processing` \\| `default` \\| `error` \\| `warning` | - |  |\n| styles | Semantic DOM style | Record<SemanticDOM, CSSProperties> | - | 5.7.0 |\n| text | If `status` is set, `text` sets the display text of the status `dot` | ReactNode | - |  |\n| title | Text to show when hovering over the badge | string | - |  |\n\n### Badge.Ribbon\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| color | Customize Ribbon color | string | - |  |\n| placement | The placement of the Ribbon, `start` and `end` follow text direction (RTL or LTR) | `start` \\| `end` | `end` |  |\n| text | Content inside the Ribbon | ReactNode | - |  |\n\n### `styles` and `classNames` attribute\n\n| Property  | Description         | Version |\n| --------- | ------------------- | ------- |\n| root      | set `root` element  | 5.7.0   |\n| indicator | set `badge` element | 5.7.0   |\n\n## Design Token\n\n<ComponentTokenTable component=\"Badge\"></ComponentTokenTable>\n"},"breadcrumb":{"zh-CN":"---\ncategory: Components\nsubtitle: 面包屑\ngroup: 导航\ntitle: Breadcrumb\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*I5a2Tpqs3y0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Tr90QKrE_LcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n显示当前页面在系统层级结构中的位置，并能向上返回。\n\n## 何时使用\n\n- 当系统拥有超过两级以上的层级结构时；\n- 当需要告知用户『你在哪里』时；\n- 当需要向上导航的功能时。\n\n```jsx\n// >=5.3.0 可用，推荐的写法 ✅\nreturn <Breadcrumb items={[{ title: 'sample' }]} />;\n\n// <5.3.0 可用，>=5.3.0 时不推荐 🙅🏻‍♀️\nreturn (\n  <Breadcrumb>\n    <Breadcrumb.Item>sample</Breadcrumb.Item>\n  </Breadcrumb>\n);\n\n// 或\n\nreturn <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;\n```\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/withIcon.tsx\">带有图标的</code>\n<code src=\"./demo/separator.tsx\">分隔符</code>\n<code src=\"./demo/overlay.tsx\">带下拉菜单的面包屑</code>\n<code src=\"./demo/separator-component.tsx\">独立的分隔符</code>\n<code src=\"./demo/debug-routes.tsx\">Debug Routes</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Breadcrumb\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| itemRender | 自定义链接函数，和 react-router 配置使用 | (route, params, routes, paths) => ReactNode | - |  |\n| params | 路由的参数 | object | - |  |\n| items | 路由栈信息 | [items\\[\\]](#ItemType) | - | 5.3.0 |\n| separator | 分隔符自定义 | ReactNode | `/` |  |\n\n### ItemType\n\n> type ItemType = [RouteItemType](#RouteItemType) | [SeparatorType](#SeparatorType)\n\n### RouteItemType\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 自定义类名 | string | - |  |\n| dropdownProps | 弹出下拉菜单的自定义配置 | [Dropdown](/components/dropdown-cn) | - |  |\n| href | 链接的目的地，不能和 `path` 共用 | string | - |  |\n| path | 拼接路径，每一层都会拼接前一个 `path` 信息。不能和 `href` 共用 | string | - |  |\n| menu | 菜单配置项 | [MenuProps](/components/menu-cn/#api) | - | 4.24.0 |\n| onClick | 单击事件 | (e:MouseEvent) => void | - |  |\n| title | 名称 | ReactNode | - | 5.3.0 |\n\n### SeparatorType\n\n```ts\nconst item = {\n  type: 'separator', // Must have\n  separator: '/',\n};\n```\n\n| 参数      | 说明           | 类型        | 默认值 | 版本  |\n| --------- | -------------- | ----------- | ------ | ----- |\n| type      | 标记为分隔符   | `separator` |        | 5.3.0 |\n| separator | 要显示的分隔符 | ReactNode   | `/`    | 5.3.0 |\n\n### 和 browserHistory 配合\n\n和 react-router 一起使用时，默认生成的 url 路径是带有 `#` 的，如果和 browserHistory 一起使用的话，你可以使用 `itemRender` 属性定义面包屑链接。\n\n```jsx\nimport { Link } from 'react-router';\n\nconst items = [\n  {\n    path: 'index',\n    title: 'home',\n  },\n  {\n    path: 'first',\n    title: 'first',\n    children: [\n      {\n        path: '/general',\n        title: 'General',\n      },\n      {\n        path: '/layout',\n        title: 'Layout',\n      },\n      {\n        path: '/navigation',\n        title: 'Navigation',\n      },\n    ],\n  },\n  {\n    path: 'second',\n    title: 'second',\n  },\n];\nfunction itemRender(item, params, items, paths) {\n  const last = items.indexOf(item) === items.length - 1;\n  return last ? <span>{item.title}</span> : <Link to={paths.join('/')}>{item.title}</Link>;\n}\n\nreturn <Breadcrumb itemRender={itemRender} items={items} />;\n```\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Breadcrumb\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Navigation\ntitle: Breadcrumb\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*I5a2Tpqs3y0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Tr90QKrE_LcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA breadcrumb displays the current location within a hierarchy. It allows going back to states higher up in the hierarchy.\n\n## When To Use\n\n- When the system has more than two layers in a hierarchy.\n- When you need to inform the user of where they are.\n- When the user may need to navigate back to a higher level.\n\n```jsx\n// works when >=5.3.0, recommended ✅\nreturn <Breadcrumb items={[{ title: 'sample' }]} />;\n\n// works when <5.3.0, deprecated when >=5.3.0 🙅🏻‍♀️\nreturn (\n  <Breadcrumb>\n    <Breadcrumb.Item>sample</Breadcrumb.Item>\n  </Breadcrumb>\n);\n\n// or\n\nreturn <Breadcrumb routes={[{ breadcrumbName: 'sample' }]} />;\n```\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/withIcon.tsx\">With an Icon</code>\n<code src=\"./demo/separator.tsx\">Configuring the Separator</code>\n<code src=\"./demo/overlay.tsx\">Bread crumbs with drop down menu</code>\n<code src=\"./demo/separator-component.tsx\">Configuring the Separator Independently</code>\n<code src=\"./demo/debug-routes.tsx\">Debug Routes</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Breadcrumb\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| itemRender | Custom item renderer | (route, params, routes, paths) => ReactNode | - |  |\n| params | Routing parameters | object | - |  |\n| items | The routing stack information of router | [ItemType\\[\\]](#ItemType) | - | 5.3.0 |\n| separator | Custom separator | ReactNode | `/` |  |\n\n### ItemType\n\n> type ItemType = [RouteItemType](#RouteItemType) | [SeparatorType](#SeparatorType)\n\n### RouteItemType\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | The additional css class | string | - |  |\n| dropdownProps | The dropdown props | [Dropdown](/components/dropdown) | - |  |\n| href | Target of hyperlink. Can not work with `path` | string | - |  |\n| path | Connected path. Each path will connect with prev one. Can not work with `href` | string | - |  |\n| menu | The menu props | [MenuProps](/components/menu/#api) | - | 4.24.0 |\n| onClick | Set the handler to handle click event | (e:MouseEvent) => void | - |  |\n| title | item name | ReactNode | - |  |\n\n### SeparatorType\n\n```ts\nconst item = {\n  type: 'separator', // Must have\n  separator: '/',\n};\n```\n\n| Property  | Description       | Type        | Default | Version |\n| --------- | ----------------- | ----------- | ------- | ------- |\n| type      | Mark as separator | `separator` |         | 5.3.0   |\n| separator | Custom separator  | ReactNode   | `/`     | 5.3.0   |\n\n### Use with browserHistory\n\nThe link of Breadcrumb item targets `#` by default, you can use `itemRender` to make a `browserHistory` Link.\n\n```jsx\nimport { Link } from 'react-router';\n\nconst items = [\n  {\n    path: 'index',\n    title: 'home',\n  },\n  {\n    path: 'first',\n    title: 'first',\n    children: [\n      {\n        path: '/general',\n        title: 'General',\n      },\n      {\n        path: '/layout',\n        title: 'Layout',\n      },\n      {\n        path: '/navigation',\n        title: 'Navigation',\n      },\n    ],\n  },\n  {\n    path: 'second',\n    title: 'second',\n  },\n];\nfunction itemRender(route, params, items, paths) {\n  const last = items.indexOf(item) === items.length - 1;\n  return last ? <span>{item.title}</span> : <Link to={paths.join('/')}>{item.title}</Link>;\n}\n\nreturn <Breadcrumb itemRender={itemRender} items={items} />;\n```\n\n## Design Token\n\n<ComponentTokenTable component=\"Breadcrumb\"></ComponentTokenTable>\n"},"button":{"zh-CN":"---\ncategory: Components\ntitle: Button\nsubtitle: 按钮\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*BrFMQ5s7AAQAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Lp1kTYmSsgoAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: 通用\n  order: 1\n---\n\n按钮用于开始一个即时操作。\n\n## 何时使用\n\n标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。\n\n在 Ant Design 中我们提供了五种按钮。\n\n- 主按钮：用于主行动点，一个操作区域只能有一个主按钮。\n- 默认按钮：用于没有主次之分的一组行动点。\n- 虚线按钮：常用于添加操作。\n- 文本按钮：用于最次级的行动点。\n- 链接按钮：一般用于链接，即导航至某位置。\n\n以及四种状态属性与上面配合使用。\n\n- 危险：删除/移动/修改权限等危险操作，一般需要二次确认。\n- 幽灵：用于背景色比较复杂的地方，常用在首页/产品页等展示场景。\n- 禁用：行动点不可用的时候，一般需要文案解释。\n- 加载中：用于异步操作等待反馈的时候，也可以避免多次提交。\n\n[完整设计指南](https://ant.design/docs/spec/buttons-cn)\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">按钮类型</code>\n<code src=\"./demo/icon.tsx\">图标按钮</code>\n<code src=\"./demo/debug-icon.tsx\" debug>调试图标按钮</code>\n<code src=\"./demo/debug-block.tsx\" debug>调试按钮block属性</code>\n<code src=\"./demo/size.tsx\">按钮尺寸</code>\n<code src=\"./demo/disabled.tsx\">不可用状态</code>\n<code src=\"./demo/loading.tsx\">加载中状态</code>\n<code src=\"./demo/multiple.tsx\">多个按钮组合</code>\n<code src=\"./demo/ghost.tsx\">幽灵按钮</code>\n<code src=\"./demo/danger.tsx\">危险按钮</code>\n<code src=\"./demo/block.tsx\">Block 按钮</code>\n<code src=\"./demo/legacy-group.tsx\" debug>废弃的 Block 组</code>\n<code src=\"./demo/chinese-chars-loading.tsx\" debug>加载中状态 bug 还原</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n<code src=\"./demo/linear-gradient.tsx\" debug>渐变按钮</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n通过设置 Button 的属性来产生不同的按钮样式，推荐顺序为：`type` -> `shape` -> `size` -> `loading` -> `disabled`。\n\n按钮的属性说明如下：\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将按钮宽度调整为其父宽度的选项 | boolean | false |  |\n| classNames | 语义化结构 class | Record<SemanticDOM, string> | - | 5.4.0 |\n| danger | 设置危险按钮 | boolean | false |  |\n| disabled | 设置按钮失效状态 | boolean | false |  |\n| ghost | 幽灵属性，使按钮背景透明 | boolean | false |  |\n| href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致 | string | - |  |\n| htmlType | 设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button` |  |\n| icon | 设置按钮的图标组件 | ReactNode | - |  |\n| loading | 设置按钮载入状态 | boolean \\| { delay: number } | false |  |\n| shape | 设置按钮形状 | `default` \\| `circle` \\| `round` | `default` |  |\n| size | 设置按钮大小 | `large` \\| `middle` \\| `small` | `middle` |  |\n| styles | 语义化结构 style | Record<SemanticDOM, CSSProperties> | - | 5.4.0 |\n| target | 相当于 a 链接的 target 属性，href 存在时生效 | string | - |  |\n| type | 设置按钮类型 | `primary` \\| `dashed` \\| `link` \\| `text` \\| `default` | `default` |  |\n| onClick | 点击按钮时的回调 | (event: MouseEvent) => void | - |  |\n\n支持原生 button 的其他所有属性。\n\n### `styles` 和 `classNames` 属性\n\n| 名称 | 说明         | 版本  |\n| ---- | ------------ | ----- |\n| icon | 设置图标元素 | 5.5.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Button\"></ComponentTokenTable>\n\n## FAQ\n\n### 如何移除两个汉字之间的空格？\n\n根据 Ant Design 设计规范要求，我们会在按钮内(文本按钮和链接按钮除外)只有两个汉字时自动添加空格，如果你不需要这个特性，可以设置 [ConfigProvider](/components/config-provider-cn#api) 的 `autoInsertSpaceInButton` 为 `false`。\n\n```tsx\n<ConfigProvider autoInsertSpaceInButton={false}>\n  <Button>按钮</Button>\n</ConfigProvider>\n```\n\n<img src=\"https://gw.alipayobjects.com/zos/antfincdn/MY%26THAPZrW/38f06cb9-293a-4b42-b183-9f443e79ffea.png\" style=\"box-shadow: none; margin: 0\" width=\"100px\" height=\"64px\" alt=\"移除两个汉字之间的空格\"  />\n\n<style>\n.site-button-ghost-wrapper {\n  padding: 16px;\n  background: rgb(190, 200, 200);\n}\n</style>\n\n## 设计指引\n\n- [我的按钮究竟该放哪儿！？| Ant Design 4.0 系列分享](https://zhuanlan.zhihu.com/p/109644406)\n","en-US":"---\ncategory: Components\ntitle: Button\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*BrFMQ5s7AAQAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Lp1kTYmSsgoAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: General\n  order: 1\n---\n\nTo trigger an operation.\n\n## When To Use\n\nA button means an operation (or a series of operations). Clicking a button will trigger corresponding business logic.\n\nIn Ant Design we provide 5 types of button.\n\n- Primary button: indicate the main action, one primary button at most in one section.\n- Default button: indicate a series of actions without priority.\n- Dashed button: commonly used for adding more actions.\n- Text button: used for the most secondary action.\n- Link button: used for external links.\n\nAnd 4 other properties additionally.\n\n- `danger`: used for actions of risk, like deletion or authorization.\n- `ghost`: used in situations with complex background, home pages usually.\n- `disabled`: when actions are not available.\n- `loading`: add loading spinner in button, avoiding multiple submits too.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Type</code>\n<code src=\"./demo/icon.tsx\">Icon</code>\n<code src=\"./demo/debug-icon.tsx\" debug>Debug Icon</code>\n<code src=\"./demo/debug-block.tsx\" debug>Debug Block</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/loading.tsx\">Loading</code>\n<code src=\"./demo/multiple.tsx\">Multiple Buttons</code>\n<code src=\"./demo/ghost.tsx\">Ghost Button</code>\n<code src=\"./demo/danger.tsx\">Danger Buttons</code>\n<code src=\"./demo/block.tsx\">Block Button</code>\n<code src=\"./demo/legacy-group.tsx\" debug>Deprecated Button Group</code>\n<code src=\"./demo/chinese-chars-loading.tsx\" debug>Loading style bug</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n<code src=\"./demo/linear-gradient.tsx\" debug>Gradient Button</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\nDifferent button styles can be generated by setting Button properties. The recommended order is: `type` -> `shape` -> `size` -> `loading` -> `disabled`.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| block | Option to fit button width to its parent width | boolean | false |  |\n| classNames | Semantic DOM class | Record<SemanticDOM, string> | - | 5.4.0 |\n| danger | Set the danger status of button | boolean | false |  |\n| disabled | Disabled state of button | boolean | false |  |\n| ghost | Make background transparent and invert text and border colors | boolean | false |  |\n| href | Redirect url of link button | string | - |  |\n| htmlType | Set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type) | string | `button` |  |\n| icon | Set the icon component of button | ReactNode | - |  |\n| loading | Set the loading status of button | boolean \\| { delay: number } | false |  |\n| shape | Can be set button shape | `default` \\| `circle` \\| `round` | `default` |  |\n| size | Set the size of button | `large` \\| `middle` \\| `small` | `middle` |  |\n| styles | Semantic DOM style | Record<SemanticDOM, CSSProperties> | - | 5.4.0 |\n| target | Same as target attribute of a, works when href is specified | string | - |  |\n| type | Set button type | `primary` \\| `dashed` \\| `link` \\| `text` \\| `default` | `default` |  |\n| onClick | Set the handler to handle `click` event | (event: MouseEvent) => void | - |  |\n\nIt accepts all props which native buttons support.\n\n### `styles` and `classNames` attribute\n\n| Property | Description       | Version |\n| -------- | ----------------- | ------- |\n| icon     | set `icon`element | 5.5.0   |\n\n## Design Token\n\n<ComponentTokenTable component=\"Button\"></ComponentTokenTable>\n\n## FAQ\n\n### How to remove space between 2 chinese characters?\n\nFollowing the Ant Design specification, we will add one space between if Button (exclude Text button and Link button) contains two Chinese characters only. If you don't need that, you can use [ConfigProvider](/components/config-provider/#api) to set `autoInsertSpaceInButton` as `false`.\n\n```tsx\n<ConfigProvider autoInsertSpaceInButton={false}>\n  <Button>按钮</Button>\n</ConfigProvider>\n```\n\n<img src=\"https://gw.alipayobjects.com/zos/antfincdn/MY%26THAPZrW/38f06cb9-293a-4b42-b183-9f443e79ffea.png\" width=\"100px\" height=\"64px\" style=\"box-shadow: none; margin: 0;\" alt=\"Button with two Chinese characters\" />\n\n<style>\n.site-button-ghost-wrapper {\n  padding: 16px;\n  background: rgb(190, 200, 200);\n}\n</style>\n"},"calendar":{"zh-CN":"---\ncategory: Components\ngroup: 数据展示\nsubtitle: 日历\ntitle: Calendar\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*nF6_To7pDSAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-p-wQLik200AAAAAAAAAAAAADrJ8AQ/original\n---\n\n按照日历形式展示数据的容器。\n\n## 何时使用\n\n当数据是日期或按照日期划分时，例如日程、课表、价格日历等，农历等。目前支持年/月切换。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\" clientOnly>基本</code>\n<code src=\"./demo/notice-calendar.tsx\" clientOnly>通知事项日历</code>\n<code src=\"./demo/card.tsx\" clientOnly>卡片模式</code>\n<code src=\"./demo/select.tsx\" clientOnly>选择功能</code>\n<code src=\"./demo/lunar.tsx\" clientOnly>农历日历</code>\n<code src=\"./demo/customize-header.tsx\" clientOnly>自定义头部</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n**注意**：Calendar 部分 locale 是从 value 中读取，所以请先正确设置 dayjs 的 locale。\n\n```jsx\n// 默认语言为 en-US，所以如果需要使用其他语言，推荐在入口文件全局设置 locale\n// import dayjs from 'dayjs';\n// import 'dayjs/locale/zh-cn';\n// dayjs.locale('zh-cn');\n\n<Calendar\n  dateCellRender={dateCellRender}\n  monthCellRender={monthCellRender}\n  onPanelChange={onPanelChange}\n  onSelect={onSelect}\n/>\n```\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| dateCellRender | 自定义渲染日期单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| dateFullCellRender | 自定义渲染日期单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| fullCellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| defaultValue | 默认展示的日期 | [dayjs](https://day.js.org/) | - |  |\n| disabledDate | 不可选择的日期，参数为当前 `value`，注意使用时[不要直接修改](https://github.com/ant-design/ant-design/issues/30987) | (currentDate: Dayjs) => boolean | - |  |\n| fullscreen | 是否全屏显示 | boolean | true |  |\n| headerRender | 自定义头部内容 | function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()}) | - |  |\n| locale | 国际化配置 | object | [(默认配置)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) |  |\n| mode | 初始模式 | `month` \\| `year` | `month` |  |\n| monthCellRender | 自定义渲染月单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| monthFullCellRender | 自定义渲染月单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender` | function(date: Dayjs): ReactNode | - | < 5.4.0 |\n| fullCellRender | 自定义单元格的内容 | function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| validRange | 设置可以显示的日期 | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - |  |\n| value | 展示日期 | [dayjs](https://day.js.org/) | - |  |\n| onChange | 日期变化回调 | function(date: Dayjs) | - |  |\n| onPanelChange | 日期面板变化回调 | function(date: Dayjs, mode: string) | - |  |\n| onSelect | 选择日期回调，包含来源信息 | function(date: Dayjs, info: { source: 'year' \\| 'month' \\| 'date' \\| 'customize' }) | - | `info`: 5.6.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Calendar\"></ComponentTokenTable>\n\n## FAQ\n\n### 如何在 Calendar 中使用自定义日期库\n\n参考 [使用自定义日期库](/docs/react/use-custom-date-library#calendar)。\n\n### 如何给日期类组件配置国际化？\n\n参考 [如何给日期类组件配置国际化](/components/date-picker-cn#%E5%9B%BD%E9%99%85%E5%8C%96%E9%85%8D%E7%BD%AE)。\n\n### 为什么时间类组件的国际化 locale 设置不生效？\n\n参考 FAQ [为什么时间类组件的国际化 locale 设置不生效？](/docs/react/faq#为什么时间类组件的国际化-locale-设置不生效)。\n\n### 如何仅获取来自面板点击的日期？\n\n`onSelect` 事件提供额外的来源信息，你可以通过 `info.source` 来判断来源：\n\n```tsx\n<Calendar\n  onSelect={(date, { source }) => {\n    if (source === 'date') {\n      console.log('Panel Select:', source);\n    }\n  }}\n/>\n```\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Calendar\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*nF6_To7pDSAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-p-wQLik200AAAAAAAAAAAAADrJ8AQ/original\n---\n\nContainer for displaying data in calendar form.\n\n## When To Use\n\nWhen data is in the form of dates, such as schedules, timetables, prices calendar, lunar calendar. This component also supports Year/Month switch.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\" clientOnly>Basic</code>\n<code src=\"./demo/notice-calendar.tsx\" clientOnly>Notice Calendar</code>\n<code src=\"./demo/card.tsx\" clientOnly>Card</code>\n<code src=\"./demo/select.tsx\" clientOnly>Selectable Calendar</code>\n<code src=\"./demo/lunar.tsx\" clientOnly>Lunar Calendar</code>\n<code src=\"./demo/customize-header.tsx\" clientOnly>Customize Header</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n**Note:** Part of the Calendar's locale is read from `value`. So, please set the locale of `dayjs` correctly.\n\n```jsx\n// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\n// import dayjs from 'dayjs';\n// import 'dayjs/locale/zh-cn';\n// dayjs.locale('zh-cn');\n\n<Calendar\n  dateCellRender={dateCellRender}\n  monthCellRender={monthCellRender}\n  onPanelChange={onPanelChange}\n  onSelect={onSelect}\n/>\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| dateCellRender | Customize the display of the date cell, the returned content will be appended to the cell | function(date: Dayjs): ReactNode | - |  |\n| dateFullCellRender | Customize the display of the date cell, the returned content will override the cell | function(date: Dayjs): ReactNode | - |  |\n| defaultValue | The date selected by default | [dayjs](https://day.js.org/) | - |  |\n| disabledDate | Function that specifies the dates that cannot be selected, `currentDate` is same dayjs object as `value` prop which you shouldn't mutate it](https://github.com/ant-design/ant-design/issues/30987) | (currentDate: Dayjs) => boolean | - |  |\n| fullscreen | Whether to display in full-screen | boolean | true |  |\n| headerRender | Render custom header in panel | function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()}) | - |  |\n| locale | The calendar's locale | object | [(default)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) |  |\n| mode | The display mode of the calendar | `month` \\| `year` | `month` |  |\n| monthCellRender | Customize the display of the month cell, the returned content will be appended to the cell | function(date: Dayjs): ReactNode | - |  |\n| monthFullCellRender | Customize the display of the month cell, the returned content will override the cell | function(date: Dayjs): ReactNode | - |  |\n| validRange | To set valid range | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - |  |\n| value | The current selected date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback for when date changes | function(date: Dayjs) | - |  |\n| onPanelChange | Callback for when panel changes | function(date: Dayjs, mode: string) | - |  |\n| onSelect | Callback for when a date is selected, include source info | function(date: Dayjs, info: { source: 'year' \\| 'month' \\| 'date' \\| 'customize' }) | - | `info`: 5.6.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Calendar\"></ComponentTokenTable>\n\n## FAQ\n\n### How to use Calendar with customize date library?\n\nSee [Use custom date library](/docs/react/use-custom-date-library#calendar)\n\n### How to set locale for date-related components?\n\nSee [How to set locale for date-related components](/components/date-picker/#localization)\n\n### Date-related components locale is not working?\n\nSee FAQ [Date-related-components-locale-is-not-working?](/docs/react/faq#date-related-components-locale-is-not-working)\n\n### How to get date from panel click?\n\n`onSelect` provide `info.source` to help on this:\n\n```tsx\n<Calendar\n  onSelect={(date, { source }) => {\n    if (source === 'date') {\n      console.log('Panel Select:', source);\n    }\n  }}\n/>\n```\n"},"card":{"zh-CN":"---\ncategory: Components\ngroup: 数据展示\ntitle: Card\nsubtitle: 卡片\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*VXtCTp93KPAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a-8zR6rrupgAAAAAAAAAAAAADrJ8AQ/original\n---\n\n通用卡片容器。\n\n## 何时使用\n\n最基础的卡片容器，可承载文字、列表、图片、段落，常用于后台概览页面。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">典型卡片</code>\n<code src=\"./demo/border-less.tsx\" background=\"grey\">无边框</code>\n<code src=\"./demo/simple.tsx\">简洁卡片</code>\n<code src=\"./demo/flexible-content.tsx\">更灵活的内容展示</code>\n<code src=\"./demo/in-column.tsx\" background=\"grey\">栅格卡片</code>\n<code src=\"./demo/loading.tsx\">预加载的卡片</code>\n<code src=\"./demo/grid-card.tsx\">网格型内嵌卡片</code>\n<code src=\"./demo/inner.tsx\">内部卡片</code>\n<code src=\"./demo/tabs.tsx\">带页签的卡片</code>\n<code src=\"./demo/meta.tsx\">支持更多内容配置</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n```jsx\n<Card title=\"卡片标题\">卡片内容</Card>\n```\n\n### Card\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| actions | 卡片操作组，位置在卡片底部 | Array&lt;ReactNode> | - |  |\n| activeTabKey | 当前激活页签的 key | string | - |  |\n| bodyStyle | 内容区域自定义样式 | CSSProperties | - |  |\n| bordered | 是否有边框 | boolean | true |  |\n| cover | 卡片封面 | ReactNode | - |  |\n| defaultActiveTabKey | 初始化选中页签的 key，如果没有设置 activeTabKey | string | `第一个页签` |  |\n| extra | 卡片右上角的操作区域 | ReactNode | - |  |\n| headStyle | 自定义标题区域样式 | CSSProperties | - |  |\n| hoverable | 鼠标移过时可浮起 | boolean | false |  |\n| loading | 当卡片内容还在加载中时，可以用 loading 展示一个占位 | boolean | false |  |\n| size | card 的尺寸 | `default` \\| `small` | `default` |  |\n| tabBarExtraContent | tab bar 上额外的元素 | ReactNode | - |  |\n| tabList | 页签标题列表 | [TabItemType](/components/tabs#tabitemtype)[] | - |  |\n| tabProps | [Tabs](/components/tabs-cn#tabs) | - | - |  |\n| title | 卡片标题 | ReactNode | - |  |\n| type | 卡片类型，可设置为 `inner` 或 不设置 | string | - |  |\n| onTabChange | 页签切换的回调 | (key) => void | - |  |\n\n### Card.Grid\n\n| 参数      | 说明                   | 类型          | 默认值 | 版本 |\n| --------- | ---------------------- | ------------- | ------ | ---- |\n| className | 网格容器类名           | string        | -      |      |\n| hoverable | 鼠标移过时可浮起       | boolean       | true   |      |\n| style     | 定义网格容器类名的样式 | CSSProperties | -      |      |\n\n### Card.Meta\n\n| 参数        | 说明               | 类型          | 默认值 | 版本 |\n| ----------- | ------------------ | ------------- | ------ | ---- |\n| avatar      | 头像/图标          | ReactNode     | -      |      |\n| className   | 容器类名           | string        | -      |      |\n| description | 描述内容           | ReactNode     | -      |      |\n| style       | 定义容器类名的样式 | CSSProperties | -      |      |\n| title       | 标题内容           | ReactNode     | -      |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Card\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Card\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*VXtCTp93KPAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a-8zR6rrupgAAAAAAAAAAAAADrJ8AQ/original\n---\n\nSimple rectangular container.\n\n## When To Use\n\nA card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic card</code>\n<code src=\"./demo/border-less.tsx\" background=\"grey\">No border</code>\n<code src=\"./demo/simple.tsx\">Simple card</code>\n<code src=\"./demo/flexible-content.tsx\">Customized content</code>\n<code src=\"./demo/in-column.tsx\" background=\"grey\">Card in column</code>\n<code src=\"./demo/loading.tsx\">Loading card</code>\n<code src=\"./demo/grid-card.tsx\">Grid card</code>\n<code src=\"./demo/inner.tsx\">Inner card</code>\n<code src=\"./demo/tabs.tsx\">With tabs</code>\n<code src=\"./demo/meta.tsx\">Support more content configuration</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Card title=\"Card title\">Card content</Card>\n```\n\n### Card\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| actions | The action list, shows at the bottom of the Card | Array&lt;ReactNode> | - |  |\n| activeTabKey | Current TabPane's key | string | - |  |\n| bodyStyle | Inline style to apply to the card content | CSSProperties | - |  |\n| bordered | Toggles rendering of the border around the card | boolean | true |  |\n| cover | Card cover | ReactNode | - |  |\n| defaultActiveTabKey | Initial active TabPane's key, if `activeTabKey` is not set | string | - |  |\n| extra | Content to render in the top-right corner of the card | ReactNode | - |  |\n| headStyle | Inline style to apply to the card head | CSSProperties | - |  |\n| hoverable | Lift up when hovering card | boolean | false |  |\n| loading | Shows a loading indicator while the contents of the card are being fetched | boolean | false |  |\n| size | Size of card | `default` \\| `small` | `default` |  |\n| tabBarExtraContent | Extra content in tab bar | ReactNode | - |  |\n| tabList | List of TabPane's head | [TabItemType](/components/tabs#tabitemtype)[] | - |  |\n| tabProps | [Tabs](/components/tabs/#tabs) | - | - |  |\n| title | Card title | ReactNode | - |  |\n| type | Card style type, can be set to `inner` or not set | string | - |  |\n| onTabChange | Callback when tab is switched | (key) => void | - |  |\n\n### Card.Grid\n\n| Property  | Description                     | Type          | Default | Version |\n| --------- | ------------------------------- | ------------- | ------- | ------- |\n| className | The className of container      | string        | -       |         |\n| hoverable | Lift up when hovering card grid | boolean       | true    |         |\n| style     | The style object of container   | CSSProperties | -       |         |\n\n### Card.Meta\n\n| Property    | Description                   | Type          | Default | Version |\n| ----------- | ----------------------------- | ------------- | ------- | ------- |\n| avatar      | Avatar or icon                | ReactNode     | -       |         |\n| className   | The className of container    | string        | -       |         |\n| description | Description content           | ReactNode     | -       |         |\n| style       | The style object of container | CSSProperties | -       |         |\n| title       | Title content                 | ReactNode     | -       |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Card\"></ComponentTokenTable>\n"},"carousel":{"zh-CN":"---\ncategory: Components\ngroup: 数据展示\ntitle: Carousel\nsubtitle: 走马灯\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*bPMSSqbaTMkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a-58QpYnqOsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n旋转木马，一组轮播的区域。\n\n## 何时使用\n\n- 当有一组平级的内容。\n- 当内容空间不足时，可以用走马灯的形式进行收纳，进行轮播展现。\n- 常用于一组图片或卡片轮播。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/position.tsx\">位置</code>\n<code src=\"./demo/autoplay.tsx\">自动切换</code>\n<code src=\"./demo/fade.tsx\">渐显</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoplay | 是否自动切换 | boolean | false |  |\n| autoplaySpeed | 自动切换的间隔（毫秒） | number | 3000 |  |\n| dotPosition | 面板指示点位置，可选 `top` `bottom` `left` `right` | string | `bottom` |  |\n| dots | 是否显示面板指示点，如果为 `object` 则同时可以指定 `dotsClass` 或者 | boolean \\| { className?: string } | true |  |\n| fade | 使用渐变切换动效 | boolean | false |  |\n| infinite | 是否无限循环切换（实现方式是复制两份 children 元素，如果子元素有副作用则可能会引发 bug） | boolean | true |  |\n| speed | 切换动效的时间（毫秒） | number | 500 |  |\n| easing | 动画效果 | string | `linear` |  |\n| effect | 动画效果函数 | `scrollx` \\| `fade` | `scrollx` |  |\n| afterChange | 切换面板的回调 | (current: number) => void | - |  |\n| beforeChange | 切换面板的回调 | (current: number, next: number) => void | - |  |\n| waitForAnimate | 是否等待切换动画 | boolean | false |  |\n\n## 方法\n\n| 名称                           | 描述                                              |\n| ------------------------------ | ------------------------------------------------- |\n| goTo(slideNumber, dontAnimate) | 切换到指定面板, dontAnimate = true 时，不使用动画 |\n| next()                         | 切换到下一面板                                    |\n| prev()                         | 切换到上一面板                                    |\n\n更多 API 可参考：<https://react-slick.neostack.com/docs/api>\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Carousel\"></ComponentTokenTable>\n\n## FAQ\n\n### 如何自定义箭头？\n\n可参考 [#12479](https://github.com/ant-design/ant-design/issues/12479)。\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Carousel\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*bPMSSqbaTMkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a-58QpYnqOsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA carousel component. Scales with its container.\n\n## When To Use\n\n- When there is a group of content on the same level.\n- When there is insufficient content space, it can be used to save space in the form of a revolving door.\n- Commonly used for a group of pictures/cards.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/position.tsx\">Position</code>\n<code src=\"./demo/autoplay.tsx\">Scroll automatically</code>\n<code src=\"./demo/fade.tsx\">Fade in</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoplay | Whether to scroll automatically | boolean | false |  |\n| autoplaySpeed | Delay between each auto scroll (in milliseconds) | number | 3000 |  |\n| dotPosition | The position of the dots, which can be one of `top` `bottom` `left` `right` | string | `bottom` |  |\n| dots | Whether to show the dots at the bottom of the gallery, `object` for `dotsClass` and any others | boolean \\| { className?: string } | true |  |\n| fade | Whether to use fade transition | boolean | false |  |\n| infinite | Infinitely wrap around contents | boolean | true |  |\n| speed | Animation speed in milliseconds | number | 500 |  |\n| easing | Transition interpolation function name | string | `linear` |  |\n| effect | Transition effect | `scrollx` \\| `fade` | `scrollx` |  |\n| afterChange | Callback function called after the current index changes | (current: number) => void | - |  |\n| beforeChange | Callback function called before the current index changes | (current: number, next: number) => void | - |  |\n| waitForAnimate | Whether to wait for the animation when switching | boolean | false |  |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| goTo(slideNumber, dontAnimate) | Go to slide index, if dontAnimate=true, it happens without animation |\n| next() | Change current slide to next slide |\n| prev() | Change current slide to previous slide |\n\nFind more APIs in react-slick [documentation](https://react-slick.neostack.com/docs/api).\n\n## Design Token\n\n<ComponentTokenTable component=\"Carousel\"></ComponentTokenTable>\n\n## FAQ\n\n### How to add custom arrows?\n\nSee [#12479](https://github.com/ant-design/ant-design/issues/12479).\n"},"cascader":{"zh-CN":"---\ncategory: Components\ngroup: 数据录入\ntitle: Cascader\nsubtitle: 级联选择\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*tokLTp73TsQAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5-ArSLl5UBsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n级联选择框。\n\n## 何时使用\n\n- 需要从一组相关联的数据集合进行选择，例如省市区，公司层级，事物分类等。\n- 从一个较大的数据集合中进行选择时，用多级分类进行分隔，方便选择。\n- 比起 Select 组件，可以在同一个浮层中完成选择，有较好的体验。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/default-value.tsx\">默认值</code>\n<code src=\"./demo/custom-trigger.tsx\">可以自定义显示</code>\n<code src=\"./demo/hover.tsx\">移入展开</code>\n<code src=\"./demo/disabled-option.tsx\">禁用选项</code>\n<code src=\"./demo/change-on-select.tsx\">选择即改变</code>\n<code src=\"./demo/multiple.tsx\">多选</code>\n<code src=\"./demo/showCheckedStrategy.tsx\">自定义回填方式</code>\n<code src=\"./demo/size.tsx\">大小</code>\n<code src=\"./demo/custom-render.tsx\">自定义已选项</code>\n<code src=\"./demo/search.tsx\">搜索</code>\n<code src=\"./demo/lazy.tsx\">动态加载选项</code>\n<code src=\"./demo/fields-name.tsx\">自定义字段名</code>\n<code src=\"./demo/suffix.tsx\" debug>自定义图标</code>\n<code src=\"./demo/custom-dropdown.tsx\">扩展菜单</code>\n<code src=\"./demo/placement.tsx\">弹出位置</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/panel.tsx\" version=\">= 5.10.0\">面板使用</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n```jsx\n<Cascader options={options} onChange={onChange} />\n```\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: 支持对象形式 |\n| autoClearSearchValue | 是否在选中项后清空搜索框，只在 `multiple` 为 `true` 时有效 | boolean | true | 5.9.0 |\n| autoFocus | 自动获取焦点 | boolean | false |  |\n| changeOnSelect | （单选时生效）当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示 | boolean | false |  |\n| className | 自定义类名 | string | - |  |\n| defaultValue | 默认的选中项 | string\\[] \\| number\\[] | \\[] |  |\n| disabled | 禁用 | boolean | false |  |\n| displayRender | 选择后展示的渲染函数 | (label, selectedOptions) => ReactNode | label => label.join(`/`) | `multiple`: 4.18.0 |\n| tagRender | 自定义 tag 内容 render，仅在多选时生效 | ({ label: string, onClose: function, value: string }) => ReactNode | - |  |\n| popupClassName | 自定义浮层类名 | string | - | 4.23.0 |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.4.0 |\n| expandIcon | 自定义次级菜单展开图标 | ReactNode | - | 4.4.0 |\n| expandTrigger | 次级菜单的展开方式，可选 'click' 和 'hover' | string | `click` |  |\n| fieldNames | 自定义 options 中 label value children 的字段 | object | { label: `label`, value: `value`, children: `children` } |  |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body |  |\n| loadData | 用于动态加载选项，无法与 `showSearch` 一起使用 | (selectedOptions) => void | - |  |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number \\| `responsive` | - | 4.17.0 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode \\| function(omittedValues) | - | 4.17.0 |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - | 4.17.0 |\n| notFoundContent | 当下拉列表为空时显示的内容 | string | `Not Found` |  |\n| open | 控制浮层显隐 | boolean | - | 4.17.0 |\n| options | 可选项数据源 | [Option](#option)\\[] | - |  |\n| placeholder | 输入框占位文本 | string | `请选择` |  |\n| placement | 浮层预设位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | `bottomLeft` | 4.17.0 |\n| showSearch | 在选择框中显示搜索框 | boolean \\| [Object](#showsearch) | false |  |\n| size | 输入框大小 | `large` \\| `middle` \\| `small` | - |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| style | 自定义样式 | CSSProperties | - |  |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - |  |\n| value | 指定选中项 | string\\[] \\| number\\[] | - |  |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onChange | 选择完成后的回调 | (value, selectedOptions) => void | - |  |\n| onDropdownVisibleChange | 显示/隐藏浮层的回调 | (value) => void | - | 4.17.0 |\n| multiple | 支持多选节点 | boolean | - | 4.17.0 |\n| showCheckedStrategy | 定义选中项回填的方式。`Cascader.SHOW_CHILD`: 只显示选中的子节点。`Cascader.SHOW_PARENT`: 只显示父节点（当父节点下所有子节点都选中时）。 | `Cascader.SHOW_PARENT` \\| `Cascader.SHOW_CHILD` | `Cascader.SHOW_PARENT` | 4.20.0 |\n| removeIcon | 自定义的多选框清除图标 | ReactNode | - |  |\n| searchValue | 设置搜索的值，需要与 `showSearch` 配合使用 | string | - | 4.17.0 |\n| onSearch | 监听搜索，返回输入的值 | (search: string) => void | - | 4.17.0 |\n| dropdownMenuColumnStyle | 下拉菜单列的样式 | CSSProperties | - |  |\n\n### showSearch\n\n`showSearch` 为对象时，其中的字段：\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| filter | 接收 `inputValue` `path` 两个参数，当 `path` 符合筛选条件时，应返回 true，反之则返回 false | function(inputValue, path): boolean | - |  |\n| limit | 搜索结果展示数量 | number \\| false | 50 |  |\n| matchInputWidth | 搜索结果列表是否与输入框同宽（[效果](https://github.com/ant-design/ant-design/issues/25779)） | boolean | true |  |\n| render | 用于渲染 filter 后的选项 | function(inputValue, path): ReactNode | - |  |\n| sort | 用于排序 filter 后的选项 | function(a, b, inputValue) | - |  |\n\n### Option\n\n```typescript\ninterface Option {\n  value: string | number;\n  label?: React.ReactNode;\n  disabled?: boolean;\n  children?: Option[];\n  // 标记是否为叶子节点，设置了 `loadData` 时有效\n  // 设为 `false` 时会强制标记为父节点，即使当前节点没有 children，也会显示展开图标\n  isLeaf?: boolean;\n}\n```\n\n## 方法\n\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n\n> 注意，如果需要获得中国省市区数据，可以参考 [china-division](https://gist.github.com/afc163/7582f35654fd03d5be7009444345ea17)。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Cascader\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Cascader\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*tokLTp73TsQAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5-ArSLl5UBsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nCascade selection box.\n\n## When To Use\n\n- When you need to select from a set of associated data set. Such as province/city/district, company level, things classification.\n- When selecting from a large data set, with multi-stage classification separated for easy selection.\n- Chooses cascade items in one float layer for better user experience.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/default-value.tsx\">Default value</code>\n<code src=\"./demo/custom-trigger.tsx\">Custom trigger</code>\n<code src=\"./demo/hover.tsx\">Hover</code>\n<code src=\"./demo/disabled-option.tsx\">Disabled option</code>\n<code src=\"./demo/change-on-select.tsx\">Change on select</code>\n<code src=\"./demo/multiple.tsx\">Multiple</code>\n<code src=\"./demo/showCheckedStrategy.tsx\">ShowCheckedStrategy</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/custom-render.tsx\">Custom render</code>\n<code src=\"./demo/search.tsx\">Search</code>\n<code src=\"./demo/lazy.tsx\">Load Options Lazily</code>\n<code src=\"./demo/fields-name.tsx\">Custom Field Names</code>\n<code src=\"./demo/suffix.tsx\" debug>Custom Icons</code>\n<code src=\"./demo/custom-dropdown.tsx\">Custom dropdown</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/panel.tsx\" version=\">= 5.10.0\">Panel</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Cascader options={options} onChange={onChange} />\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Show clear button | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: Support object type |\n| autoClearSearchValue | Whether the current search will be cleared on selecting an item. Only applies when `multiple` is `true` | boolean | true | 5.9.0 |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| changeOnSelect | (Work on single select) Change value on each selection if set to true, see above demo for details | boolean | false |  |\n| className | The additional css class | string | - |  |\n| defaultValue | Initial selected value | string\\[] \\| number\\[] | \\[] |  |\n| disabled | Whether disabled select | boolean | false |  |\n| displayRender | The render function of displaying selected options | (label, selectedOptions) => ReactNode | label => label.join(`/`) | `multiple`: 4.18.0 |\n| tagRender | Custom render function for tags in `multiple` mode | (label: string, onClose: function, value: string) => ReactNode | - |  |\n| popupClassName | The additional className of popup overlay | string | - | 4.23.0 |\n| dropdownRender | Customize dropdown content | (menus: ReactNode) => ReactNode | - | 4.4.0 |\n| expandIcon | Customize the current item expand icon | ReactNode | - | 4.4.0 |\n| expandTrigger | expand current item when click or hover, one of `click` `hover` | string | `click` |  |\n| fieldNames | Custom field name for label and value and children | object | { label: `label`, value: `value`, children: `children` } |  |\n| getPopupContainer | Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body |  |\n| loadData | To load option lazily, and it cannot work with `showSearch` | (selectedOptions) => void | - |  |\n| maxTagCount | Max tag count to show. `responsive` will cost render performance | number \\| `responsive` | - | 4.17.0 |\n| maxTagPlaceholder | Placeholder for not showing tags | ReactNode \\| function(omittedValues) | - | 4.17.0 |\n| maxTagTextLength | Max tag text length to show | number | - | 4.17.0 |\n| notFoundContent | Specify content to show when no result matches | string | `Not Found` |  |\n| open | Set visible of cascader popup | boolean | - | 4.17.0 |\n| options | The data options of cascade | [Option](#option)\\[] | - |  |\n| placeholder | The input placeholder | string | `Please select` |  |\n| placement | Use preset popup align config from builtinPlacements | `bottomLeft` `bottomRight` `topLeft` `topRight` | `bottomLeft` | 4.17.0 |\n| showSearch | Whether show search input in single mode | boolean \\| [Object](#showsearch) | false |  |\n| size | The input size | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| style | The additional style | CSSProperties | - |  |\n| suffixIcon | The custom suffix icon | ReactNode | - |  |\n| value | The selected value | string\\[] \\| number\\[] | - |  |\n| variant | Variants of selector | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onChange | Callback when finishing cascader select | (value, selectedOptions) => void | - |  |\n| onDropdownVisibleChange | Callback when popup shown or hidden | (value) => void | - | 4.17.0 |\n| multiple | Support multiple or not | boolean | - | 4.17.0 |\n| removeIcon | The custom remove icon | ReactNode | - |  |\n| showCheckedStrategy | The way show selected item in box. ** `SHOW_CHILD`: ** just show child treeNode. **`Cascader.SHOW_PARENT`:** just show parent treeNode (when all child treeNode under the parent treeNode are checked) | `Cascader.SHOW_PARENT` \\| `Cascader.SHOW_CHILD` | `Cascader.SHOW_PARENT` | 4.20.0 |\n| searchValue | Set search value, Need work with `showSearch` | string | - | 4.17.0 |\n| onSearch | The callback function triggered when input changed | (search: string) => void | - | 4.17.0 |\n| dropdownMenuColumnStyle | The style of the drop-down menu column | CSSProperties | - |  |\n| loadingIcon | The appearance of lazy loading (now is useless) | ReactNode | - |  |\n\n### showSearch\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| filter | The function will receive two arguments, inputValue and option, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded | function(inputValue, path): boolean | - |  |\n| limit | Set the count of filtered items | number \\| false | 50 |  |\n| matchInputWidth | Whether the width of list matches input, ([how it looks](https://github.com/ant-design/ant-design/issues/25779)) | boolean | true |  |\n| render | Used to render filtered options | function(inputValue, path): ReactNode | - |  |\n| sort | Used to sort filtered options | function(a, b, inputValue) | - |  |\n\n### Option\n\n```typescript\ninterface Option {\n  value: string | number;\n  label?: React.ReactNode;\n  disabled?: boolean;\n  children?: Option[];\n  // Determines if this is a leaf node(effective when `loadData` is specified).\n  // `false` will force trade TreeNode as a parent node.\n  // Show expand icon even if the current node has no children.\n  isLeaf?: boolean;\n}\n```\n\n## Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Cascader\"></ComponentTokenTable>\n"},"checkbox":{"zh-CN":"---\ncategory: Components\nsubtitle: 多选框\ngroup: 数据录入\ntitle: Checkbox\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*DzgiRbW3khIAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*G3MjTYXL6AIAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n多选框。\n\n## 何时使用\n\n- 在一组可选项中进行多项选择时；\n- 单独使用可以表示两种状态之间的切换，和 `switch` 类似。区别在于切换 `switch` 会直接触发状态改变，而 `checkbox` 一般用于状态标记，需要和提交操作配合。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/disabled.tsx\">不可用</code>\n<code src=\"./demo/controller.tsx\">受控的 Checkbox</code>\n<code src=\"./demo/group.tsx\">Checkbox 组</code>\n<code src=\"./demo/check-all.tsx\">全选</code>\n<code src=\"./demo/layout.tsx\">布局</code>\n<code src=\"./demo/debug-line.tsx\" debug>同行布局</code>\n<code src=\"./demo/debug-disable-popover.tsx\" debug>禁用下的 Tooltip</code>\n<code src=\"./demo/custom-line-width.tsx\" debug>自定义 lineWidth</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n#### Checkbox\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 自动获取焦点 | boolean | false |  |\n| checked | 指定当前是否选中 | boolean | false |  |\n| defaultChecked | 初始是否选中 | boolean | false |  |\n| disabled | 失效状态 | boolean | false |  |\n| indeterminate | 设置 indeterminate 状态，只负责样式控制 | boolean | false |  |\n| onChange | 变化时的回调函数 | (e: CheckboxChangeEvent) => void | - |  |\n\n#### Checkbox Group\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认选中的选项 | (string \\| number)\\[] | \\[] |  |\n| disabled | 整组失效 | boolean | false |  |\n| name | CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性 | string | - |  |\n| options | 指定可选项 | string\\[] \\| number\\[] \\| Option\\[] | \\[] |  |\n| value | 指定选中的选项 | (string \\| number \\| boolean)\\[] | \\[] |  |\n| onChange | 变化时的回调函数 | (checkedValue: CheckboxValueType[]) => void | - |  |\n\n##### Option\n\n```typescript\ninterface Option {\n  label: string;\n  value: string;\n  disabled?: boolean;\n}\n```\n\n### 方法\n\n#### Checkbox\n\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Checkbox\"></ComponentTokenTable>\n\n## FAQ\n\n### 为什么在 Form.Item 下不能绑定数据？\n\nForm.Item 默认绑定值属性到 `value` 上，而 Checkbox 的值属性为 `checked`。你可以通过 `valuePropName` 来修改绑定的值属性。\n\n```tsx | pure\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Checkbox />\n</Form.Item>\n```\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Checkbox\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*DzgiRbW3khIAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*G3MjTYXL6AIAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nCheckbox component.\n\n## When To Use\n\n- Used for selecting multiple values from several options.\n- If you use only one checkbox, it is the same as using Switch to toggle between two states. The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/controller.tsx\">Controlled Checkbox</code>\n<code src=\"./demo/group.tsx\">Checkbox Group</code>\n<code src=\"./demo/check-all.tsx\">Check all</code>\n<code src=\"./demo/layout.tsx\">Use with Grid</code>\n<code src=\"./demo/debug-line.tsx\" debug>Same line</code>\n<code src=\"./demo/debug-disable-popover.tsx\" debug>Disabled to show Tooltip</code>\n<code src=\"./demo/custom-line-width.tsx\" debug>customize lineWidth</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n#### Checkbox\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| checked | Specifies whether the checkbox is selected | boolean | false |  |\n| defaultChecked | Specifies the initial state: whether or not the checkbox is selected | boolean | false |  |\n| disabled | If disable checkbox | boolean | false |  |\n| indeterminate | The indeterminate checked state of checkbox | boolean | false |  |\n| onChange | The callback function that is triggered when the state changes | (e: CheckboxChangeEvent) => void | - |  |\n\n#### Checkbox Group\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | Default selected value | (string \\| number)\\[] | \\[] |  |\n| disabled | If disable all checkboxes | boolean | false |  |\n| name | The `name` property of all `input[type=\"checkbox\"]` children | string | - |  |\n| options | Specifies options | string\\[] \\| number\\[] \\| Option\\[] | \\[] |  |\n| value | Used for setting the currently selected value | (string \\| number \\| boolean)\\[] | \\[] |  |\n| onChange | The callback function that is triggered when the state changes | (checkedValue: CheckboxValueType[]) => void | - |  |\n\n##### Option\n\n```typescript\ninterface Option {\n  label: string;\n  value: string;\n  disabled?: boolean;\n}\n```\n\n### Methods\n\n#### Checkbox\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Checkbox\"></ComponentTokenTable>\n\n## FAQ\n\n### Why not work in Form.Item?\n\nForm.Item default bind value to `value` property, but Checkbox value property is `checked`. You can use `valuePropName` to change bind property.\n\n```tsx | pure\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Checkbox />\n</Form.Item>\n```\n"},"collapse":{"zh-CN":"---\ncategory: Components\ngroup: 数据展示\ntitle: Collapse\nsubtitle: 折叠面板\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*B7HKR5OBe8gAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sir-TK0HkWcAAAAAAAAAAAAADrJ8AQ/original\n---\n\n可以折叠/展开的内容区域。\n\n## 何时使用\n\n- 对复杂区域进行分组和隐藏，保持页面的整洁。\n- `手风琴` 是一种特殊的折叠面板，只允许单个内容区域展开。\n\n```tsx | pure\n// >= 5.6.0 可用，推荐的写法 ✅\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nconst items: CollapseProps['items'] = [\n  {\n    key: '1',\n    label: 'This is panel header 1',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '2',\n    label: 'This is panel header 2',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '3',\n    label: 'This is panel header 3',\n    children: <p>{text}</p>,\n  },\n];\n\n<Collapse items={items} defaultActiveKey={['1']} />;\n\n// <5.6.0 可用，>=5.6.0 时不推荐 🙅🏻‍♀️\n\n<Collapse defaultActiveKey={['1']} onChange={onChange}>\n  <Panel header=\"This is panel header 1\" key=\"1\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 2\" key=\"2\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 3\" key=\"3\">\n    <p>{text}</p>\n  </Panel>\n</Collapse>;\n```\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">折叠面板</code>\n<code src=\"./demo/size.tsx\">面板尺寸</code>\n<code src=\"./demo/accordion.tsx\">手风琴</code>\n<code src=\"./demo/mix.tsx\">面板嵌套</code>\n<code src=\"./demo/borderless.tsx\">简洁风格</code>\n<code src=\"./demo/custom.tsx\">自定义面板</code>\n<code src=\"./demo/noarrow.tsx\">隐藏箭头</code>\n<code src=\"./demo/extra.tsx\">额外节点</code>\n<code src=\"./demo/ghost.tsx\">幽灵折叠面板</code>\n<code src=\"./demo/collapsible.tsx\">可折叠触发区域</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Collapse\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| accordion | 手风琴模式 | boolean | false |  |\n| activeKey | 当前激活 tab 面板的 key | string\\[] \\| string <br/> number\\[] \\| number | 默认无，accordion 模式下默认第一个元素 |  |\n| bordered | 带边框风格的折叠面板 | boolean | true |  |\n| collapsible | 所有子面板是否可折叠或指定可折叠触发区域 | `header` \\| `icon` \\| `disabled` | - | 4.9.0 |\n| defaultActiveKey | 初始化选中面板的 key | string\\[] \\| string<br/> number\\[] \\| number | - |  |\n| destroyInactivePanel | 销毁折叠隐藏的面板 | boolean | false |  |\n| expandIcon | 自定义切换图标 | (panelProps) => ReactNode | - |  |\n| expandIconPosition | 设置图标位置 | `start` \\| `end` | - | 4.21.0 |\n| ghost | 使折叠面板透明且无边框 | boolean | false | 4.4.0 |\n| size | 设置折叠面板大小 | `large` \\| `middle` \\| `small` | `middle` | 5.2.0 |\n| onChange | 切换面板的回调 | function | - |  |\n| items | 折叠项目内容 | [ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6) | - | 5.6.0 |\n\n### Collapse.Panel\n\n<!-- prettier-ignore -->\n:::info{title=已废弃}\n版本 >= 5.6.0 时请使用 items 方式配置面板。\n:::\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| collapsible | 是否可折叠或指定可折叠触发区域 | `header` \\| `icon` \\| `disabled` | - | 4.9.0 (icon: 4.24.0) |\n| extra | 自定义渲染每个面板右上角的内容 | ReactNode | - |  |\n| forceRender | 被隐藏时是否渲染 DOM 结构 | boolean | false |  |\n| header | 面板头内容 | ReactNode | - |  |\n| key | 对应 activeKey | string \\| number | - |  |\n| showArrow | 是否展示当前面板上的箭头（为 false 时，collapsible 不能置为 icon） | boolean | true |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Collapse\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Collapse\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*B7HKR5OBe8gAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sir-TK0HkWcAAAAAAAAAAAAADrJ8AQ/original\n---\n\nA content area which can be collapsed and expanded.\n\n## When To Use\n\n- Can be used to group or hide complex regions to keep the page clean.\n- `Accordion` is a special kind of `Collapse`, which allows only one panel to be expanded at a time.\n\n```tsx | pure\n// works when >= 5.6.0, recommended ✅\nconst text = `\n  A dog is a type of domesticated animal.\n  Known for its loyalty and faithfulness,\n  it can be found as a welcome guest in many households across the world.\n`;\n\nconst items: CollapseProps['items'] = [\n  {\n    key: '1',\n    label: 'This is panel header 1',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '2',\n    label: 'This is panel header 2',\n    children: <p>{text}</p>,\n  },\n  {\n    key: '3',\n    label: 'This is panel header 3',\n    children: <p>{text}</p>,\n  },\n];\n\n<Collapse items={items} defaultActiveKey={['1']} />;\n\n// works when <5.6.0 , deprecated when >=5.6.0  🙅🏻‍♀️\n\n<Collapse defaultActiveKey={['1']} onChange={onChange}>\n  <Panel header=\"This is panel header 1\" key=\"1\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 2\" key=\"2\">\n    <p>{text}</p>\n  </Panel>\n  <Panel header=\"This is panel header 3\" key=\"3\">\n    <p>{text}</p>\n  </Panel>\n</Collapse>;\n```\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Collapse</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/accordion.tsx\">Accordion</code>\n<code src=\"./demo/mix.tsx\">Nested panel</code>\n<code src=\"./demo/borderless.tsx\">Borderless</code>\n<code src=\"./demo/custom.tsx\">Custom Panel</code>\n<code src=\"./demo/noarrow.tsx\">No arrow</code>\n<code src=\"./demo/extra.tsx\">Extra node</code>\n<code src=\"./demo/ghost.tsx\">Ghost Collapse</code>\n<code src=\"./demo/collapsible.tsx\">Collapsible</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Collapse\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| accordion | If true, Collapse renders as Accordion | boolean | false |  |\n| activeKey | Key of the active panel | string\\[] \\| string <br/> number\\[] \\| number | No default value. In `accordion` mode, it's the key of the first panel |  |\n| bordered | Toggles rendering of the border around the collapse block | boolean | true |  |\n| collapsible | Specify whether the panels of children be collapsible or the trigger area of collapsible | `header` \\| `icon` \\| `disabled` | - | 4.9.0 |\n| defaultActiveKey | Key of the initial active panel | string\\[] \\| string <br/> number\\[] \\| number | - |  |\n| destroyInactivePanel | Destroy Inactive Panel | boolean | false |  |\n| expandIcon | Allow to customize collapse icon | (panelProps) => ReactNode | - |  |\n| expandIconPosition | Set expand icon position | `start` \\| `end` | - | 4.21.0 |\n| ghost | Make the collapse borderless and its background transparent | boolean | false | 4.4.0 |\n| size | Set the size of collapse | `large` \\| `middle` \\| `small` | `middle` | 5.2.0 |\n| onChange | Callback function executed when active panel is changed | function | - |  |\n| items | collapse items content | [ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6) | - | 5.6.0 |\n\n### Collapse.Panel\n\n<!-- prettier-ignore -->\n:::info{title=Deprecated}\nWhen using version >= 5.6.0, we prefer to configuring the panel by `items`.\n:::\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| collapsible | Specify whether the panel be collapsible or the trigger area of collapsible | `header` \\| `icon` \\| `disabled` | - | 4.9.0 (icon: 4.24.0) |\n| extra | The extra element in the corner | ReactNode | - |  |\n| forceRender | Forced render of content on panel, instead of lazy rendering after clicking on header | boolean | false |  |\n| header | Title of the panel | ReactNode | - |  |\n| key | Unique key identifying the panel from among its siblings | string \\| number | - |  |\n| showArrow | If false, panel will not show arrow icon. If false, collapsible can't be set as icon | boolean | true |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Collapse\"></ComponentTokenTable>\n"},"color-picker":{"zh-CN":"---\ncategory: Components\nsubtitle: 颜色选择器\ntitle: ColorPicker\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*PpY4RYNM8UcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*EHL-QYJofZsAAAAAAAAAAAAADrJ8AQ/original\ntag: New\ndemo:\n  cols: 2\ngroup:\n  title: 数据录入\n---\n\n提供颜色选取的组件，自 `5.5.0` 版本开始提供该组件。\n\n## 何时使用\n\n当用户需要自定义颜色选择的时候使用。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/base.tsx\">基本使用</code>\n<code src=\"./demo/size.tsx\">触发器尺寸大小</code>\n<code src=\"./demo/controlled.tsx\">受控模式</code>\n<code src=\"./demo/change-completed.tsx\">颜色完成选择</code>\n<code src=\"./demo/text-render.tsx\">渲染触发器文本</code>\n<code src=\"./demo/disabled.tsx\">禁用</code>\n<code src=\"./demo/disabled-alpha.tsx\">禁用透明度</code>\n<code src=\"./demo/allowClear.tsx\">清除颜色</code>\n<code src=\"./demo/trigger.tsx\">自定义触发器</code>\n<code src=\"./demo/trigger-event.tsx\">自定义触发事件</code>\n<code src=\"./demo/format.tsx\">颜色编码</code>\n<code src=\"./demo/presets.tsx\">预设颜色</code>\n<code src=\"./demo/panel-render.tsx\">自定义面板</code>\n<code src=\"./demo/pure-panel.tsx\" debug>Pure Render</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n> 自 `antd@5.5.0` 版本开始提供该组件。\n\n<!-- prettier-ignore -->\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| :-- | :-- | :-- | :-- | :-- |\n| allowClear | 允许清除选择的颜色 | boolean | false | |\n| arrow | 配置弹出的箭头 | `boolean \\| { pointAtCenter: boolean }` | true | |\n| children | 颜色选择器的触发器 | React.ReactNode | - | |\n| defaultValue | 颜色默认的值 | string \\| `Color` | - | |\n| defaultFormat | 颜色格式默认的值 | `rgb` \\| `hex` \\| `hsb` | - | 5.9.0 |\n| disabled | 禁用颜色选择器 | boolean | - | |\n| disabledAlpha | 禁用透明度 | boolean | - | 5.8.0 |\n| destroyTooltipOnHide | 关闭后是否销毁弹窗 | `boolean` | false | 5.7.0 |\n| format | 颜色格式 | `rgb` \\| `hex` \\| `hsb` | `hex` | |\n| open | 是否显示弹出窗口 | boolean | - | |\n| presets | 预设的颜色 | `{ label: ReactNode, colors: Array<string \\| Color>, defaultOpen?: boolean }[]` | - | `defaultOpen: 5.11.0` |\n| placement | 弹出窗口的位置 | `top` \\| `topLeft` \\| `topRight` \\| `bottom` \\| `bottomLeft` \\| `bottomRight` | `bottomLeft` | |\n| panelRender | 自定义渲染面板 | `(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode` | - | 5.7.0 |\n| showText | 显示颜色文本 | boolean \\| `(color: Color) => React.ReactNode` | - | 5.7.0 |\n| size | 设置触发器大小 | `large` \\| `middle` \\| `small` | `middle` | 5.7.0 |\n| trigger | 颜色选择器的触发模式 | `hover` \\| `click` | `click` | |\n| value | 颜色的值 | string \\| `Color` | - | |\n| onChange | 颜色变化的回调 | `(value: Color, hex: string) => void` | - | |\n| onChangeComplete | 颜色选择完成的回调  | `(value: Color) => void` | - | 5.7.0 |\n| onFormatChange | 颜色格式变化的回调 | `(format: 'hex' \\| 'rgb' \\| 'hsb') => void` | - | |\n| onOpenChange | 当 `open` 被改变时的回调 | `(open: boolean) => void` | - | |\n| onClear | 清除的回调 | `() => void` | - | 5.6.0 |\n\n### Color\n\n<!-- prettier-ignore -->\n| 参数 | 说明 | 类型 | 默认值 |\n| :-- | :-- | :-- | :-- |\n| toHex | 转换成 `hex` 格式字符，返回格式如：`1677ff` | `() => string` | - |\n| toHexString | 转换成 `hex` 格式颜色字符串，返回格式如：`#1677ff` | `() => string` | - |\n| toHsb | 转换成 `hsb` 对象  | `() => ({ h: number, s: number, b: number, a number })` | - |\n| toHsbString | 转换成 `hsb` 格式颜色字符串，返回格式如：`hsb(215, 91%, 100%)` | `() => string` | - |\n| toRgb | 转换成 `rgb` 对象  | `() => ({ r: number, g: number, b: number, a number })` | - |\n| toRgbString | 转换成 `rgb` 格式颜色字符串，返回格式如：`rgb(22, 119, 255)` | `() => string` | - |\n\n## FAQ\n\n### 关于颜色赋值的问题\n\n颜色选择器的值同时支持字符串色值和选择器生成的 `Color` 对象，但由于不同格式的颜色字符串互相转换会有精度误差问题，所以受控场景推荐使用选择器生成的 `Color` 对象来进行赋值操作，这样可以避免精度问题，保证取值是精准的，选择器也可以按照预期工作。\n","en-US":"---\ncategory: Components\ntitle: ColorPicker\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*PpY4RYNM8UcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*EHL-QYJofZsAAAAAAAAAAAAADrJ8AQ/original\ntag: New\ndemo:\n  cols: 2\ngroup:\n  title: Data Entry\n---\n\nComponents providing color selection, Available since `5.5.0`.\n\n## When To Use\n\nUsed when the user needs to customize the color selection.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/base.tsx\">Basic Usage</code>\n<code src=\"./demo/size.tsx\">Trigger size</code>\n<code src=\"./demo/controlled.tsx\">controlled mode</code>\n<code src=\"./demo/change-completed.tsx\">Color change completed</code>\n<code src=\"./demo/text-render.tsx\">Rendering Trigger Text</code>\n<code src=\"./demo/disabled.tsx\">Disable</code>\n<code src=\"./demo/disabled-alpha.tsx\">Disabled Alpha</code>\n<code src=\"./demo/allowClear.tsx\">Clear Color</code>\n<code src=\"./demo/trigger.tsx\">Custom Trigger</code>\n<code src=\"./demo/trigger-event.tsx\">Custom Trigger Event</code>\n<code src=\"./demo/format.tsx\">Color Format</code>\n<code src=\"./demo/presets.tsx\">Preset Colors</code>\n<code src=\"./demo/panel-render.tsx\">Custom Render Panel</code>\n<code src=\"./demo/pure-panel.tsx\" debug>Pure Render</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `antd@5.5.0`.\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default | Version |\n| :-- | :-- | :-- | :-- | :-- |\n| allowClear | \tAllow clearing color selected | boolean | false | |\n| arrow | Configuration for popup arrow | `boolean \\| { pointAtCenter: boolean }` | true | |\n| children | Trigger of ColorPicker | React.ReactNode | - | |\n| defaultValue | Default value of color | string \\| `Color` | - | |\n| defaultFormat | Default format of color | `rgb` \\| `hex` \\| `hsb` | - | 5.9.0 |\n| disabled | Disable ColorPicker | boolean | - | |\n| disabledAlpha | Disable Alpha | boolean | - | 5.8.0 |\n| destroyTooltipOnHide | Whether destroy popover when hidden | `boolean` | false | 5.7.0 |\n| format | Format of color | `rgb` \\| `hex` \\| `hsb` | `hex` | |\n| open | Whether to show popup | boolean | - | |\n| presets | Preset colors | `{ label: ReactNode, colors: Array<string \\| Color>, defaultOpen?: boolean }[]` | - | `defaultOpen: 5.11.0` |\n| placement | Placement of popup | `top` \\| `topLeft` \\| `topRight` \\| `bottom` \\| `bottomLeft` \\| `bottomRight` | `bottomLeft` | |\n| panelRender | Custom Render Panel | `(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode` | - | 5.7.0 |\n| showText | Show color text | boolean \\| `(color: Color) => React.ReactNode` | - | 5.7.0 |\n| size | Setting the trigger size | `large` \\| `middle` \\| `small` | `middle` | 5.7.0 |\n| trigger | ColorPicker trigger mode | `hover` \\| `click` | `click` | |\n| value | Value of color | string \\| `Color` | - | |\n| onChange | Callback when `value` is changed | `(value: Color, hex: string) => void` | - | |\n| onChangeComplete | Called when color pick ends   | `(value: Color) => void` | - | 5.7.0 |\n| onFormatChange | Callback when `format` is changed | `(format: 'hex' \\| 'rgb' \\| 'hsb') => void` | - | |\n| onOpenChange | Callback when `open` is changed | `(open: boolean) => void` | - | |\n| onClear | Called when clear | `() => void` | - | 5.6.0 |\n\n### Color\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default |\n| :-- | :-- | :-- | :-- |\n| toHex | Convert to `hex` format characters, the return type like: `1677ff` | `() => string` | - |\n| toHexString | Convert to `hex` format color string, the return type like: `#1677ff` | `() => string` | - |\n| toHsb | Convert to `hsb` object  | `() => ({ h: number, s: number, b: number, a number })` | - |\n| toHsbString | Convert to `hsb` format color string, the return type like: `hsb(215, 91%, 100%)` | `() => string` | - |\n| toRgb | Convert to `rgb` object  | `() => ({ r: number, g: number, b: number, a number })` | - |\n| toRgbString | Convert to `rgb` format color string, the return type like: `rgb(22, 119, 255)` | `() => string` | - |\n\n## FAQ\n\n### Questions about color assignment\n\nThe value of the color selector supports both string color values and selector-generated `Color` objects. However, since there is a precision error when converting color strings of different formats to each other, it is recommended to use selector-generated `Color` objects for assignment operations in controlled scenarios, so that the precision problem can be avoided and the values are guaranteed to be accurate and the selector can work as expected.\n"},"config-provider":{"zh-CN":"---\ncategory: Components\nsubtitle: 全局化配置\ngroup: 其他\ntitle: ConfigProvider\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*NVKORa7BCVwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YC4ERpGAddoAAAAAAAAAAAAADrJ8AQ/original\n---\n\n为组件提供统一的全局化配置。\n\n## 使用\n\nConfigProvider 使用 React 的 [context](https://facebook.github.io/react/docs/context.html) 特性，只需在应用外围包裹一次即可全局生效。\n\n```tsx\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\n\n// ...\nconst Demo: React.FC = () => (\n  <ConfigProvider direction=\"rtl\">\n    <App />\n  </ConfigProvider>\n);\n\nexport default Demo;\n```\n\n### Content Security Policy\n\n部分组件为了支持波纹效果，使用了动态样式。如果开启了 Content Security Policy (CSP)，你可以通过 `csp` 属性来进行配置：\n\n```tsx\n<ConfigProvider csp={{ nonce: 'YourNonceCode' }}>\n  <Button>My Button</Button>\n</ConfigProvider>\n```\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/locale.tsx\">国际化</code>\n<code src=\"./demo/direction.tsx\">方向</code>\n<code src=\"./demo/size.tsx\">组件尺寸</code>\n<code src=\"./demo/theme.tsx\">主题</code>\n<code src=\"./demo/wave.tsx\">自定义波纹</code>\n<code src=\"./demo/holderRender.tsx\">静态方法</code>\n<code src=\"./demo/prefixCls.tsx\" debug>前缀</code>\n<code src=\"./demo/useConfig.tsx\" debug>获取配置</code>\n<code src=\"./demo/warning.tsx\" debug>警告</code>\n\n## API\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoInsertSpaceInButton | 设置为 `false` 时，移除按钮中 2 个汉字之间的空格 | boolean | true |  |\n| componentDisabled | 设置 antd 组件禁用状态 | boolean | - | 4.21.0 |\n| componentSize | 设置 antd 组件大小 | `small` \\| `middle` \\| `large` | - |  |\n| csp | 设置 [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) 配置 | { nonce: string } | - |  |\n| direction | 设置文本展示方向。 [示例](#components-config-provider-demo-direction) | `ltr` \\| `rtl` | `ltr` |  |\n| getPopupContainer | 弹出框（Select, Tooltip, Menu 等等）渲染父节点，默认渲染到 body 上。 | function(triggerNode) | () => document.body |  |\n| getTargetContainer | 配置 Affix、Anchor 滚动监听容器。 | () => HTMLElement | () => window | 4.2.0 |\n| iconPrefixCls | 设置图标统一样式前缀 | string | `anticon` | 4.11.0 |\n| locale | 语言包配置，语言包可到 [antd/locale](http://unpkg.com/antd/locale/) 目录下寻找 | object | - |  |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。`false` 时会关闭虚拟滚动 | boolean \\| number | - | 5.5.0 |\n| popupOverflow | Select 类组件弹层展示逻辑，默认为可视区域滚动，可配置成滚动区域滚动 | 'viewport' \\| 'scroll' <InlinePopover previewURL=\"https://user-images.githubusercontent.com/5378891/230344474-5b9f7e09-0a5d-49e8-bae8-7d2abed6c837.png\"></InlinePopover> | 'viewport' | 5.5.0 |\n| prefixCls | 设置统一样式前缀 | string | `ant` |  |\n| renderEmpty | 自定义组件空状态。参考 [空状态](/components/empty-cn) | function(componentName: string): ReactNode | - |  |\n| theme | 设置主题，参考 [定制主题](/docs/react/customize-theme-cn) | [Theme](/docs/react/customize-theme-cn#theme) | - | 5.0.0 |\n| virtual | 设置 `false` 时关闭虚拟滚动 | boolean | - | 4.3.0 |\n| warning | 设置警告等级，`strict` 为 `false` 时会将废弃相关信息聚合为单条信息 | { strict: boolean } | - | 5.10.0 |\n\n### ConfigProvider.config()\n\n设置 `Modal`、`Message`、`Notification` 静态方法配置，只会对非 hooks 的静态方法调用生效。\n\n```ts\nConfigProvider.config({\n  // 5.13.0+\n  holderRender: (children) => <ConfigProvider prefixCls=\"ant\" iconPrefixCls='anticon' theme={{token: { colorPrimary: 'red' }}}>{children}</ConfigProvider>\n});\n```\n\n### ConfigProvider.useConfig() `5.3.0+`\n\n`5.2.0` 版本后可用。获取父级 `Provider` 的值。如 `DisabledContextProvider`、`SizeContextProvider`。\n\n```jsx\nconst {\n  componentDisabled, // 5.3.0+\n  componentSize, // 5.3.0+\n} = ConfigProvider.useConfig();\n```\n\n<!-- prettier-ignore -->\n| 返回值 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| componentDisabled | antd 组件禁用状态 | boolean | - | 5.3.0 |\n| componentSize | antd 组件大小状态 | `small` \\| `middle` \\| `large` | - | 5.3.0 |\n\n### 组件配置\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alert | 设置 Alert 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| anchor | 设置 Anchor 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| avatar | 设置 Avatar 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| badge | 设置 Badge 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: { count?: string, indicator?: string }, styles?: { count?: React.CSSProperties, indicator?: React.CSSProperties } } | - | 5.7.0 |\n| breadcrumb | 设置 Breadcrumb 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| button | 设置 Button 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: { icon: string }, styles?: { icon: React.CSSProperties } } | - | 5.6.0 |\n| calendar | 设置 Calendar 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| card | 设置 Card 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| carousel | 设置 Carousel 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| cascader | 设置 Cascader 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| checkbox | 设置 Checkbox 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| collapse | 设置 Collapse 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| colorPicker | 设置 ColorPicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| datePicker | 设置 DatePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rangePicker | 设置 RangePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| descriptions | 设置 Descriptions 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| divider | 设置 Divider 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| drawer | 设置 Drawer 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [DrawerProps\\[\"classNames\"\\]](/components/drawer-cn#api), styles?: [DrawerProps\\[\"styles\"\\]](/components/drawer-cn#api) } | - | 5.7.0, `classNames` 和 `styles`: 5.10.0 |\n| dropdown | 设置 Dropdown 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| empty | 设置 Empty 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| flex | 设置 Flex 组件的通用属性 | { className?: string, style?: React.CSSProperties, vertical?: boolean } | - | 5.10.0 |\n| form | 设置 Form 组件的通用属性 | { className?: string, style?: React.CSSProperties, validateMessages?: [ValidateMessages](/components/form-cn#validatemessages), requiredMark?: boolean \\| `optional`, colon?: boolean, scrollToFirstError?: boolean \\| [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)} | - | requiredMark: 4.8.0; colon: 4.18.0; scrollToFirstError: 5.2.0; className: 5.7.0; style: 5.7.0 |\n| image | 设置 Image 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| input | 设置 Input 组件的通用属性 | { autoComplete?: string, className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| layout | 设置 Layout 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| list | 设置 List 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| menu | 设置 Menu 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| mentions | 设置 Mentions 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| message | 设置 Message 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| modal | 设置 Modal 组件的通用属性 | { className?: string, style?: React.CSSProperties, classNames?: [ModalProps\\[\"classNames\"\\]](/components/modal-cn#api), styles?: [ModalProps\\[\"styles\"\\]](/components/modal-cn#api) } | - | 5.7.0, `classNames` 和 `styles`: 5.10.0 |\n| notification | 设置 Notification 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| pagination | 设置 Pagination 组件的通用属性 | { showSizeChanger?: boolean, className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| progress | 设置 Progress 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| radio | 设置 Radio 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rate | 设置 Rate 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| result | 设置 Result 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| skeleton | 设置 Skeleton 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| segmented | 设置 Segmented 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| select | 设置 Select 组件的通用属性 | { className?: string, showSearch?: boolean, style?: React.CSSProperties } | - | 5.7.0 |\n| slider | 设置 Slider 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| switch | 设置 Switch 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| space | 设置 Space 的通用属性，参考 [Space](/components/space-cn) | { size: `small` \\| `middle` \\| `large` \\| `number`, className?: string, style?: React.CSSProperties, classNames?: { item: string }, styles?: { item: React.CSSProperties } } | - | 5.6.0 |\n| spin | 设置 Spin 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| statistic | 设置 Statistic 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| steps | 设置 Steps 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| table | 设置 Table 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| tabs | 设置 Tabs 组件的通用属性 | { className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` \\| `center` \\| `end` }} | - | 5.7.0 |\n| tag | 设置 Tag 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| timeline | 设置 Timeline 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| timePicker | 设置 TimePicker 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| transfer | 设置 Transfer 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| tree | 设置 Tree 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| typography | 设置 Typography 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| upload | 设置 Upload 组件的通用属性 | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| wave | 设置水波纹特效 | { disabled?: boolean, showEffect?: (node: HTMLElement, info: { className, token, component }) => void } | - | 5.8.0 |\n\n## FAQ\n\n#### 如何增加一个新的语言包？\n\n参考[《增加语言包》](/docs/react/i18n#%E5%A2%9E%E5%8A%A0%E8%AF%AD%E8%A8%80%E5%8C%85)。\n\n#### 为什么时间类组件的国际化 locale 设置不生效？\n\n参考 FAQ [为什么时间类组件的国际化 locale 设置不生效？](/docs/react/faq#为什么时间类组件的国际化-locale-设置不生效)。\n\n#### 配置 `getPopupContainer` 导致 Modal 报错？\n\n相关 issue：<https://github.com/ant-design/ant-design/issues/19974>\n\n当如下全局设置 `getPopupContainer` 为触发节点的 parentNode 时，由于 Modal 的用法不存在 `triggerNode`，这样会导致 `triggerNode is undefined` 的报错，需要增加一个[判断条件](https://github.com/afc163/feedback-antd/commit/3e4d1ad1bc1a38460dc3bf3c56517f737fe7d44a)。\n\n```diff\n <ConfigProvider\n-  getPopupContainer={triggerNode => triggerNode.parentNode}\n+  getPopupContainer={node => {\n+    if (node) {\n+      return node.parentNode;\n+    }\n+    return document.body;\n+  }}\n >\n   <App />\n </ConfigProvider>\n```\n\n#### 为什么 message.info、notification.open 或 Modal.confirm 等方法内的 ReactNode 无法继承 ConfigProvider 的属性？比如 `prefixCls` 和 `theme`。\n\n静态方法是使用 ReactDOM.render 重新渲染一个 React 根节点上，和主应用的 React 节点是脱离的。我们建议使用 useMessage、useNotification 和 useModal 来使用相关方法。原先的静态方法在 5.0 中已被废弃。\n\n#### Vite 生产模式打包后国际化 locale 设置不生效？\n\n相关 issue：[#39045](https://github.com/ant-design/ant-design/issues/39045)\n\n由于 Vite 生产模式下打包与开发模式不同，cjs 格式的文件会多一层，需要 `zhCN.default` 来获取。推荐 Vite 用户直接从 `antd/es/locale` 目录下引入 esm 格式的 locale 文件。\n\n#### prefixCls 优先级(前者被后者覆盖)\n\n1. `ConfigProvider.config({ prefixCls: 'prefix-1' })`\n2. `ConfigProvider.config({ holderRender: (children) => <ConfigProvider prefixCls=\"prefix-2\">{children}</ConfigProvider> })`\n3. `message.config({ prefixCls: 'prefix-3' })`\n","en-US":"---\ncategory: Components\ngroup: Other\ntitle: ConfigProvider\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*NVKORa7BCVwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YC4ERpGAddoAAAAAAAAAAAAADrJ8AQ/original\n---\n\n`ConfigProvider` provides a uniform configuration support for components.\n\n## Usage\n\nThis component provides a configuration to all React components underneath itself via the [context API](https://facebook.github.io/react/docs/context.html). In the render tree all components will have access to the provided config.\n\n```tsx\nimport React from 'react';\nimport { ConfigProvider } from 'antd';\n\n// ...\nconst Demo: React.FC = () => (\n  <ConfigProvider direction=\"rtl\">\n    <App />\n  </ConfigProvider>\n);\n\nexport default Demo;\n```\n\n### Content Security Policy\n\nSome components use dynamic style to support wave effect. You can config `csp` prop if Content Security Policy (CSP) is enabled:\n\n```tsx\n<ConfigProvider csp={{ nonce: 'YourNonceCode' }}>\n  <Button>My Button</Button>\n</ConfigProvider>\n```\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/locale.tsx\">Locale</code>\n<code src=\"./demo/direction.tsx\">Direction</code>\n<code src=\"./demo/size.tsx\">Component size</code>\n<code src=\"./demo/theme.tsx\">Theme</code>\n<code src=\"./demo/wave.tsx\">Custom Wave</code>\n<code src=\"./demo/holderRender.tsx\">Static function</code>\n<code src=\"./demo/prefixCls.tsx\" debug>prefixCls</code>\n<code src=\"./demo/useConfig.tsx\" debug>useConfig</code>\n<code src=\"./demo/warning.tsx\" debug>warning</code>\n\n## API\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoInsertSpaceInButton | Set false to remove space between 2 chinese characters on Button | boolean | true |  |\n| componentDisabled | Config antd component `disabled` | boolean | - | 4.21.0 |\n| componentSize | Config antd component size | `small` \\| `middle` \\| `large` | - |  |\n| csp | Set [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) config | { nonce: string } | - |  |\n| direction | Set direction of layout. See [demo](#components-config-provider-demo-direction) | `ltr` \\| `rtl` | `ltr` |  |\n| getPopupContainer | To set the container of the popup element. The default is to create a `div` element in `body` | function(triggerNode) | () => document.body |  |\n| getTargetContainer | Config Affix, Anchor scroll target container | () => HTMLElement | () => window | 4.2.0 |\n| iconPrefixCls | Set icon prefix className | string | `anticon` | 4.11.0 |\n| locale | Language package setting, you can find the packages in [antd/locale](http://unpkg.com/antd/locale/) | object | - |  |\n| popupMatchSelectWidth | Determine whether the dropdown menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll | boolean \\| number | - | 5.5.0 |\n| popupOverflow | Select like component popup logic. Can set to show in viewport or follow window scroll | 'viewport' \\| 'scroll' <InlinePopover previewURL=\"https://user-images.githubusercontent.com/5378891/230344474-5b9f7e09-0a5d-49e8-bae8-7d2abed6c837.png\"></InlinePopover> | 'viewport' | 5.5.0 |\n| prefixCls | Set prefix className | string | `ant` |  |\n| renderEmpty | Set empty content of components. Ref [Empty](/components/empty/) | function(componentName: string): ReactNode | - |  |\n| theme | Set theme, ref [Customize Theme](/docs/react/customize-theme) | [Theme](/docs/react/customize-theme#theme) | - | 5.0.0 |\n| virtual | Disable virtual scroll when set to `false` | boolean | - | 4.3.0 |\n| warning | Config warning level, when `strict` is `false`, it will aggregate deprecated information into a single message | { strict: boolean } | - | 5.10.0 |\n\n### ConfigProvider.config()\n\nSetting `Modal`、`Message`、`Notification` static config. Not work on hooks.\n\n```ts\nConfigProvider.config({\n// 5.13.0+\n  holderRender: (children) => <ConfigProvider prefixCls=\"ant\" iconPrefixCls='anticon' theme={{token: { colorPrimary: 'red' }}}>{children}</ConfigProvider>\n});\n```\n\n### ConfigProvider.useConfig() `5.3.0+`\n\nAvailable since `5.2.0`. Get the value of the parent `Provider`. Such as `DisabledContextProvider`, `SizeContextProvider`.\n\n```jsx\nconst {\n  componentDisabled, // 5.3.0+\n  componentSize, // 5.3.0+\n} = ConfigProvider.useConfig();\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| componentDisabled | antd component disabled state | boolean | - | 5.3.0 |\n| componentSize | antd component size state | `small` \\| `middle` \\| `large` | - | 5.3.0 |\n\n### Component Config\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| alert | Set Alert common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| anchor | Set Anchor common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| avatar | Set Avatar common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| badge | Set Badge common props | { className?: string, style?: React.CSSProperties, classNames?: { count?: string, indicator?: string }, styles?: { count?: React.CSSProperties, indicator?: React.CSSProperties } } | - | 5.7.0 |\n| breadcrumb | Set Breadcrumb common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| button | Set Button common props | { className?: string, style?: React.CSSProperties, classNames?: { icon: string }, styles?: { icon: React.CSSProperties } } | - | 5.6.0 |\n| card | Set Card common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| calendar | Set Calendar common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| carousel | Set Carousel common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| cascader | Set Cascader common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| checkbox | Set Checkbox common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| collapse | Set Collapse common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| colorPicker | Set ColorPicker common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| datePicker | Set datePicker common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rangePicker | Set rangePicker common props | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| descriptions | Set Descriptions common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| divider | Set Divider common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| drawer | Set Drawer common props | { className?: string, style?: React.CSSProperties, classNames?: [DrawerProps\\[\"classNames\"\\]](/components/drawer-cn#api), styles?: [DrawerProps\\[\"styles\"\\]](/components/drawer-cn#api) } | - | 5.7.0, `classNames` and `styles`: 5.10.0 |\n| dropdown | Set Dropdown common props | { className?: string, style?: React.CSSProperties } | - | 5.11.0 |\n| empty | Set Empty common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| flex | Set Flex common props | { className?: string, style?: React.CSSProperties, vertical?: boolean } | - | 5.10.0 |\n| form | Set Form common props | { className?: string, style?: React.CSSProperties, validateMessages?: [ValidateMessages](/components/form/#validatemessages), requiredMark?: boolean \\| `optional`, scrollToFirstError?: boolean \\| [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options) } | - | requiredMark: 4.8.0; colon: 4.18.0; scrollToFirstError: 5.2.0; className: 5.7.0; style: 5.7.0 |\n| image | Set Image common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| input | Set Input common props | { autoComplete?: string, className?: string, style?: React.CSSProperties } | - | 4.2.0 |\n| layout | Set Layout common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| list | Set List common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| menu | Set Menu common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| mentions | Set Mentions common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| message | Set Message common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| modal | Set Modal common props | { className?: string, style?: React.CSSProperties, classNames?: [ModalProps\\[\"classNames\"\\]](/components/modal-cn#api), styles?: [ModalProps\\[\"styles\"\\]](/components/modal-cn#api) } | - | 5.7.0, `classNames` and `styles`: 5.10.0 |\n| notification | Set Notification common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| pagination | Set Pagination common props | { showSizeChanger?: boolean, className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| progress | Set Progress common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| radio | Set Radio common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| rate | Set Rate common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| result | Set Result common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| skeleton | Set Skeleton common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| segmented | Set Segmented common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| select | Set Select common props | { className?: string, showSearch?: boolean, style?: React.CSSProperties } | - | 5.7.0 |\n| slider | Set Slider common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| switch | Set Switch common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| space | Set Space common props, ref [Space](/components/space) | { size: `small` \\| `middle` \\| `large` \\| `number`, className?: string, style?: React.CSSProperties, classNames?: { item: string }, styles?: { item: React.CSSProperties } } | - | 5.6.0 |\n| spin | Set Spin common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| statistic | Set Statistic common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| steps | Set Steps common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| table | Set Table common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| tabs | Set Tabs common props | { className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` \\| `center` \\| `end` }} | - | 5.7.0 |\n| tag | Set Tag common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| timeline | Set Timeline common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| timePicker | Set TimePicker common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| transfer | Set Transfer common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| tree | Set Tree common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| typography | Set Typography common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| upload | Set Upload common props | { className?: string, style?: React.CSSProperties } | - | 5.7.0 |\n| wave | Config wave effect | { disabled?: boolean, showEffect?: (node: HTMLElement, info: { className, token, component }) => void } | - | 5.8.0 |\n\n## FAQ\n\n#### How to contribute a new language?\n\nSee [&lt;Adding new language&gt;](/docs/react/i18n#adding-newplanguage).\n\n#### Date-related components locale is not working?\n\nSee FAQ [Date-related-components-locale-is-not-working?](/docs/react/faq#date-related-components-locale-is-not-working)\n\n#### Modal throw error when setting `getPopupContainer`?\n\nRelated issue: <https://github.com/ant-design/ant-design/issues/19974>\n\nWhen you config `getPopupContainer` to parentNode globally, Modal will throw error of `triggerNode is undefined` because it did not have a triggerNode. You can try the [fix](https://github.com/afc163/feedback-antd/commit/3e4d1ad1bc1a38460dc3bf3c56517f737fe7d44a) below.\n\n```diff\n <ConfigProvider\n-  getPopupContainer={triggerNode => triggerNode.parentNode}\n+  getPopupContainer={node => {\n+    if (node) {\n+      return node.parentNode;\n+    }\n+    return document.body;\n+  }}\n >\n   <App />\n </ConfigProvider>\n```\n\n#### Why can't ConfigProvider props (like `prefixCls` and `theme`) affect ReactNode inside `message.info`, `notification.open`, `Modal.confirm`?\n\nantd will dynamic create React instance by `ReactDOM.render` when call message methods. Whose context is different with origin code located context. We recommend `useMessage`, `useNotification` and `useModal` which , the methods came from `message/notification/Modal` has been deprecated in 5.x.\n\n#### Locale is not working with Vite in production mode?\n\nRelated issue: [#39045](https://github.com/ant-design/ant-design/issues/39045)\n\nIn production mode of Vite, default exports from cjs file should be used like this: `enUS.default`. So you can directly import locale from `es/` directory like `import enUS from 'antd/es/locale/en_US'` to make dev and production have the same behavior.\n\n#### `prefixCls` priority(The former is covered by the latter)\n\n1. `ConfigProvider.config({ prefixCls: 'prefix-1' })`\n2. `ConfigProvider.config({ holderRender: (children) => <ConfigProvider prefixCls=\"prefix-2\">{children}</ConfigProvider> })`\n3. `message.config({ prefixCls: 'prefix-3' })`\n"},"date-picker":{"zh-CN":"---\ncategory: Components\ngroup: 数据录入\ntitle: DatePicker\nsubtitle: 日期选择框\ndescription: 输入或选择日期的控件。\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*xXA9TJ8BTioAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*3OpRQKcygo8AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n## 何时使用\n\n当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/range-picker.tsx\">范围选择器</code>\n<code src=\"./demo/switchable.tsx\">切换不同的选择器</code>\n<code src=\"./demo/format.tsx\">日期格式</code>\n<code src=\"./demo/time.tsx\">日期时间选择</code>\n<code src=\"./demo/disabled.tsx\">禁用</code>\n<code src=\"./demo/disabled-date.tsx\">不可选择日期和时间</code>\n<code src=\"./demo/select-in-range.tsx\">选择不超过七天的范围</code>\n<code src=\"./demo/preset-ranges.tsx\">预设范围</code>\n<code src=\"./demo/extra-footer.tsx\">额外的页脚</code>\n<code src=\"./demo/size.tsx\">三种大小</code>\n<code src=\"./demo/cell-render.tsx\">定制单元格</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">多种形态</code>\n<code src=\"./demo/filled-debug.tsx\" debug>Filled Debug</code>\n<code src=\"./demo/placement.tsx\">弹出位置</code>\n<code src=\"./demo/mode.tsx\" debug>受控面板</code>\n<code src=\"./demo/start-end.tsx\" debug>自定义日期范围选择</code>\n<code src=\"./demo/suffix.tsx\" debug>后缀图标</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n日期类组件包括以下五种形式。\n\n- DatePicker\n- DatePicker\\[picker=\"month\"]\n- DatePicker\\[picker=\"week\"]\n- DatePicker\\[picker=\"year\"]\n- DatePicker\\[picker=\"quarter\"] (4.1.0 新增)\n- RangePicker\n\n### 国际化配置\n\n默认配置为 en-US，如果你需要设置其他语言，推荐在入口处使用我们提供的国际化组件，详见：[ConfigProvider 国际化](https://ant.design/components/config-provider-cn/)。\n\n如有特殊需求（仅修改单一组件的语言），请使用 locale 参数，参考：[默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)。\n\n<!-- prettier-ignore -->\n:::warning\n在搭配 Nextjs 的 App Router 使用时，注意在引入 dayjs 的 locale 文件时加上 `'use client'`。这是由于 Ant Design 的组件都是客户端组件，在 RSC 中引入 dayjs 的 locale 文件将不会在客户端生效。\n:::\n\n```jsx\nimport locale from 'antd/es/date-picker/locale/zh_CN';\n\nimport 'dayjs/locale/zh-cn';\n\n<DatePicker locale={locale} />;\n```\n\n```jsx\n// 默认语言为 en-US，如果你需要设置其他语言，推荐在入口文件全局设置 locale\nimport locale from 'antd/locale/zh_CN';\nimport dayjs from 'dayjs';\n\nimport 'dayjs/locale/zh-cn';\n\n<ConfigProvider locale={locale}>\n  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />\n</ConfigProvider>;\n```\n\n### 共同的 API\n\n以下 API 为 DatePicker、 RangePicker 共享的 API。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: 支持对象类型 |\n| autoFocus | 自动获取焦点 | boolean | false |  |\n| className | 选择器 className | string | - |  |\n| dateRender | 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替 | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| changeOnBlur | 失去焦点时触发 `change` 事件，例如 datetime 下不再需要点击确认按钮 | boolean | false | 5.5.0 |\n| cellRender | 自定义单元格的内容 | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| disabled | 禁用 | boolean | false |  |\n| disabledDate | 不可选择的日期 | (currentDate: dayjs) => boolean | - |  |\n| format | 设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。示例：[自定义格式](#components-date-picker-demo-format) | [formatType](#formattype) | [rc-picker](https://github.com/react-component/picker/blob/f512f18ed59d6791280d1c3d7d37abbb9867eb0b/src/utils/uiUtil.ts#L155-L177) |  |\n| popupClassName | 额外的弹出日历 className | string | - | 4.23.0 |\n| getPopupContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | - |  |\n| inputReadOnly | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | boolean | false |  |\n| locale | 国际化配置 | object | [默认配置](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) |  |\n| mode | 日期面板的状态（[设置后无法选择年份/月份？](/docs/react/faq#当我指定了-datepickerrangepicker-的-mode-属性后点击后无法选择年份月份)） | `time` \\| `date` \\| `month` \\| `year` \\| `decade` | - |  |\n| nextIcon | 自定义下一个图标 | ReactNode | - | 4.17.0 |\n| open | 控制弹层是否展开 | boolean | - |  |\n| panelRender | 自定义渲染面板 | (panelNode) => ReactNode | - | 4.5.0 |\n| picker | 设置选择器类型 | `date` \\| `week` \\| `month` \\| `quarter` \\| `year` | `date` | `quarter`: 4.1.0 |\n| placeholder | 输入框提示文字 | string \\| \\[string, string] | - |  |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| popupStyle | 额外的弹出日历样式 | CSSProperties | {} |  |\n| prevIcon | 自定义上一个图标 | ReactNode | - | 4.17.0 |\n| presets | 预设时间范围快捷选择, 自 `5.8.0` 起 value 支持函数返回值 | { label: React.ReactNode, value: Dayjs \\| (() => Dayjs) }\\[] | - |  |\n| size | 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px | `large` \\| `middle` \\| `small` | - |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| style | 自定义输入框样式 | CSSProperties | {} |  |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - |  |\n| superNextIcon | 自定义 `>>` 切换图标 | ReactNode | - | 4.17.0 |\n| superPrevIcon | 自定义 `<<` 切换图标 | ReactNode | - | 4.17.0 |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onOpenChange | 弹出日历和关闭日历的回调 | function(open) | - |  |\n| onPanelChange | 日历面板切换的回调 | function(value, mode) | - |  |\n\n### 共同的方法\n\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n\n### DatePicker\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间 | [dayjs](https://day.js.org/) | - |  |\n| disabledTime | 不可选择的时间 | function(date) | - |  |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM-DD` |  |\n| renderExtraFooter | 在面板中添加额外的页脚 | (mode) => React.ReactNode | - |  |\n| showNow | 当设定了 `showTime` 的时候，面板是否显示“此刻”按钮 | boolean | - | 4.4.0 |\n| showTime | 增加时间选择功能 | Object \\| boolean | [TimePicker Options](/components/time-picker-cn#api) |  |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/) | dayjs() |  |\n| showToday | 是否展示“今天”按钮 | boolean | true |  |\n| value | 日期 | [dayjs](https://day.js.org/) | - |  |\n| onChange | 时间发生变化的回调 | function(date: dayjs, dateString: string) | - |  |\n| onOk | 点击确定按钮的回调 | function() | - |  |\n| onPanelChange | 日期面板变化时的回调 | function(value, mode) | - |  |\n\n### DatePicker\\[picker=year]\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - |  |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY` |  |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - |  |\n| value | 日期 | [dayjs](https://day.js.org/) | - |  |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=quarter]\n\n`4.1.0` 新增。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - |  |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-\\QQ` |  |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - |  |\n| value | 日期 | [dayjs](https://day.js.org/) | - |  |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=month]\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - |  |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM` |  |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - |  |\n| value | 日期 | [dayjs](https://day.js.org/) | - |  |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=week]\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/) | - |  |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-wo` |  |\n| renderExtraFooter | 在面板中添加额外的页脚 | (mode) => React.ReactNode | - |  |\n| value | 日期 | [dayjs](https://day.js.org/) | - |  |\n| onChange | 时间发生变化的回调，发生在用户选择时间时 | function(date: dayjs, dateString: string) | - |  |\n\n### RangePicker\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowEmpty | 允许起始项部分为空 | \\[boolean, boolean] | \\[false, false] |  |\n| dateRender | 自定义日期单元格的内容，5.4.0 起用 `cellRender` 代替 | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| cellRender | 自定义单元格的内容。 | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| defaultValue | 默认日期 | [dayjs](https://day.js.org/)\\[] | - |  |\n| disabled | 禁用起始项 | \\[boolean, boolean] | - |  |\n| disabledTime | 不可选择的时间 | function(date: dayjs, partial: `start` \\| `end`) | - |  |\n| format | 展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。 | [formatType](#formattype) | `YYYY-MM-DD HH:mm:ss` |  |\n| presets | 预设时间范围快捷选择，自 `5.8.0` 起 value 支持函数返回值 | { label: React.ReactNode, value: (Dayjs \\| (() => Dayjs))\\[] }\\[] | - |  |\n| renderExtraFooter | 在面板中添加额外的页脚 | () => React.ReactNode | - |  |\n| separator | 设置分隔符 | React.ReactNode | `<SwapRightOutlined />` |  |\n| showTime | 增加时间选择功能 | Object\\|boolean | [TimePicker Options](/components/time-picker-cn#api) |  |\n| showTime.defaultValue | 设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/)\\[] | \\[dayjs(), dayjs()] |  |\n| value | 日期 | [dayjs](https://day.js.org/)\\[] | - |  |\n| onCalendarChange | 待选日期发生变化的回调。`info` 参数自 4.4.0 添加 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`\\|`end` }) | - |  |\n| onChange | 日期范围发生变化的回调 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string]) | - |  |\n\n#### formatType\n\n```typescript\nimport type { Dayjs } from 'dayjs';\n\ntype Generic = string;\ntype GenericFn = (value: Dayjs) => string;\n\nexport type FormatType = Generic | GenericFn | Array<Generic | GenericFn>;\n```\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"DatePicker\"></ComponentTokenTable>\n\n## FAQ\n\n### 当我指定了 DatePicker/RangePicker 的 mode 属性后，点击后无法选择年份/月份？\n\n请参考[常见问答](/docs/react/faq#当我指定了-datepickerrangepicker-的-mode-属性后点击后无法选择年份月份)\n\n### 为何日期选择年份后返回的是日期面板而不是月份面板？\n\n当用户选择完年份后，系统会直接切换至日期面板，而非显式提供月份选择。这样做的设计在于用户只需进行一次点击即可完成年份修改，无需再次点击进入月份选择界面，从而减少了用户的操作负担，同时也避免需要额外感知月份的记忆负担。\n\n### 如何在 DatePicker 中使用自定义日期库（如 Moment.js ）？\n\n请参考[《使用自定义日期库》](/docs/react/use-custom-date-library#datepicker)\n\n### 为什么时间类组件的国际化 locale 设置不生效？\n\n参考 FAQ [为什么时间类组件的国际化 locale 设置不生效？](/docs/react/faq#为什么时间类组件的国际化-locale-设置不生效)。\n\n### 如何修改周的起始日？\n\n请使用正确的[语言包](/docs/react/i18n-cn)（[#5605](https://github.com/ant-design/ant-design/issues/5605)），或者修改 dayjs 的 `locale` 配置：<https://codesandbox.io/s/dayjs-day-of-week-x9tuj2?file=/demo.tsx>\n\n```js\nimport dayjs from 'dayjs';\n\nimport 'dayjs/locale/zh-cn';\n\nimport updateLocale from 'dayjs/plugin/updateLocale';\n\ndayjs.extend(updateLocale);\ndayjs.updateLocale('zh-cn', {\n  weekStart: 0,\n});\n```\n\n### 为何使用 `panelRender` 时，原来面板无法切换？\n\n当你通过 `panelRender` 动态改变层级结构时，会使得原本的 Panel 被当做新的节点删除并创建。这使得其原本的状态会被重置，保持结构稳定即可。详情请参考 [#27263](https://github.com/ant-design/ant-design/issues/27263)。\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: DatePicker\ndescription: To select or input a date.\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*xXA9TJ8BTioAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*3OpRQKcygo8AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n## When To Use\n\nBy clicking the input box, you can select a date from a popup calendar.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/range-picker.tsx\">Range Picker</code>\n<code src=\"./demo/switchable.tsx\">Switchable picker</code>\n<code src=\"./demo/format.tsx\">Date Format</code>\n<code src=\"./demo/time.tsx\">Choose Time</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/disabled-date.tsx\">Disabled Date & Time</code>\n<code src=\"./demo/select-in-range.tsx\">Select range dates in 7 days</code>\n<code src=\"./demo/preset-ranges.tsx\">Preset Ranges</code>\n<code src=\"./demo/extra-footer.tsx\">Extra Footer</code>\n<code src=\"./demo/size.tsx\">Three Sizes</code>\n<code src=\"./demo/cell-render.tsx\">Customized Cell Rendering</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n<code src=\"./demo/filled-debug.tsx\" debug>Filled Debug</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/mode.tsx\" debug>Controlled Panels</code>\n<code src=\"./demo/start-end.tsx\" debug>Customized Range Picker</code>\n<code src=\"./demo/suffix.tsx\" debug>Suffix</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\nThere are five kinds of picker:\n\n- DatePicker\n- DatePicker\\[picker=\"month\"]\n- DatePicker\\[picker=\"week\"]\n- DatePicker\\[picker=\"year\"]\n- DatePicker\\[picker=\"quarter\"] (Added in 4.1.0)\n- RangePicker\n\n### Localization\n\nThe default locale is en-US, if you need to use other languages, recommend to use internationalized components provided by us at the entrance. Look at: [ConfigProvider](https://ant.design/components/config-provider/).\n\nIf there are special needs (only modifying single component language), Please use the property: local. Example: [default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json).\n\n<!-- prettier-ignore -->\n:::warning\nWhen use with Nextjs App Router, make sure to add `'use client'` before import locale file of dayjs. It's because all components of Ant Design only works in client, importing locale in RSC will not work.\n:::\n\n```jsx\nimport locale from 'antd/es/date-picker/locale/zh_CN';\n\nimport 'dayjs/locale/zh-cn';\n\n<DatePicker locale={locale} />;\n```\n\n```jsx\n// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\nimport locale from 'antd/locale/zh_CN';\nimport dayjs from 'dayjs';\n\nimport 'dayjs/locale/zh-cn';\n\n<ConfigProvider locale={locale}>\n  <DatePicker defaultValue={dayjs('2015-01-01', 'YYYY-MM-DD')} />\n</ConfigProvider>;\n```\n\n### Common API\n\nThe following APIs are shared by DatePicker, RangePicker.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear button | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: Support object type |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| className | The picker className | string | - |  |\n| dateRender | Custom rendering function for date cells, >= 5.4.0 use `cellRender` instead. | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| changeOnBlur | Trigger `change` when blur. e.g. datetime picker no need click confirm button | boolean | false | 5.5.0 |\n| cellRender | Custom rendering function for picker cells | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| disabled | Determine whether the DatePicker is disabled | boolean | false |  |\n| disabledDate | Specify the date that cannot be selected | (currentDate: dayjs) => boolean | - |  |\n| format | To set the date format, support multi-format matching when it is an array, display the first one shall prevail. refer to [dayjs#format](https://day.js.org/docs/en/display/format). for example: [Custom Format](#components-date-picker-demo-format) | [formatType](#formattype) | [rc-picker](https://github.com/react-component/picker/blob/f512f18ed59d6791280d1c3d7d37abbb9867eb0b/src/utils/uiUtil.ts#L155-L177) |  |\n| popupClassName | To customize the className of the popup calendar | string | - | 4.23.0 |\n| getPopupContainer | To set the container of the floating layer, while the default is to create a `div` element in `body` | function(trigger) | - |  |\n| inputReadOnly | Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices) | boolean | false |  |\n| locale | Localization configuration | object | [default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json) |  |\n| mode | The picker panel mode（ [Cannot select year or month anymore?](/docs/react/faq#when-set-mode-to-datepickerrangepicker-cannot-select-year-or-month-anymore) ) | `time` \\| `date` \\| `month` \\| `year` \\| `decade` | - |  |\n| nextIcon | The custom next icon | ReactNode | - | 4.17.0 |\n| open | The open state of picker | boolean | - |  |\n| panelRender | Customize panel render | (panelNode) => ReactNode | - | 4.5.0 |\n| picker | Set picker type | `date` \\| `week` \\| `month` \\| `quarter` \\| `year` | `date` | `quarter`: 4.1.0 |\n| placeholder | The placeholder of date input | string \\| \\[string,string] | - |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| popupStyle | To customize the style of the popup calendar | CSSProperties | {} |  |\n| presets | The preset ranges for quick selection, Since `5.8.0`, preset value supports callback function. | { label: React.ReactNode, value: Dayjs \\| (() => Dayjs) }\\[] | - |  |\n| prevIcon | The custom prev icon | ReactNode | - | 4.17.0 |\n| size | To determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| style | To customize the style of the input box | CSSProperties | {} |  |\n| suffixIcon | The custom suffix icon | ReactNode | - |  |\n| superNextIcon | The custom super next icon | ReactNode | - | 4.17.0 |\n| superPrevIcon | The custom super prev icon | ReactNode | - | 4.17.0 |\n| variant | Variants of picker | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onOpenChange | Callback function, can be executed whether the popup calendar is popped up or closed | function(open) | - |  |\n| onPanelChange | Callback when picker panel mode is changed | function(value, mode) | - |  |\n\n### Common Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n### DatePicker\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date, if start time or end time is null or undefined, the date range will be an open interval | [dayjs](https://day.js.org/) | - |  |\n| disabledTime | To specify the time that cannot be selected | function(date) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-MM-DD` |  |\n| renderExtraFooter | Render extra footer in panel | (mode) => React.ReactNode | - |  |\n| showNow | Whether to show 'Now' button on panel when `showTime` is set | boolean | - | 4.4.0 |\n| showTime | To provide an additional time selection | object \\| boolean | [TimePicker Options](/components/time-picker/#api) |  |\n| showTime.defaultValue | To set default time of selected date, [demo](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/) | dayjs() |  |\n| showToday | Whether to show `Today` button | boolean | true |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n| onOk | Callback when click ok button | function() | - |  |\n| onPanelChange | Callback function for panel changing | function(value, mode) | - |  |\n\n### DatePicker\\[picker=year]\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY` |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=quarter]\n\nAdded in `4.1.0`.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-\\QQ` |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=month]\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-MM` |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### DatePicker\\[picker=week]\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| defaultValue | To set default date | [dayjs](https://day.js.org/) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-wo` |  |\n| renderExtraFooter | Render extra footer in panel | (mode) => React.ReactNode | - |  |\n| value | To set date | [dayjs](https://day.js.org/) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(date: dayjs, dateString: string) | - |  |\n\n### RangePicker\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowEmpty | Allow start or end input leave empty | \\[boolean, boolean] | \\[false, false] |  |\n| dateRender | Custom rendering function for date cells, >= 5.4.0 use `cellRender` instead. | function(currentDate: dayjs, today: dayjs) => React.ReactNode | - | < 5.4.0 |\n| cellRender | Custom rendering function for picker cells | (current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| defaultValue | To set default date | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - |  |\n| disabled | If disable start or end | \\[boolean, boolean] | - |  |\n| disabledTime | To specify the time that cannot be selected | function(date: dayjs, partial: `start` \\| `end`) | - |  |\n| format | To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format) | [formatType](#formattype) | `YYYY-MM-DD HH:mm:ss` |  |\n| presets | The preset ranges for quick selection, Since `5.8.0`, preset value supports callback function. | { label: React.ReactNode, value: (Dayjs \\| (() => Dayjs))\\[] }\\[] | - |  |\n| renderExtraFooter | Render extra footer in panel | () => React.ReactNode | - |  |\n| separator | Set separator between inputs | React.ReactNode | `<SwapRightOutlined />` |  |\n| showTime | To provide an additional time selection | object \\| boolean | [TimePicker Options](/components/time-picker/#api) |  |\n| showTime.defaultValue | To set default time of selected date, [demo](#components-date-picker-demo-disabled-date) | [dayjs](https://day.js.org/)\\[] | \\[dayjs(), dayjs()] |  |\n| value | To set date | \\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)] | - |  |\n| onCalendarChange | Callback function, can be executed when the start time or the end time of the range is changing. `info` argument is added in 4.4.0 | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`\\|`end` }) | - |  |\n| onChange | Callback function, can be executed when the selected time is changing | function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string]) | - |  |\n\n#### formatType\n\n```typescript\nimport type { Dayjs } from 'dayjs';\n\ntype Generic = string;\ntype GenericFn = (value: Dayjs) => string;\n\nexport type FormatType = Generic | GenericFn | Array<Generic | GenericFn>;\n```\n\n## Design Token\n\n<ComponentTokenTable component=\"DatePicker\"></ComponentTokenTable>\n\n## FAQ\n\n### When set mode to DatePicker/RangePicker, cannot select year or month anymore?\n\nPlease refer [FAQ](/docs/react/faq#when-set-mode-to-datepickerrangepicker-cannot-select-year-or-month-anymore)\n\n### Why does the date picker switch to the date panel after selecting the year instead of the month panel?\n\nAfter selecting the year, the system directly switches to the date panel instead of month panel. This design is intended to reduce the user's operational burden by allowing them to complete the year modification with just one click, without having to enter the month selection interface again. At the same time, it also avoids additional cognitive burden of remembering the month.\n\n### How to use DatePicker with customize date library like dayjs?\n\nPlease refer [Use custom date library](/docs/react/use-custom-date-library#datepicker)\n\n### Why config dayjs.locale globally not work?\n\nDatePicker default set `locale` as `en` in v4. You can config DatePicker `locale` prop or [ConfigProvider `locale`](/components/config-provider) prop instead.\n\n#### Date-related components locale is not working?\n\nSee FAQ [Date-related-components-locale-is-not-working?](/docs/react/faq#date-related-components-locale-is-not-working)\n\n### How to modify start day of week?\n\nPlease use correct [language](/docs/react/i18n) ([#5605](https://github.com/ant-design/ant-design/issues/5605)), or update dayjs `locale` config:\n\n- Example: <https://codesandbox.io/s/dayjs-day-of-week-x9tuj2?file=/demo.tsx>\n\n```js\nimport dayjs from 'dayjs';\n\nimport 'dayjs/locale/zh-cn';\n\nimport updateLocale from 'dayjs/plugin/updateLocale';\n\ndayjs.extend(updateLocale);\ndayjs.updateLocale('zh-cn', {\n  weekStart: 0,\n});\n```\n\n### Why origin panel don't switch when using `panelRender`?\n\nWhen you change the layout of nodes by `panelRender`, React will unmount and re-mount it which reset the component state. You should keep the layout stable. Please ref [#27263](https://github.com/ant-design/ant-design/issues/27263) for more info.\n"},"descriptions":{"zh-CN":"---\ncategory: Components\nsubtitle: 描述列表\ngroup: 数据展示\ntitle: Descriptions\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*fHdlTpif6XQAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*d27AQJrowGAAAAAAAAAAAAAADrJ8AQ/original\n---\n\n成组展示多个只读字段。\n\n## 何时使用\n\n常见于详情页的信息展示。\n\n```tsx | pure\n// >= 5.8.0 可用，推荐的写法 ✅\n\nconst items: DescriptionsProps['items'] = [\n  {\n    key: '1',\n    label: 'UserName',\n    children: <p>Zhou Maomao</p>,\n  },\n  {\n    key: '2',\n    label: 'Telephone',\n    children: <p>1810000000</p>,\n  },\n  {\n    key: '3',\n    label: 'Live',\n    children: <p>Hangzhou, Zhejiang</p>,\n  },\n  {\n    key: '4',\n    label: 'Remark',\n    children: <p>empty</p>,\n  },\n  {\n    key: '5',\n    label: 'Address',\n    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,\n  },\n];\n\n<Descriptions title=\"User Info\" items={items} />;\n\n// <5.8.0 可用，>=5.8.0 时不推荐 🙅🏻‍♀️\n\n<Descriptions title=\"User Info\">\n  <Descriptions.Item label=\"UserName\">Zhou Maomao</Descriptions.Item>\n  <Descriptions.Item label=\"Telephone\">1810000000</Descriptions.Item>\n  <Descriptions.Item label=\"Live\">Hangzhou, Zhejiang</Descriptions.Item>\n  <Descriptions.Item label=\"Remark\">empty</Descriptions.Item>\n  <Descriptions.Item label=\"Address\">\n    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n  </Descriptions.Item>\n</Descriptions>;\n```\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/border.tsx\">带边框的</code>\n<code src=\"./demo/text.tsx\" debug>复杂文本的情况</code>\n<code src=\"./demo/size.tsx\">自定义尺寸</code>\n<code src=\"./demo/responsive.tsx\">响应式</code>\n<code src=\"./demo/vertical.tsx\">垂直</code>\n<code src=\"./demo/vertical-border.tsx\">垂直带边框的</code>\n<code src=\"./demo/style.tsx\" debug>自定义 label & wrapper 样式</code>\n<code src=\"./demo/jsx.tsx\" debug>JSX demo</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Descriptions\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示边框 | boolean | false |  |\n| colon | 配置 `Descriptions.Item` 的 `colon` 的默认值 | boolean | true |  |\n| column | 一行的 `DescriptionItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}` | number \\| [Record<Breakpoint, number>](https://github.com/ant-design/ant-design/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56) | 3 |  |\n| contentStyle | 自定义内容样式 | CSSProperties | - | 4.10.0 |\n| extra | 描述列表的操作区域，显示在右上方 | ReactNode | - | 4.5.0 |\n| items | 描述列表项内容 | [DescriptionsItem](#descriptionitem)[] | - | 5.8.0 |\n| labelStyle | 自定义标签样式 | CSSProperties | - | 4.10.0 |\n| layout | 描述布局 | `horizontal` \\| `vertical` | `horizontal` |  |\n| size | 设置列表的大小。可以设置为 `middle` 、`small`, 或不填（只有设置 `bordered={true}` 生效） | `default` \\| `middle` \\| `small` | - |  |\n| title | 描述列表的标题，显示在最顶部 | ReactNode | - |  |\n\n### DescriptionItem\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| contentStyle | 自定义内容样式 | CSSProperties | - | 4.9.0 |\n| label | 内容的描述 | ReactNode | - |  |\n| labelStyle | 自定义标签样式 | CSSProperties | - | 4.9.0 |\n| span | 包含列的数量 | number \\| [Screens](/components/grid#col) | 1 | `screens: 5.9.0` |\n\n> span 是 Description.Item 的数量。 span={2} 会占用两个 DescriptionItem 的宽度。当同时配置 `style` 和 `labelStyle`（或 `contentStyle`）时，两者会同时作用。样式冲突时，后者会覆盖前者。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Descriptions\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Descriptions\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*fHdlTpif6XQAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*d27AQJrowGAAAAAAAAAAAAAADrJ8AQ/original\n---\n\nDisplay multiple read-only fields in groups.\n\n## When To Use\n\nCommonly displayed on the details page.\n\n```tsx | pure\n// works when >= 5.8.0, recommended ✅\n\nconst items: DescriptionsProps['items'] = [\n  {\n    key: '1',\n    label: 'UserName',\n    children: <p>Zhou Maomao</p>,\n  },\n  {\n    key: '2',\n    label: 'Telephone',\n    children: <p>1810000000</p>,\n  },\n  {\n    key: '3',\n    label: 'Live',\n    children: <p>Hangzhou, Zhejiang</p>,\n  },\n  {\n    key: '4',\n    label: 'Remark',\n    children: <p>empty</p>,\n  },\n  {\n    key: '5',\n    label: 'Address',\n    children: <p>No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China</p>,\n  },\n];\n\n<Descriptions title=\"User Info\" items={items} />;\n\n// works when <5.8.0 , deprecated when >=5.8.0 🙅🏻‍♀️\n\n<Descriptions title=\"User Info\">\n  <Descriptions.Item label=\"UserName\">Zhou Maomao</Descriptions.Item>\n  <Descriptions.Item label=\"Telephone\">1810000000</Descriptions.Item>\n  <Descriptions.Item label=\"Live\">Hangzhou, Zhejiang</Descriptions.Item>\n  <Descriptions.Item label=\"Remark\">empty</Descriptions.Item>\n  <Descriptions.Item label=\"Address\">\n    No. 18, Wantang Road, Xihu District, Hangzhou, Zhejiang, China\n  </Descriptions.Item>\n</Descriptions>;\n```\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/border.tsx\">border</code>\n<code src=\"./demo/text.tsx\" debug>border</code>\n<code src=\"./demo/size.tsx\">Custom size</code>\n<code src=\"./demo/responsive.tsx\">responsive</code>\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n<code src=\"./demo/vertical-border.tsx\">Vertical border</code>\n<code src=\"./demo/style.tsx\" debug>Customize label & wrapper style</code>\n<code src=\"./demo/jsx.tsx\" debug>JSX demo</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Descriptions\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | Whether to display the border | boolean | false |  |\n| colon | Change default props `colon` value of Descriptions.Item | boolean | true |  |\n| column | The number of `DescriptionItems` in a row,could be a number or a object like `{ xs: 8, sm: 16, md: 24}`,(Only set `bordered={true}` to take effect) | number \\| [Record<Breakpoint, number>](https://github.com/ant-design/ant-design/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56) | 3 |  |\n| contentStyle | Customize content style | CSSProperties | - | 4.10.0 |\n| extra | The action area of the description list, placed at the top-right | ReactNode | - | 4.5.0 |\n| items | Describe the contents of the list item | [DescriptionsItem](#descriptionitem)[] | - | 5.8.0 |\n| labelStyle | Customize label style | CSSProperties | - | 4.10.0 |\n| layout | Define description layout | `horizontal` \\| `vertical` | `horizontal` |  |\n| size | Set the size of the list. Can be set to `middle`,`small`, or not filled | `default` \\| `middle` \\| `small` | - |  |\n| title | The title of the description list, placed at the top | ReactNode | - |  |\n\n### DescriptionItem\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| contentStyle | Customize content style | CSSProperties | - | 4.9.0 |\n| label | The description of the content | ReactNode | - |  |\n| labelStyle | Customize label style | CSSProperties | - | 4.9.0 |\n| span | The number of columns included | number \\| [Screens](/components/grid#col) | 1 | `screens: 5.9.0` |\n\n> The number of span Description.Item. Span={2} takes up the width of two DescriptionItems. When both `style` and `labelStyle`(or `contentStyle`) configured, both of them will work. And next one will overwrite first when conflict.\n\n## Design Token\n\n<ComponentTokenTable component=\"Descriptions\"></ComponentTokenTable>\n"},"divider":{"zh-CN":"---\ncategory: Components\ntitle: Divider\nsubtitle: 分割线\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*7sMiTbzvaDoAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*KPSEQ74PLg4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: 布局\n  order: 2\n---\n\n区隔内容的分割线。\n\n## 何时使用\n\n- 对不同章节的文本段落进行分割。\n- 对行内文字/链接进行分割，例如表格的操作列。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/horizontal.tsx\">水平分割线</code>\n<code src=\"./demo/with-text.tsx\">带文字的分割线</code>\n<code src=\"./demo/plain.tsx\">分割文字使用正文样式</code>\n<code src=\"./demo/vertical.tsx\">垂直分割线</code>\n<code src=\"./demo/customize-style.tsx\" debug>样式自定义</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 嵌套的标题 | ReactNode | - |  |\n| className | 分割线样式类 | string | - |  |\n| dashed | 是否虚线 | boolean | false |  |\n| orientation | 分割线标题的位置 | `left` \\| `right` \\| `center` | `center` |  |\n| orientationMargin | 标题和最近 left/right 边框之间的距离，去除了分割线，同时 `orientation` 必须为 `left` 或 `right`。如果传入 `string` 类型的数字且不带单位，默认单位是 px | string \\| number | - |  |\n| plain | 文字是否显示为普通正文样式 | boolean | false | 4.2.0 |\n| style | 分割线样式对象 | CSSProperties | - |  |\n| type | 水平还是垂直类型 | `horizontal` \\| `vertical` | `horizontal` |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Divider\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ntitle: Divider\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*7sMiTbzvaDoAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*KPSEQ74PLg4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: Layout\n  order: 2\n---\n\nA divider line separates different content.\n\n## When To Use\n\n- Divide sections of article.\n- Divide inline text and links such as the operation column of table.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/horizontal.tsx\">Horizontal</code>\n<code src=\"./demo/with-text.tsx\">Divider with title</code>\n<code src=\"./demo/plain.tsx\">Text without heading style</code>\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n<code src=\"./demo/customize-style.tsx\" debug>Style Customization</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| children | The wrapped title | ReactNode | - |  |\n| className | The className of container | string | - |  |\n| dashed | Whether line is dashed | boolean | false |  |\n| orientation | The position of title inside divider | `left` \\| `right` \\| `center` | `center` |  |\n| orientationMargin | The margin-left/right between the title and its closest border, while the `orientation` must be `left` or `right`, If a numeric value of type `string` is provided without a unit, it is assumed to be in pixels (px) by default. | string \\| number | - |  |\n| plain | Divider text show as plain style | boolean | true | 4.2.0 |\n| style | The style object of container | CSSProperties | - |  |\n| type | The direction type of divider | `horizontal` \\| `vertical` | `horizontal` |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Divider\"></ComponentTokenTable>\n"},"drawer":{"zh-CN":"---\ngroup: 反馈\ncategory: Components\nsubtitle: 抽屉\ntitle: Drawer\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*v3TvSq2E0HAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*4wzwRIBLuqEAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n屏幕边缘滑出的浮层面板。\n\n## 何时使用\n\n抽屉从父窗体边缘滑入，覆盖住部分父窗体内容。用户在抽屉内操作时不必离开当前任务，操作完成后，可以平滑地回到原任务。\n\n- 当需要一个附加的面板来控制父窗体内容，这个面板在需要时呼出。比如，控制界面展示样式，往界面中添加内容。\n- 当需要在当前任务流中插入临时任务，创建或预览附加内容。比如展示协议条款，创建子对象。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic-right.tsx\">基础抽屉</code>\n<code src=\"./demo/placement.tsx\">自定义位置</code>\n<code src=\"./demo/extra.tsx\">额外操作</code>\n<code src=\"./demo/render-in-current.tsx\">渲染在当前 DOM</code>\n<code src=\"./demo/form-in-drawer.tsx\">抽屉表单</code>\n<code src=\"./demo/user-profile.tsx\">信息预览抽屉</code>\n<code src=\"./demo/multi-level-drawer.tsx\">多层抽屉</code>\n<code src=\"./demo/size.tsx\">预设宽度</code>\n<code src=\"./demo/classNames.tsx\">自定义内部样式</code>\n<code src=\"./demo/config-provider.tsx\" debug>ConfigProvider</code>\n<code src=\"./demo/no-mask.tsx\" debug>无遮罩</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/scroll-debug.tsx\" debug>滚动锁定调试</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n<!-- prettier-ignore -->\n:::info{title=注意}\nv5 使用 `rootClassName` 与 `rootStyle` 来配置最外层元素样式。原 v4 `className` 与 `style` 改至配置 Drawer 窗体样式以和 Modal 对齐。\n:::\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 抽屉展开后是否将焦点切换至其 Dom 节点 | boolean | true | 4.17.0 |\n| afterOpenChange | 切换抽屉时动画结束后的回调 | function(open) | - |  |\n| className | Drawer 容器外层 className 设置，如果需要设置最外层，请使用 rootClassName | string | - |  |\n| classNames | 配置抽屉内置模块的 className | `header?: string; body?: string; footer?: string; mask?: string; content?: string; wrapper?: string;` | - |  |\n| styles | 配置抽屉内置模块的 style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties; content?: CSSProperties; wrapper?: CSSProperties;` | - | 5.10.0 |\n| closeIcon | 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | boolean \\| ReactNode | &lt;CloseOutlined /> |  |\n| destroyOnClose | 关闭时销毁 Drawer 里的子元素 | boolean | false |  |\n| extra | 抽屉右上角的操作区域 | ReactNode | - | 4.17.0 |\n| footer | 抽屉的页脚 | ReactNode | - |  |\n| forceRender | 预渲染 Drawer 内元素 | boolean | false |  |\n| getContainer | 指定 Drawer 挂载的节点，**并在容器内展现**，`false` 为挂载在当前位置 | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | body |  |\n| height | 高度，在 `placement` 为 `top` 或 `bottom` 时使用 | string \\| number | 378 |  |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true |  |\n| mask | 是否展示遮罩 | boolean | true |  |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | true |  |\n| placement | 抽屉的方向 | `top` \\| `right` \\| `bottom` \\| `left` | `right` |  |\n| push | 用于设置多层 Drawer 的推动行为 | boolean \\| { distance: string \\| number } | { distance: 180 } | 4.5.0+ |\n| rootStyle | 可用于设置 Drawer 最外层容器的样式，和 `style` 的区别是作用节点包括 `mask` | CSSProperties | - |  |\n| size | 预设抽屉宽度（或高度），default `378px` 和 large `736px` | 'default' \\| 'large' | 'default' | 4.17.0 |\n| style | 设计 Drawer 容器样式，如果你只需要设置内容部分请使用 `bodyStyle` | CSSProperties | - |  |\n| title | 标题 | ReactNode | - |  |\n| open | Drawer 是否可见 | boolean | - |\n| width | 宽度 | string \\| number | 378 |  |\n| zIndex | 设置 Drawer 的 `z-index` | number | 1000 |  |\n| onClose | 点击遮罩层或左上角叉或取消按钮的回调 | function(e) | - |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Drawer\"></ComponentTokenTable>\n","en-US":"---\ngroup: Feedback\ncategory: Components\nsubtitle:\ntitle: Drawer\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*v3TvSq2E0HAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*4wzwRIBLuqEAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA panel which slides in from the edge of the screen.\n\n## When To Use\n\nA Drawer is a panel that is typically overlaid on top of a page and slides in from the side. It contains a set of information or actions. Since the user can interact with the Drawer without leaving the current page, tasks can be achieved more efficiently within the same context.\n\n- Use a Form to create or edit a set of information.\n- Processing subtasks. When subtasks are too heavy for a Popover and we still want to keep the subtasks in the context of the main task, Drawer comes very handy.\n- When the same Form is needed in multiple places.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic-right.tsx\">Basic</code>\n<code src=\"./demo/placement.tsx\">Custom Placement</code>\n<code src=\"./demo/extra.tsx\">Extra Actions</code>\n<code src=\"./demo/render-in-current.tsx\">Render in current dom</code>\n<code src=\"./demo/form-in-drawer.tsx\">Submit form in drawer</code>\n<code src=\"./demo/user-profile.tsx\">Preview drawer</code>\n<code src=\"./demo/multi-level-drawer.tsx\">Multi-level drawer</code>\n<code src=\"./demo/size.tsx\">Preset size</code>\n<code src=\"./demo/classNames.tsx\">Customize className for build-in module</code>\n<code src=\"./demo/config-provider.tsx\" debug>ConfigProvider</code>\n<code src=\"./demo/no-mask.tsx\" debug>No mask</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/scroll-debug.tsx\" debug>Scroll Debug</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n<!-- prettier-ignore -->\n:::info{title=注意}\nv5 use `rootClassName` & `rootStyle` to config wrapper style instead of `className` & `style` in v4 to align the API with Modal.\n:::\n\n| Props | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoFocus | Whether Drawer should get focused after open | boolean | true | 4.17.0 |\n| afterOpenChange | Callback after the animation ends when switching drawers | function(open) | - |  |\n| className | Config Drawer Panel className. Use `rootClassName` if want to config top dom style | string | - |  |\n| classNames | Config Drawer build-in module's className | `header?: string; body?: string; footer?: string; mask?: string; content?: string; wrapper?: string;` | - |  |\n| styles | Config Drawer build-in module's style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties; content?: CSSProperties; wrapper?: CSSProperties;` | - | 5.10.0 |\n| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | &lt;CloseOutlined /> |  |\n| destroyOnClose | Whether to unmount child components on closing drawer or not | boolean | false |  |\n| extra | Extra actions area at corner | ReactNode | - | 4.17.0 |\n| footer | The footer for Drawer | ReactNode | - |  |\n| forceRender | Pre-render Drawer component forcibly | boolean | false |  |\n| getContainer | mounted node and display window for Drawer | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | body |  |\n| headerStyle | Style of the drawer header part | CSSProperties | - |  |\n| height | Placement is `top` or `bottom`, height of the Drawer dialog | string \\| number | 378 |  |\n| keyboard | Whether support press esc to close | boolean | true |  |\n| mask | Whether to show mask or not | boolean | true |  |\n| maskClosable | Clicking on the mask (area outside the Drawer) to close the Drawer or not | boolean | true |  |\n| placement | The placement of the Drawer | `top` \\| `right` \\| `bottom` \\| `left` | `right` |  |\n| push | Nested drawers push behavior | boolean \\| { distance: string \\| number } | { distance: 180 } | 4.5.0+ |\n| rootStyle | Style of wrapper element which **contains mask** compare to `style` | CSSProperties | - |  |\n| style | Style of Drawer panel. Use `bodyStyle` if want to config body only | CSSProperties | - |  |\n| size | preset size of drawer, default `378px` and large `736px` | 'default' \\| 'large' | 'default' | 4.17.0 |\n| title | The title for Drawer | ReactNode | - |  |\n| open | Whether the Drawer dialog is visible or not | boolean | false |  |\n| width | Width of the Drawer dialog | string \\| number | 378 |  |\n| zIndex | The `z-index` of the Drawer | number | 1000 |  |\n| onClose | Specify a callback that will be called when a user clicks mask, close button or Cancel button | function(e) | - |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Drawer\"></ComponentTokenTable>\n"},"dropdown":{"zh-CN":"---\ncategory: Components\nsubtitle: 下拉菜单\ngroup: 导航\ntitle: Dropdown\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*mBBcQ6goljkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5qm4S4Zgh2QAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n向下弹出的列表。\n\n## 何时使用\n\n当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。\n\n- 用于收罗一组命令操作。\n- Select 用于选择，而 Dropdown 是命令集合。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/placement.tsx\">弹出位置</code>\n<code src=\"./demo/arrow.tsx\">箭头</code>\n<code src=\"./demo/item.tsx\">其他元素</code>\n<code src=\"./demo/arrow-center.tsx\">箭头指向</code>\n<code src=\"./demo/trigger.tsx\">触发方式</code>\n<code src=\"./demo/event.tsx\">触发事件</code>\n<code src=\"./demo/dropdown-button.tsx\">带下拉框的按钮</code>\n<code src=\"./demo/custom-dropdown.tsx\">扩展菜单</code>\n<code src=\"./demo/sub-menu.tsx\">多级菜单</code>\n<code src=\"./demo/sub-menu-debug.tsx\" debug>多级菜单</code>\n<code src=\"./demo/overlay-open.tsx\">菜单隐藏方式</code>\n<code src=\"./demo/context-menu.tsx\">右键菜单</code>\n<code src=\"./demo/loading.tsx\">加载中状态</code>\n<code src=\"./demo/selectable.tsx\">菜单可选选择</code>\n<code src=\"./demo/menu-full.tsx\" debug>Menu 完整样式</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/icon-debug.tsx\" debug>Icon debug</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Dropdown\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| arrow | 下拉框箭头是否显示 | boolean \\| { pointAtCenter: boolean } | false |  |\n| autoAdjustOverflow | 下拉框被遮挡时自动调整位置 | boolean | true | 5.2.0 |\n| autoFocus | 打开后自动聚焦下拉框 | boolean | false | 4.21.0 |\n| disabled | 菜单是否禁用 | boolean | - |  |\n| destroyPopupOnHide | 关闭后是否销毁 Dropdown | boolean | false |  |\n| dropdownRender | 自定义下拉框内容 | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |\n| menu | 菜单配置项 | [MenuProps](/components/menu-cn#api) | - | 4.24.0 |\n| overlayClassName | 下拉根元素的类名称 | string | - |  |\n| overlayStyle | 下拉根元素的样式 | CSSProperties | - |  |\n| placement | 菜单弹出位置：`bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight` | string | `bottomLeft` |  |\n| trigger | 触发下拉的行为，移动端不支持 hover | Array&lt;`click`\\|`hover`\\|`contextMenu`> | \\[`hover`] |  |\n| open | 菜单是否显示，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | boolean | - | 4.23.0 |\n| onOpenChange | 菜单显示状态改变时调用，点击菜单按钮导致的消失不会触发。小于 4.23.0 使用 `onVisibleChange`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | (open: boolean, info: { source: 'trigger' \\| 'menu' }) => void | - | `info.source`: 5.11.0 |\n\n### Dropdown.Button\n\n属性与 Dropdown 的相同。还包含以下属性：\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| buttonsRender | 自定义左右两个按钮 | (buttons: ReactNode\\[]) => ReactNode\\[] | - |  |\n| loading | 设置按钮载入状态 | boolean \\| { delay: number } | false |  |\n| danger | 设置危险按钮 | boolean | - | 4.23.0 |\n| icon | 右侧的 icon | ReactNode | - |  |\n| size | 按钮大小，和 [Button](/components/button-cn#api) 一致 | string | `default` |  |\n| type | 按钮类型，和 [Button](/components/button-cn#api) 一致 | string | `default` |  |\n| onClick | 点击左侧按钮的回调，和 [Button](/components/button-cn#api) 一致 | (event) => void | - |  |\n\n## 注意\n\n请确保 `Dropdown` 的子元素能接受 `onMouseEnter`、`onMouseLeave`、`onFocus`、`onClick` 事件。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Dropdown\"></ComponentTokenTable>\n\n## FAQ\n\n### Dropdown 在水平方向超出屏幕时会被挤压该怎么办？\n\n你可以通过 `width: max-content` 来解决这个问题，参考 [#43025](https://github.com/ant-design/ant-design/issues/43025#issuecomment-1594394135)。\n","en-US":"---\ncategory: Components\ngroup: Navigation\ntitle: Dropdown\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*mBBcQ6goljkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5qm4S4Zgh2QAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA dropdown list.\n\n## When To Use\n\nWhen there are more than a few options to choose from, you can wrap them in a `Dropdown`. By hovering or clicking on the trigger, a dropdown menu will appear, which allows you to choose an option and execute the relevant action.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/arrow.tsx\">Arrow</code>\n<code src=\"./demo/item.tsx\">Other elements</code>\n<code src=\"./demo/arrow-center.tsx\">Arrow pointing at the center</code>\n<code src=\"./demo/trigger.tsx\">Trigger mode</code>\n<code src=\"./demo/event.tsx\">Click event</code>\n<code src=\"./demo/dropdown-button.tsx\">Button with dropdown menu</code>\n<code src=\"./demo/custom-dropdown.tsx\">Custom dropdown</code>\n<code src=\"./demo/sub-menu.tsx\">Cascading menu</code>\n<code src=\"./demo/sub-menu-debug.tsx\" debug>Cascading menu</code>\n<code src=\"./demo/overlay-open.tsx\">The way of hiding menu.</code>\n<code src=\"./demo/context-menu.tsx\">Context Menu</code>\n<code src=\"./demo/loading.tsx\">Loading</code>\n<code src=\"./demo/selectable.tsx\">Selectable Menu</code>\n<code src=\"./demo/menu-full.tsx\" debug>Menu full styles</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/icon-debug.tsx\" debug>Icon debug</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Dropdown\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| arrow | Whether the dropdown arrow should be visible | boolean \\| { pointAtCenter: boolean } | false |  |\n| autoAdjustOverflow | Whether to adjust dropdown placement automatically when dropdown is off screen | boolean | true | 5.2.0 |\n| autoFocus | Focus element in `overlay` when opened | boolean | false | 4.21.0 |\n| disabled | Whether the dropdown menu is disabled | boolean | - |  |\n| destroyPopupOnHide | Whether destroy dropdown when hidden | boolean | false |  |\n| dropdownRender | Customize dropdown content | (menus: ReactNode) => ReactNode | - | 4.24.0 |\n| getPopupContainer | To set the container of the dropdown menu. The default is to create a div element in body, but you can reset it to the scrolling area and make a relative reposition. [Example on CodePen](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |\n| menu | The menu props | [MenuProps](/components/menu/#api) | - | 4.24.0 |\n| overlayClassName | The class name of the dropdown root element | string | - |  |\n| overlayStyle | The style of the dropdown root element | CSSProperties | - |  |\n| placement | Placement of popup menu: `bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight` | string | `bottomLeft` |  |\n| trigger | The trigger mode which executes the dropdown action. Note that hover can't be used on touchscreens | Array&lt;`click`\\|`hover`\\|`contextMenu`> | \\[`hover`] |  |\n| open | Whether the dropdown menu is currently open. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open)) | boolean | - | 4.23.0 |\n| onOpenChange | Called when the open state is changed. Not trigger when hidden by click item. Use `onVisibleChange` under 4.23.0 ([why?](/docs/react/faq#why-open)) | (open: boolean, info: { source: 'trigger' \\| 'menu' }) => void | - | `info.source`: 5.11.0 |\n\n### Dropdown.Button\n\nSame props from Dropdown. And includes additional props:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| buttonsRender | Custom buttons inside Dropdown.Button | (buttons: ReactNode\\[]) => ReactNode\\[] | - |  |\n| loading | Set the loading status of button | boolean \\| { delay: number } | false |  |\n| danger | Set the danger status of button | boolean | - | 4.23.0 |\n| icon | Icon (appears on the right) | ReactNode | - |  |\n| size | Size of the button, the same as [Button](/components/button/#api) | string | `default` |  |\n| type | Type of the button, the same as [Button](/components/button/#api) | string | `default` |  |\n| onClick | The same as [Button](/components/button/#api): called when you click the button on the left | (event) => void | - |  |\n\n## Note\n\nPlease ensure that the child node of `Dropdown` accepts `onMouseEnter`, `onMouseLeave`, `onFocus`, `onClick` events.\n\n## Design Token\n\n<ComponentTokenTable component=\"Dropdown\"></ComponentTokenTable>\n\n## FAQ\n\n### How to prevent Dropdown from being squeezed when it exceeds the screen horizontally?\n\nYou can use `width: max-content` style to handle this. ref [#43025](https://github.com/ant-design/ant-design/issues/43025#issuecomment-1594394135).\n"},"empty":{"zh-CN":"---\ncategory: Components\nsubtitle: 空状态\ngroup: 数据展示\ntitle: Empty\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ZdiZSLzEV0wAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*obM7S5lIxeMAAAAAAAAAAAAADrJ8AQ/original\n---\n\n空状态时的展示占位图。\n\n## 何时使用\n\n- 当目前没有数据时，用于显式的用户提示。\n- 初始化场景时的引导创建流程。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/simple.tsx\">选择图片</code>\n<code src=\"./demo/customize.tsx\">自定义</code>\n<code src=\"./demo/config-provider.tsx\">全局化配置</code>\n<code src=\"./demo/description.tsx\">无描述</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n```jsx\n<Empty>\n  <Button>创建</Button>\n</Empty>\n```\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 自定义描述内容 | ReactNode | - |  |\n| image | 设置显示图片，为 string 时表示自定义图片地址。 | ReactNode | `Empty.PRESENTED_IMAGE_DEFAULT` |  |\n| imageStyle | 图片样式 | CSSProperties | - |  |\n\n## 内置图片\n\n- Empty.PRESENTED_IMAGE_SIMPLE\n\n  <div class=\"site-empty-buildIn-img site-empty-buildIn-simple\"><div>\n\n- Empty.PRESENTED_IMAGE_DEFAULT\n\n  <div class=\"site-empty-buildIn-img site-empty-buildIn-default\"></div>\n\n<style>\n  .site-empty-buildIn-img {\n    background-repeat: no-repeat;\n    background-size: contain;\n  }\n  .site-empty-buildIn-simple {\n    width: 55px;\n    height: 35px;\n    background-image: url(\"https://user-images.githubusercontent.com/507615/54591679-b0ceb580-4a65-11e9-925c-ad15b4eae93d.png\");\n  }\n  .site-empty-buildIn-default {\n    width: 121px;\n    height: 116px;\n    background-image: url(\"https://user-images.githubusercontent.com/507615/54591670-ac0a0180-4a65-11e9-846c-e55ffce0fe7b.png\");\n  }\n</style>\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Empty\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Empty\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ZdiZSLzEV0wAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*obM7S5lIxeMAAAAAAAAAAAAADrJ8AQ/original\n---\n\nEmpty state placeholder.\n\n## When To Use\n\n- When there is no data provided, display for friendly tips.\n- User tutorial to create something in fresh new situation.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/simple.tsx\">Chose image</code>\n<code src=\"./demo/customize.tsx\">Customize</code>\n<code src=\"./demo/config-provider.tsx\">ConfigProvider</code>\n<code src=\"./demo/description.tsx\">No description</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Empty>\n  <Button>Create</Button>\n</Empty>\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| description | Customize description | ReactNode | - |  |\n| image | Customize image. Will treat as image url when string provided | ReactNode | `Empty.PRESENTED_IMAGE_DEFAULT` |  |\n| imageStyle | The style of image | CSSProperties | - |  |\n\n## Built-in images\n\n- Empty.PRESENTED_IMAGE_SIMPLE\n\n  <div class=\"site-empty-buildIn-img site-empty-buildIn-simple\"><div>\n\n- Empty.PRESENTED_IMAGE_DEFAULT\n\n  <div class=\"site-empty-buildIn-img site-empty-buildIn-default\"></div>\n\n<style>\n  .site-empty-buildIn-img {\n    background-repeat: no-repeat;\n    background-size: contain;\n  }\n  .site-empty-buildIn-simple {\n    width: 55px;\n    height: 35px;\n    background-image: url(\"https://user-images.githubusercontent.com/507615/54591679-b0ceb580-4a65-11e9-925c-ad15b4eae93d.png\");\n  }\n  .site-empty-buildIn-default {\n    width: 121px;\n    height: 116px;\n    background-image: url(\"https://user-images.githubusercontent.com/507615/54591670-ac0a0180-4a65-11e9-846c-e55ffce0fe7b.png\");\n  }\n</style>\n\n## Design Token\n\n<ComponentTokenTable component=\"Empty\"></ComponentTokenTable>\n"},"flex":{"zh-CN":"---\ncategory: Components\nsubtitle: 弹性布局\ngroup: 布局\ntitle: Flex\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*SMzgSJZE_AwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8yArQ43EGccAAAAAAAAAAAAADrJ8AQ/original\ntag: New\n---\n\n弹性布局。自 `5.10.0` 版本开始提供该组件。\n\n## 何时使用\n\n- 适合设置元素之间的间距。\n- 适合设置各种水平、垂直对齐方式。\n\n### 与 Space 组件的区别\n\n- Space 为内联元素提供间距，其本身会为每一个子元素添加包裹元素用于内联对齐。适用于行、列中多个子元素的等距排列。\n- Flex 为块级元素提供间距，其本身不会添加包裹元素。适用于垂直或水平方向上的子元素布局，并提供了更多的灵活性和控制能力。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本布局</code>\n<code src=\"./demo/align.tsx\">对齐方式</code>\n<code src=\"./demo/gap.tsx\">设置间隙</code>\n<code src=\"./demo/wrap.tsx\">自动换行</code>\n<code src=\"./demo/combination.tsx\">组合使用</code>\n<code src=\"./demo/debug.tsx\" debug>调试专用</code>\n\n## API\n\n> 自 `antd@5.10.0` 版本开始提供该组件。Flex 组件默认行为在水平模式下，为向上对齐，在垂直模式下，为拉伸对齐，你可以通过属性进行调整。\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| vertical | flex 主轴的方向是否垂直，使用 `flex-direction: column` | boolean | `false` |\n| wrap | 设置元素单行显示还是多行显示 | 参考 [flex-wrap](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap) | nowrap |  |\n| justify | 设置元素在主轴方向上的对齐方式 | 参考 [justify-content](https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content) | normal |  |\n| align | 设置元素在交叉轴方向上的对齐方式 | 参考 [align-items](https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items) | normal |  |\n| flex | flex CSS 简写属性 | 参考 [flex](https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex) | normal |  |\n| gap | 设置网格之间的间隙 | `small` \\| `middle` \\| `large` \\| string \\| number | - |  |\n| component | 自定义元素类型 | React.ComponentType | `div` |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Flex\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Layout\ntitle: Flex\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*SMzgSJZE_AwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8yArQ43EGccAAAAAAAAAAAAADrJ8AQ/original\ntag: New\n---\n\nFlex. Available since `5.10.0`.\n\n## When To Use\n\n- Good for setting spacing between elements.\n- Suitable for setting various horizontal and vertical alignments.\n\n### Difference with Space component\n\n- Space is used to set the spacing between inline elements. It will add a wrapper element for each child element for inline alignment. Suitable for equidistant arrangement of multiple child elements in rows and columns.\n- Flex is used to set the layout of block-level elements. It does not add a wrapper element. Suitable for layout of child elements in vertical or horizontal direction, and provides more flexibility and control.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/align.tsx\">align</code>\n<code src=\"./demo/gap.tsx\">gap</code>\n<code src=\"./demo/wrap.tsx\">Wrap</code>\n<code src=\"./demo/combination.tsx\">combination</code>\n<code src=\"./demo/debug.tsx\" debug>debug</code>\n\n## API\n\n> This component is available since `antd@5.10.0`. The default behavior of Flex in horizontal mode is to align upward, In vertical mode, aligns the stretch, You can adjust this via properties.\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | type | Default | Version |\n| --- | --- | --- | --- | --- |\n| vertical | Is direction of the flex vertical, use `flex-direction: column` | boolean | `false` |  |\n| wrap | Set whether the element is displayed in a single line or in multiple lines | reference [flex-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) | nowrap |  |\n| justify | Sets the alignment of elements in the direction of the main axis | reference [justify-content](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content) | normal |  |\n| align | Sets the alignment of elements in the direction of the cross axis | reference [align-items](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items) | normal |  |\n| flex | flex CSS shorthand properties | reference [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex) | normal |  |\n| gap | Sets the gap between grids | `small` \\| `middle` \\| `large` \\| string \\| number | - |  |\n| component | custom element type | React.ComponentType | `div` |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Flex\"></ComponentTokenTable>\n"},"float-button":{"zh-CN":"---\ncategory: Components\ngroup: 通用\nsubtitle: 悬浮按钮\ntitle: FloatButton\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HS-wTIIwu0kAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a0hwTY_rOSUAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ntag: New\n---\n\n悬浮按钮。自 `5.0.0` 版本开始提供该组件。\n\n## 何时使用\n\n- 用于网站上的全局功能；\n- 无论浏览到何处都可以看见的按钮。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\" iframe=\"360\">基本</code>\n<code src=\"./demo/type.tsx\" iframe=\"360\">类型</code>\n<code src=\"./demo/shape.tsx\" iframe=\"360\">形状</code>\n<code src=\"./demo/description.tsx\" iframe=\"360\">描述</code>\n<code src=\"./demo/tooltip.tsx\" iframe=\"360\">含有气泡卡片的悬浮按钮</code>\n<code src=\"./demo/group.tsx\" iframe=\"360\">浮动按钮组</code>\n<code src=\"./demo/group-menu.tsx\" iframe=\"360\">菜单模式</code>\n<code src=\"./demo/controlled.tsx\" iframe=\"360\">受控模式</code>\n<code src=\"./demo/back-top.tsx\" iframe=\"360\">回到顶部</code>\n<code src=\"./demo/badge.tsx\" iframe=\"360\">徽标数</code>\n<code src=\"./demo/badge-debug.tsx\" iframe=\"360\" debug>调试小圆点使用</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n> 自 `antd@5.0.0` 版本开始提供该组件。\n\n### 共同的 API\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| icon | 自定义图标 | ReactNode | - |  |\n| description | 文字及其它内容 | ReactNode | - |  |\n| tooltip | 气泡卡片的内容 | ReactNode \\| () => ReactNode | - |  |\n| type | 设置按钮类型 | `default` \\| `primary` | `default` |  |\n| shape | 设置按钮形状 | `circle` \\| `square` | `circle` |  |\n| onClick | 点击按钮时的回调 | (event) => void | - |  |\n| href | 点击跳转的地址，指定此属性 button 的行为和 a 链接一致 | string | - |  |\n| target | 相当于 a 标签的 target 属性，href 存在时生效 | string | - |  |\n| badge | 带徽标数字的悬浮按钮（不支持 `status` 以及相关属性） | [BadgeProps](/components/badge-cn#api) | - | 5.4.0 |\n\n### FloatButton.Group\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| shape | 设置包含的 FloatButton 按钮形状 | `circle` \\| `square` | `circle` |  |\n| trigger | 触发方式（有触发方式为菜单模式） | `click` \\| `hover` | - |  |\n| open | 受控展开，需配合 trigger 一起使用 | boolean | - |  |\n| onOpenChange | 展开收起时的回调，需配合 trigger 一起使用 | (open: boolean) => void | - |  |\n\n### FloatButton.BackTop\n\n| 参数             | 说明                               | 类型              | 默认值       | 版本 |\n| ---------------- | ---------------------------------- | ----------------- | ------------ | ---- |\n| duration         | 回到顶部所需时间（ms）             | number            | 450          |      |\n| target           | 设置需要监听其滚动事件的元素       | () => HTMLElement | () => window |      |\n| visibilityHeight | 滚动高度达到此参数值才出现 BackTop | number            | 400          |      |\n| onClick          | 点击按钮的回调函数                 | () => void        | -            |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"FloatButton\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: General\ntitle: FloatButton\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HS-wTIIwu0kAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a0hwTY_rOSUAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ntag: New\n---\n\nFloatButton. Available since `5.0.0`.\n\n## When To Use\n\n- For global functionality on the site.\n- Buttons that can be seen wherever you browse.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\" iframe=\"360\">Basic</code>\n<code src=\"./demo/type.tsx\" iframe=\"360\">Type</code>\n<code src=\"./demo/shape.tsx\" iframe=\"360\">Shape</code>\n<code src=\"./demo/description.tsx\" iframe=\"360\">Description</code>\n<code src=\"./demo/tooltip.tsx\" iframe=\"360\">FloatButton with tooltip</code>\n<code src=\"./demo/group.tsx\" iframe=\"360\">FloatButton Group</code>\n<code src=\"./demo/group-menu.tsx\" iframe=\"360\">Menu mode</code>\n<code src=\"./demo/controlled.tsx\" iframe=\"360\">Controlled mode</code>\n<code src=\"./demo/back-top.tsx\" iframe=\"360\">BackTop</code>\n<code src=\"./demo/badge.tsx\" iframe=\"360\">badge</code>\n<code src=\"./demo/badge-debug.tsx\" iframe=\"360\" debug>debug dot</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `antd@5.0.0`.\n\n### common API\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| icon | Set the icon component of button | ReactNode | - |  |\n| description | Text and other | ReactNode | - |  |\n| tooltip | The text shown in the tooltip | ReactNode \\| () => ReactNode |  |  |\n| type | Setting button type | `default` \\| `primary` | `default` |  |\n| shape | Setting button shape | `circle` \\| `square` | `circle` |  |\n| onClick | Set the handler to handle `click` event | (event) => void | - |  |\n| href | The target of hyperlink | string | - |  |\n| target | Specifies where to display the linked URL | string | - |  |\n| badge | Attach Badge to FloatButton. `status` and other props related are not supported. | [BadgeProps](/components/badge#api) | - | 5.4.0 |\n\n### FloatButton.Group\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| shape | Setting button shape of children | `circle` \\| `square` | `circle` |  |\n| trigger | Which action can trigger menu open/close | `click` \\| `hover` | - |  |\n| open | Whether the menu is visible or not, use it with trigger | boolean | - |  |\n| onOpenChange | Callback executed when active menu is changed, use it with trigger | (open: boolean) => void | - |  |\n\n### FloatButton.BackTop\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| duration | Time to return to top（ms） | number | 450 |  |\n| target | Specifies the scrollable area dom node | () => HTMLElement | () => window |  |\n| visibilityHeight | The BackTop button will not show until the scroll height reaches this value | number | 400 |  |\n| onClick | A callback function, which can be executed when you click the button | () => void | - |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"FloatButton\"></ComponentTokenTable>\n"},"form":{"zh-CN":"---\ncategory: Components\nsubtitle: 表单\ngroup: 数据录入\ntitle: Form\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-lcdS5Qm1bsAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ylFATY6w-ygAAAAAAAAAAAAADrJ8AQ/original\n---\n\n高性能表单控件，自带数据域管理。包含数据录入、校验以及对应样式。\n\n## 何时使用\n\n- 用于创建一个实体或收集信息。\n- 需要对输入的数据类型进行校验时。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本使用</code>\n<code src=\"./demo/control-hooks.tsx\">表单方法调用</code>\n<code src=\"./demo/layout.tsx\">表单布局</code>\n<code src=\"./demo/disabled.tsx\">表单禁用</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">表单变体</code>\n<code src=\"./demo/required-mark.tsx\">必选样式</code>\n<code src=\"./demo/size.tsx\">表单尺寸</code>\n<code src=\"./demo/layout-can-wrap.tsx\">表单标签可换行</code>\n<code src=\"./demo/warning-only.tsx\">非阻塞校验</code>\n<code src=\"./demo/useWatch.tsx\">字段监听 Hooks</code>\n<code src=\"./demo/validate-trigger.tsx\">校验时机</code>\n<code src=\"./demo/validate-only.tsx\">仅校验</code>\n<code src=\"./demo/form-item-path.tsx\">字段路径前缀</code>\n<code src=\"./demo/dynamic-form-item.tsx\">动态增减表单项</code>\n<code src=\"./demo/dynamic-form-items.tsx\">动态增减嵌套字段</code>\n<code src=\"./demo/dynamic-form-items-no-style.tsx\" debug>动态增减嵌套纯字段</code>\n<code src=\"./demo/dynamic-form-items-complex.tsx\">复杂的动态增减表单项</code>\n<code src=\"./demo/nest-messages.tsx\">嵌套结构与校验信息</code>\n<code src=\"./demo/complex-form-control.tsx\">复杂一点的控件</code>\n<code src=\"./demo/customized-form-controls.tsx\">自定义表单控件</code>\n<code src=\"./demo/global-state.tsx\">表单数据存储于上层组件</code>\n<code src=\"./demo/form-context.tsx\">多表单联动</code>\n<code src=\"./demo/inline-login.tsx\">内联登录栏</code>\n<code src=\"./demo/normal-login.tsx\">登录框</code>\n<code src=\"./demo/register.tsx\">注册新用户</code>\n<code src=\"./demo/advanced-search.tsx\">高级搜索</code>\n<code src=\"./demo/form-in-modal.tsx\">弹出层中的新建表单</code>\n<code src=\"./demo/time-related-controls.tsx\">时间类控件</code>\n<code src=\"./demo/without-form-create.tsx\">自行处理表单数据</code>\n<code src=\"./demo/validate-static.tsx\">自定义校验</code>\n<code src=\"./demo/dynamic-rule.tsx\">动态校验规则</code>\n<code src=\"./demo/dependencies.tsx\">校验与更新依赖</code>\n<code src=\"./demo/validate-other.tsx\">校验其他组件</code>\n<code src=\"./demo/disabled-input-debug.tsx\" debug>Disabled Input Debug</code>\n<code src=\"./demo/label-debug.tsx\" debug>测试 label 省略</code>\n<code src=\"./demo/col-24-debug.tsx\" debug>测试特殊 col 24 用法</code>\n<code src=\"./demo/ref-item.tsx\" debug>引用字段</code>\n<code src=\"./demo/custom-feedback-icons.tsx\" debug>Custom feedback icons</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Form\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| colon | 配置 Form.Item 的 `colon` 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效) | boolean | true |  |\n| disabled | 设置表单组件禁用，仅对 antd 组件有效 | boolean | false | 4.21.0 |\n| component | 设置 Form 渲染元素，为 `false` 则不创建 DOM 节点 | ComponentType \\| false | form |  |\n| fields | 通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看[示例](#components-form-demo-global-state) | [FieldData](#fielddata)\\[] | - |  |\n| form | 经 `Form.useForm()` 创建的 form 控制实例，不提供时会自动创建 | [FormInstance](#forminstance) | - |  |\n| feedbackIcons | 当 `Form.Item` 有 `hasFeedback` 属性时可以自定义图标 | [FeedbackIcons](#feedbackicons) | - | 5.9.0 |\n| initialValues | 表单默认值，只有初始化以及重置时生效 | object | - |  |\n| labelAlign | label 标签的文本对齐方式 | `left` \\| `right` | `right` |  |\n| labelWrap | label 标签的文本换行方式 | boolean | false | 4.18.0 |\n| labelCol | label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}` | [object](/components/grid-cn#col) | - |  |\n| layout | 表单布局 | `horizontal` \\| `vertical` \\| `inline` | `horizontal` |  |\n| name | 表单名称，会作为表单字段 `id` 前缀使用 | string | - |  |\n| preserve | 当字段被删除时保留字段值。你可以通过 `getFieldsValue(true)` 来获取保留字段值 | boolean | true | 4.4.0 |\n| requiredMark | 必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置 | boolean \\| `optional` \\| ((label: ReactNode, info: { required: boolean }) => ReactNode) | true | `renderProps`: 5.9.0 |\n| scrollToFirstError | 提交失败自动滚动到第一个错误字段 | boolean \\| [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options) | false |  |\n| size | 设置字段组件的尺寸（仅限 antd 组件） | `small` \\| `middle` \\| `large` | - |  |\n| validateMessages | 验证提示模板，说明[见下](#validatemessages) | [ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134) | - |  |\n| validateTrigger | 统一设置字段触发验证的时机 | string \\| string\\[] | `onChange` | 4.3.0 |\n| variant | 表单内控件变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| wrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol | [object](/components/grid-cn#col) | - |  |\n| onFieldsChange | 字段更新时触发回调事件 | function(changedFields, allFields) | - |  |\n| onFinish | 提交表单且数据验证成功后回调事件 | function(values) | - |  |\n| onFinishFailed | 提交表单且数据验证失败后回调事件 | function({ values, errorFields, outOfDate }) | - |  |\n| onValuesChange | 字段值更新时触发回调事件 | function(changedValues, allValues) | - |  |\n\n### validateMessages\n\nForm 为验证提供了[默认的错误提示信息](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134)，你可以通过配置 `validateMessages` 属性，修改对应的提示模板。一种常见的使用方式，是配置国际化提示信息：\n\n```jsx\nconst validateMessages = {\n  required: \"'${name}' 是必选字段\",\n  // ...\n};\n\n<Form validateMessages={validateMessages} />;\n```\n\n此外，[ConfigProvider](/components/config-provider-cn) 也提供了全局化配置方案，允许统一配置错误提示模板：\n\n```jsx\nconst validateMessages = {\n  required: \"'${name}' 是必选字段\",\n  // ...\n};\n\n<ConfigProvider form={{ validateMessages }}>\n  <Form />\n</ConfigProvider>;\n```\n\n## Form.Item\n\n表单字段组件，用于数据双向绑定、校验、布局等。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| colon | 配合 `label` 属性使用，表示是否显示 `label` 后面的冒号 | boolean | true |  |\n| dependencies | 设置依赖字段，说明[见下](#dependencies) | [NamePath](#namepath)\\[] | - |  |\n| extra | 额外的提示信息，和 `help` 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 | ReactNode | - |  |\n| getValueFromEvent | 设置如何将 event 的值转换成字段值 | (..args: any\\[]) => any | - |  |\n| getValueProps | 为子元素添加额外的属性 (不建议通过 `getValueProps` 生成动态函数 prop，请直接将其传递给子组件) | (value: any) => Record<string, any> | - | 4.2.0 |\n| hasFeedback | 配合 `validateStatus` 属性使用，展示校验状态图标，建议只配合 Input 组件使用 此外，它还可以通过 Icons 属性获取反馈图标。 | boolean \\| { icons: [FeedbackIcons](#feedbackicons) } | false | icons: 5.9.0 |\n| help | 提示信息，如不设置，则会根据校验规则自动生成 | ReactNode | - |  |\n| hidden | 是否隐藏字段（依然会收集和校验字段） | boolean | false | 4.4.0 |\n| htmlFor | 设置子元素 label `htmlFor` 属性 | string | - |  |\n| initialValue | 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准 | string | - | 4.2.0 |\n| label | `label` 标签的文本 | ReactNode | - |  |\n| labelAlign | 标签文本对齐方式 | `left` \\| `right` | `right` |  |\n| labelCol | `label` 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`。你可以通过 Form 的 `labelCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准 | [object](/components/grid-cn#col) | - |  |\n| messageVariables | 默认验证字段的信息 | Record&lt;string, string> | - | 4.7.0 |\n| name | 字段名，支持数组 | [NamePath](#namepath) | - |  |\n| normalize | 组件获取值后进行转换，再放入 Form 中。不支持异步 | (value, prevValue, prevValues) => any | - |  |\n| noStyle | 为 `true` 时不带样式，作为纯字段控件使用。当自身没有 `validateStatus` 而父元素存在有 `validateStatus` 的 Form.Item 会继承父元素的 `validateStatus` | boolean | false |  |\n| preserve | 当字段被删除时保留字段值 | boolean | true | 4.4.0 |\n| required | 必填样式设置。如不设置，则会根据校验规则自动生成 | boolean | false |  |\n| rules | 校验规则，设置字段的校验逻辑。点击[此处](#components-form-demo-basic)查看示例 | [Rule](#rule)\\[] | - |  |\n| shouldUpdate | 自定义字段更新逻辑，说明[见下](#shouldupdate) | boolean \\| (prevValue, curValue) => boolean | false |  |\n| tooltip | 配置提示信息 | ReactNode \\| [TooltipProps & { icon: ReactNode }](/components/tooltip-cn#api) | - | 4.7.0 |\n| trigger | 设置收集字段值变更的时机。点击[此处](#components-form-demo-customized-form-controls)查看示例 | string | `onChange` |  |\n| validateFirst | 当某一规则校验不通过时，是否停止剩下的规则的校验。设置 `parallel` 时会并行校验 | boolean \\| `parallel` | false | `parallel`: 4.5.0 |\n| validateDebounce | 设置防抖，延迟毫秒数后进行校验 | number | - | 5.9.0 |\n| validateStatus | 校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating' | string | - |  |\n| validateTrigger | 设置字段校验的时机 | string \\| string\\[] | `onChange` |  |\n| valuePropName | 子节点的值的属性，如 Switch、Checkbox 的是 `checked`。该属性为 `getValueProps` 的封装，自定义 `getValueProps` 后会失效 | string | `value` |  |\n| wrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 `labelCol`。你可以通过 Form 的 `wrapperCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准 | [object](/components/grid-cn#col) | - |  |\n\n被设置了 `name` 属性的 `Form.Item` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1. 你**不再需要也不应该**用 `onChange` 来做数据收集同步（你可以使用 Form 的 `onValuesChange`），但还是可以继续监听 `onChange` 事件。\n2. 你不能用控件的 `value` 或 `defaultValue` 等属性来设置表单域的值，默认值可以用 Form 里的 `initialValues` 来设置。注意 `initialValues` 不能被 `setState` 动态更新，你需要用 `setFieldsValue` 来更新。\n3. 你不应该用 `setState`，可以使用 `form.setFieldsValue` 来动态改变表单值。\n\n### dependencies\n\n当字段间存在依赖关系时使用。如果一个字段设置了 `dependencies` 属性。那么它所依赖的字段更新时，该字段将自动触发更新与校验。一种常见的场景，就是注册用户表单的“密码”与“确认密码”字段。“确认密码”校验依赖于“密码”字段，设置 `dependencies` 后，“密码”字段更新会重新触发“校验密码”的校验逻辑。你可以参考[具体例子](#components-form-demo-dependencies)。\n\n`dependencies` 不应和 `shouldUpdate` 一起使用，因为这可能带来更新逻辑的混乱。\n\n### FeedbackIcons\n\n`({ status: ValidateStatus, errors: ReactNode, warnings: ReactNode }) => Record<ValidateStatus, ReactNode>`\n\n### shouldUpdate\n\nForm 通过增量更新方式，只更新被修改的字段相关组件以达到性能优化目的。大部分场景下，你只需要编写代码或者与 [`dependencies`](#dependencies) 属性配合校验即可。而在某些特定场景，例如修改某个字段值后出现新的字段选项、或者纯粹希望表单任意变化都对某一个区域进行渲染。你可以通过 `shouldUpdate` 修改 Form.Item 的更新逻辑。\n\n当 `shouldUpdate` 为 `true` 时，Form 的任意变化都会使该 Form.Item 重新渲染。这对于自定义渲染一些区域十分有帮助，要注意 Form.Item 里包裹的子组件必须由函数返回，否则 `shouldUpdate` 不会起作用：\n\n相关issue：[#34500](https://github.com/ant-design/ant-design/issues/34500)\n\n```jsx\n<Form.Item shouldUpdate>\n  {() => {\n    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;\n  }}\n</Form.Item>\n```\n\n你可以参考[示例](#components-form-demo-horizontal-login)查看具体使用场景。\n\n当 `shouldUpdate` 为方法时，表单的每次数值更新都会调用该方法，提供原先的值与当前的值以供你比较是否需要更新。这对于是否根据值来渲染额外字段十分有帮助：\n\n```jsx\n<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>\n  {() => {\n    return (\n      <Form.Item name=\"other\">\n        <Input />\n      </Form.Item>\n    );\n  }}\n</Form.Item>\n```\n\n你可以参考[示例](#components-form-demo-control-hooks)查看具体使用场景。\n\n### messageVariables\n\n你可以通过 `messageVariables` 修改 Form.Item 的默认验证信息。\n\n```jsx\n<Form>\n  <Form.Item\n    messageVariables={{ another: 'good' }}\n    label=\"user\"\n    rules={[{ required: true, message: '${another} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n  <Form.Item\n    messageVariables={{ label: 'good' }}\n    label={<span>user</span>}\n    rules={[{ required: true, message: '${label} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n</Form>\n```\n\n## Form.List\n\n为字段提供数组化管理。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 渲染函数 | (fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode | - |  |\n| initialValue | 设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准 | any\\[] | - | 4.9.0 |\n| name | 字段名，支持数组。List 本身也是字段，因而 `getFieldsValue()` 默认会返回 List 下所有值，你可以通过[参数](#getfieldsvalue)改变这一行为 | [NamePath](#namepath) | - |  |\n| rules | 校验规则，仅支持自定义规则。需要配合 [ErrorList](#formerrorlist) 一同使用。 | { validator, message }\\[] | - | 4.7.0 |\n\n```tsx\n<Form.List>\n  {(fields) =>\n    fields.map((field) => (\n      <Form.Item {...field}>\n        <Input />\n      </Form.Item>\n    ))\n  }\n</Form.List>\n```\n\n注意：Form.List 下的字段不应该配置 `initialValue`，你始终应该通过 Form.List 的 `initialValue` 或者 Form 的 `initialValues` 来配置。\n\n## operation\n\nForm.List 渲染表单相关操作函数。\n\n| 参数   | 说明       | 类型                                               | 默认值      | 版本  |\n| ------ | ---------- | -------------------------------------------------- | ----------- | ----- |\n| add    | 新增表单项 | (defaultValue?: any, insertIndex?: number) => void | insertIndex | 4.6.0 |\n| move   | 移动表单项 | (from: number, to: number) => void                 | -           |       |\n| remove | 删除表单项 | (index: number \\| number\\[]) => void               | number\\[]   | 4.5.0 |\n\n## Form.ErrorList\n\n4.7.0 新增。错误展示组件，仅限配合 Form.List 的 rules 一同使用。参考[示例](#components-form-demo-dynamic-form-item)。\n\n| 参数   | 说明     | 类型         | 默认值 |\n| ------ | -------- | ------------ | ------ |\n| errors | 错误列表 | ReactNode\\[] | -      |\n\n## Form.Provider\n\n提供表单间联动功能，其下设置 `name` 的 Form 更新时，会自动触发对应事件。查看[示例](#components-form-demo-form-context)。\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| onFormChange | 子表单字段更新时触发 | function(formName: string, info: { changedFields, forms }) | - |\n| onFormFinish | 子表单提交时触发 | function(formName: string, info: { values, forms }) | - |\n\n```jsx\n<Form.Provider\n  onFormFinish={(name) => {\n    if (name === 'form1') {\n      // Do something...\n    }\n  }}\n>\n  <Form name=\"form1\">...</Form>\n  <Form name=\"form2\">...</Form>\n</Form.Provider>\n```\n\n### FormInstance\n\n| 名称 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| getFieldError | 获取对应字段名的错误信息 | (name: [NamePath](#namepath)) => string\\[] |  |\n| getFieldInstance | 获取对应字段实例 | (name: [NamePath](#namepath)) => any | 4.4.0 |\n| getFieldsError | 获取一组字段名对应的错误信息，返回为数组形式 | (nameList?: [NamePath](#namepath)\\[]) => FieldError\\[] |  |\n| getFieldsValue | 获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 `getFieldsValue(true)` 时返回所有值 | [GetFieldsValue](#getfieldsvalue) |  |\n| getFieldValue | 获取对应字段名的值 | (name: [NamePath](#namepath)) => any |  |\n| isFieldsTouched | 检查一组字段是否被用户操作过，`allTouched` 为 `true` 时检查是否所有字段都被操作过 | (nameList?: [NamePath](#namepath)\\[], allTouched?: boolean) => boolean |  |\n| isFieldTouched | 检查对应字段是否被用户操作过 | (name: [NamePath](#namepath)) => boolean |  |\n| isFieldValidating | 检查对应字段是否正在校验 | (name: [NamePath](#namepath)) => boolean |  |\n| resetFields | 重置一组字段到 `initialValues` | (fields?: [NamePath](#namepath)\\[]) => void |  |\n| scrollToField | 滚动到对应字段位置 | (name: [NamePath](#namepath), options: [ScrollOptions](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)) => void |  |\n| setFields | 设置一组字段状态 | (fields: [FieldData](#fielddata)\\[]) => void |  |\n| setFieldValue | 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入） | (name: [NamePath](#namepath), value: any) => void | 4.22.0 |\n| setFieldsValue | 设置表单的值（该值将直接传入 form store 中并且**重置错误信息**。如果你不希望传入对象被修改，请克隆后传入）。如果你只想修改 Form.List 中单项值，请通过 `setFieldValue` 进行指定 | (values) => void |  |\n| submit | 提交表单，与点击 `submit` 按钮效果相同 | () => void |  |\n| validateFields | 触发表单验证，设置 `recursive` 时会递归校验所有包含的路径 | (nameList?: [NamePath](#namepath)\\[], config?: [ValidateConfig](#validateFields)) => Promise |  |\n\n#### validateFields\n\n```tsx\nexport interface ValidateConfig {\n  // 5.5.0 新增。仅校验内容而不会将错误信息展示到 UI 上。\n  validateOnly?: boolean;\n  // 5.9.0 新增。对提供的 `nameList` 与其子路径进行递归校验。\n  recursive?: boolean;\n  // 5.11.0 新增。校验 dirty 的字段（touched + validated）。\n  // 使用 `dirty` 可以很方便的仅校验用户操作过和被校验过的字段。\n  dirty?: boolean;\n}\n```\n\n返回示例：\n\n```jsx\nvalidateFields()\n  .then((values) => {\n    /*\n  values:\n    {\n      username: 'username',\n      password: 'password',\n    }\n  */\n  })\n  .catch((errorInfo) => {\n    /*\n    errorInfo:\n      {\n        values: {\n          username: 'username',\n          password: 'password',\n        },\n        errorFields: [\n          { name: ['password'], errors: ['Please input your Password!'] },\n        ],\n        outOfDate: false,\n      }\n    */\n  });\n```\n\n## Hooks\n\n### Form.useForm\n\n`type Form.useForm = (): [FormInstance]`\n\n创建 Form 实例，用于管理所有数据状态。\n\n### Form.useFormInstance\n\n`type Form.useFormInstance = (): FormInstance`\n\n`4.20.0` 新增，获取当前上下文正在使用的 Form 实例，常见于封装子组件消费无需透传 Form 实例：\n\n```tsx\nconst Sub = () => {\n  const form = Form.useFormInstance();\n\n  return <Button onClick={() => form.setFieldsValue({})} />;\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form}>\n      <Sub />\n    </Form>\n  );\n};\n```\n\n### Form.useWatch\n\n`type Form.useWatch = (namePath: NamePath | (selector: (values: Store)) => any, formInstance?: FormInstance | WatchOptions): Value`\n\n`5.12.0` 新增 `selector`\n\n用于直接获取 form 中字段对应的值。通过该 Hooks 可以与诸如 `useSWR` 进行联动从而降低维护成本：\n\n```tsx\nconst Demo = () => {\n  const [form] = Form.useForm();\n  const userName = Form.useWatch('username', form);\n\n  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);\n\n  return (\n    <Form form={form}>\n      <Form.Item name=\"username\">\n        <AutoComplete options={options} />\n      </Form.Item>\n    </Form>\n  );\n};\n```\n\n如果你的组件被包裹在 `Form.Item` 内部，你可以省略第二个参数，`Form.useWatch` 会自动找到上层最近的 `FormInstance`。\n\n`useWatch` 默认只监听在 Form 中注册的字段，如果需要监听非注册字段，可以通过配置 `preserve` 进行监听：\n\n```tsx\nconst Demo = () => {\n  const [form] = Form.useForm();\n\n  const age = Form.useWatch('age', { form, preserve: true });\n  console.log(age);\n\n  return (\n    <div>\n      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>\n      <Form form={form}>\n        <Form.Item name=\"name\">\n          <Input />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n```\n\n### Form.Item.useStatus\n\n`type Form.Item.useStatus = (): { status: ValidateStatus | undefined, errors: ReactNode[], warnings: ReactNode[] }`\n\n`4.22.0` 新增，可用于获取当前 Form.Item 的校验状态，如果上层没有 Form.Item，`status` 将会返回 `undefined`。`5.4.0` 新增 `errors` 和 `warnings`，可用于获取当前 Form.Item 的错误信息和警告信息：\n\n```tsx\nconst CustomInput = ({ value, onChange }) => {\n  const { status, errors } = Form.Item.useStatus();\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      className={`custom-input-${status}`}\n      placeholder={(errors.length && errors[0]) || ''}\n    />\n  );\n};\n\nexport default () => (\n  <Form>\n    <Form.Item name=\"username\">\n      <CustomInput />\n    </Form.Item>\n  </Form>\n);\n```\n\n#### 与其他获取数据的方式的区别\n\nForm 仅会对变更的 Field 进行刷新，从而避免完整的组件刷新可能引发的性能问题。因而你无法在 render 阶段通过 `form.getFieldsValue` 来实时获取字段值，而 `useWatch` 提供了一种特定字段访问的方式，从而使得在当前组件中可以直接消费字段的值。同时，如果为了更好的渲染性能，你可以通过 Field 的 renderProps 仅更新需要更新的部分。而当当前组件更新或者 effect 都不需要消费字段值时，则可以通过 `onValuesChange` 将数据抛出，从而避免组件更新。\n\n### Interface\n\n#### NamePath\n\n`string | number | (string | number)[]`\n\n#### GetFieldsValue\n\n`getFieldsValue` 提供了多种重载方法：\n\n##### getFieldsValue(nameList?: true | [NamePath](#namepath)\\[], filterFunc?: FilterFunc)\n\n当不提供 `nameList` 时，返回所有注册字段，这也包含 List 下所有的值（即便 List 下没有绑定 Item）。\n\n当 `nameList` 为 `true` 时，返回 store 中所有的值，包含未注册字段。例如通过 `setFieldsValue` 设置了不存在的 Item 的值，也可以通过 `true` 全部获取。\n\n当 `nameList` 为数组时，返回规定路径的值。需要注意的是，`nameList` 为嵌套数组。例如你需要某路径值应该如下：\n\n```tsx\n// 单个路径\nform.getFieldsValue([['user', 'age']]);\n\n// 多个路径\nform.getFieldsValue([\n  ['user', 'age'],\n  ['preset', 'account'],\n]);\n```\n\n##### getFieldsValue({ strict?: boolean, filter?: FilterFunc })\n\n`5.8.0` 新增接受配置参数。当 `strict` 为 `true` 时会仅匹配 Item 的值。例如 `{ list: [{ bamboo: 1, little: 2 }] }` 中，如果 List 仅绑定了 `bamboo` 字段，那么 `getFieldsValue({ strict: true })` 会只获得 `{ list: [{ bamboo: 1 }] }`。\n\n#### FilterFunc\n\n用于过滤一些字段值，`meta` 会返回字段相关信息。例如可以用来获取仅被用户修改过的值等等。\n\n```tsx\ntype FilterFunc = (meta: { touched: boolean; validating: boolean }) => boolean;\n```\n\n#### FieldData\n\n| 名称       | 说明             | 类型                     |\n| ---------- | ---------------- | ------------------------ |\n| errors     | 错误信息         | string\\[]                |\n| warnings   | 警告信息         | string\\[]                |\n| name       | 字段名称         | [NamePath](#namepath)\\[] |\n| touched    | 是否被用户操作过 | boolean                  |\n| validating | 是否正在校验     | boolean                  |\n| value      | 字段对应值       | any                      |\n\n#### Rule\n\nRule 支持接收 object 进行配置，也支持 function 来动态获取 form 的数据：\n\n```tsx\ntype Rule = RuleConfig | ((form: FormInstance) => RuleConfig);\n```\n\n| 名称 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| defaultField | 仅在 `type` 为 `array` 类型时有效，用于指定数组元素的校验规则 | [rule](#rule) |  |\n| enum | 是否匹配枚举中的值（需要将 `type` 设置为 `enum`） | any\\[] |  |\n| fields | 仅在 `type` 为 `array` 或 `object` 类型时有效，用于指定子元素的校验规则 | Record&lt;string, [rule](#rule)> |  |\n| len | string 类型时为字符串长度；number 类型时为确定数字； array 类型时为数组长度 | number |  |\n| max | 必须设置 `type`：string 类型为字符串最大长度；number 类型时为最大值；array 类型时为数组最大长度 | number |  |\n| message | 错误信息，不设置时会通过[模板](#validatemessages)自动生成 | string |  |\n| min | 必须设置 `type`：string 类型为字符串最小长度；number 类型时为最小值；array 类型时为数组最小长度 | number |  |\n| pattern | 正则表达式匹配 | RegExp |  |\n| required | 是否为必选字段 | boolean |  |\n| transform | 将字段值转换成目标值后进行校验 | (value) => any |  |\n| type | 类型，常见有 `string` \\|`number` \\|`boolean` \\|`url` \\| `email`。更多请参考[此处](https://github.com/yiminghe/async-validator#type) | string |  |\n| validateTrigger | 设置触发验证时机，必须是 Form.Item 的 `validateTrigger` 的子集 | string \\| string\\[] |  |\n| validator | 自定义校验，接收 Promise 作为返回值。[示例](#components-form-demo-register)参考 | ([rule](#rule), value) => Promise |  |\n| warningOnly | 仅警告，不阻塞表单提交 | boolean | 4.17.0 |\n| whitespace | 如果字段仅包含空格则校验不通过，只在 `type: 'string'` 时生效 | boolean |  |\n\n#### WatchOptions\n\n| 名称     | 说明                                  | 类型         | 默认值                 | 版本  |\n| -------- | ------------------------------------- | ------------ | ---------------------- | ----- |\n| form     | 指定 Form 实例                        | FormInstance | 当前 context 中的 Form | 5.4.0 |\n| preserve | 是否监视没有对应的 `Form.Item` 的字段 | boolean      | false                  | 5.4.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Form\"></ComponentTokenTable>\n\n## FAQ\n\n### Switch、Checkbox 为什么不能绑定数据？\n\nForm.Item 默认绑定值属性到 `value` 上，而 Switch、Checkbox 等组件的值属性为 `checked`。你可以通过 `valuePropName` 来修改绑定的值属性。\n\n```tsx | pure\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Switch />\n</Form.Item>\n```\n\n### name 为数组时的转换规则？\n\n当 `name` 为数组时，会按照顺序填充路径。当存在数字且 form store 中没有该字段时会自动转变成数组。因而如果需要数组为 key 时请使用 string 如：`['1', 'name']`。\n\n### 为何在 Modal 中调用 form 控制台会报错？\n\n> Warning: Instance created by `useForm` is not connect to any Form element. Forget to pass `form` prop?\n\n这是因为你在调用 form 方法时，Modal 还未初始化导致 form 没有关联任何 Form 组件。你可以通过给 Modal 设置 `forceRender` 将其预渲染。示例点击[此处](https://codesandbox.io/s/antd-reproduction-template-ibu5c)。\n\n### 为什么 Form.Item 下的子组件 `defaultValue` 不生效？\n\n当你为 Form.Item 设置 `name` 属性后，子组件会转为受控模式。因而 `defaultValue` 不会生效。你需要在 Form 上通过 `initialValues` 设置默认值。\n\n### 为什么第一次调用 `ref` 的 Form 为空？\n\n`ref` 仅在节点被加载时才会被赋值，请参考 React 官方文档：<https://reactjs.org/docs/refs-and-the-dom.html#accessing-refs>\n\n### 为什么 `resetFields` 会重新 mount 组件？\n\n`resetFields` 会重置整个 Field，因而其子组件也会重新 mount 从而消除自定义组件可能存在的副作用（例如异步数据、状态等等）。\n\n### Form 的 initialValues 与 Item 的 initialValue 区别？\n\n在大部分场景下，我们总是推荐优先使用 Form 的 `initialValues`。只有存在动态字段时你才应该使用 Item 的 `initialValue`。默认值遵循以下规则：\n\n1. Form 的 `initialValues` 拥有最高优先级\n2. Field 的 `initialValue` 次之 \\*. 多个同 `name` Item 都设置 `initialValue` 时，则 Item 的 `initialValue` 不生效\n\n### 为什么 `getFieldsValue` 在初次渲染的时候拿不到值？\n\n`getFieldsValue` 默认返回收集的字段数据，而在初次渲染时 Form.Item 节点尚未渲染，因而无法收集到数据。你可以通过 `getFieldsValue(true)` 来获取所有字段数据。\n\n### 为什么 `setFieldsValue` 设置字段为 `undefined` 时，有的组件不会重置为空？\n\n在 React 中，`value` 从确定值改为 `undefined` 表示从受控变为非受控，因而不会重置展示值（但是 Form 中的值确实已经改变）。你可以通过 HOC 改变这一逻辑：\n\n```jsx\nconst MyInput = ({\n  // 强制保持受控逻辑\n  value = '',\n  ...rest\n}) => <input value={value} {...rest} />;\n\n<Form.Item name=\"my\">\n  <MyInput />\n</Form.Item>;\n```\n\n### 为什么字段设置 `rules` 后更改值 `onFieldsChange` 会触发三次？\n\n字段除了本身的值变化外，校验也是其状态之一。因而在触发字段变化会经历以下几个阶段：\n\n1. Trigger value change\n2. Rule validating\n3. Rule validated\n\n在触发过程中，调用 `isFieldValidating` 会经历 `false` > `true` > `false` 的变化过程。\n\n### 为什么 Form.List 不支持 `label` 还需要使用 ErrorList 展示错误？\n\nForm.List 本身是 renderProps，内部样式非常自由。因而默认配置 `label` 和 `error` 节点很难与之配合。如果你需要 antd 样式的 `label`，可以通过外部包裹 Form.Item 来实现。\n\n### 为什么 Form.Item 的 `dependencies` 对 Form.List 下的字段没有效果？\n\nForm.List 下的字段需要包裹 Form.List 本身的 `name`，比如：\n\n```tsx\n<Form.List name=\"users\">\n  {(fields) =>\n    fields.map((field) => (\n      <React.Fragment key={field.key}>\n        <Form.Item name={[field.name, 'name']} {...someRest1} />\n        <Form.Item name={[field.name, 'age']} {...someRest1} />\n      </React.Fragment>\n    ))\n  }\n</Form.List>\n```\n\n依赖则是：`['users', 0, 'name']`\n\n### 为什么 `normalize` 不能是异步方法？\n\nReact 中异步更新会导致受控组件交互行为异常。当用户交互触发 `onChange` 后，通过异步改变值会导致组件 `value` 不会立刻更新，使得组件呈现假死状态。如果你需要异步触发变更，请通过自定义组件实现内部异步状态。\n\n<style>\n.site-form-item-icon {\n  color: rgba(0, 0, 0, 0.25);\n}\n</style>\n\n### `scrollToFirstError` 和 `scrollToField` 失效？\n\n1. 使用了自定义表单控件\n\n类似问题：[#28370](https://github.com/ant-design/ant-design/issues/28370) [#27994](https://github.com/ant-design/ant-design/issues/27994)\n\n滚动依赖于表单控件元素上绑定的 `id` 字段，如果自定义控件没有将 `id` 赋到正确的元素上，这个功能将失效。你可以参考这个 [codesandbox](https://codesandbox.io/s/antd-reproduction-template-forked-25nul?file=/index.js)。\n\n2. 页面内有多个表单\n\n页面内如果有多个表单，且存在表单项 `name` 重复，表单滚动定位可能会查找到另一个表单的同名表单项上。需要给表单 `Form` 组件设置不同的 `name` 以区分。\n\n### 继上，为何不通过 `ref` 绑定元素？\n\n当自定义组件不支持 `ref` 时，Form 无法获取子元素真实 DOM 节点，而通过包裹 Class Component 调用 `findDOMNode` 会在 React Strict Mode 下触发警告。因而我们使用 id 来进行元素定位。\n\n### `setFieldsValue` 不会触发 `onFieldsChange` 和 `onValuesChange`？\n\n是的，change 事件仅当用户交互才会触发。该设计是为了防止在 change 事件中调用 `setFieldsValue` 导致的循环问题。如果仅仅需要组件内消费，可以通过 `useWatch` 或者 `Field.renderProps` 来实现。\n\n### 为什么 Form.Item 嵌套子组件后，不更新表单值？\n\nForm.Item 在渲染时会注入 `value` 与 `onChange` 事件给子元素，当你的字段组件被包裹时属性将无法传递。所以以下代码是不会生效的：\n\n```jsx\n<Form.Item name=\"input\">\n  <div>\n    <h3>I am a wrapped Input</h3>\n    <Input />\n  </div>\n</Form.Item>\n```\n\n你可以通过 HOC 自定义组件形式来解决这个问题：\n\n```jsx\nconst MyInput = (props) => (\n  <div>\n    <h3>I am a wrapped Input</h3>\n    <Input {...props} />\n  </div>\n);\n\n<Form.Item name=\"input\">\n  <MyInput />\n</Form.Item>;\n```\n\n### 有更多参考文档吗？\n\n- 你可以阅读[《antd v4 Form 使用心得》](https://zhuanlan.zhihu.com/p/375753910)获得一些使用帮助以及建议。\n- 想在 DatePicker、Switch 也使用 before、after？可以参考[《如何优雅的对 Form.Item 的 children 增加 before、after》](https://zhuanlan.zhihu.com/p/422752055)。\n- 优雅的 Form + Modal 结合使用方案[《如何优雅的使用 Form + Modal》](https://zhuanlan.zhihu.com/p/388222294)。\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Form\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-lcdS5Qm1bsAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ylFATY6w-ygAAAAAAAAAAAAADrJ8AQ/original\n---\n\nHigh performance Form component with data scope management. Including data collection, verification, and styles.\n\n## When to use\n\n- When you need to create an instance or collect information.\n- When you need to validate fields in certain rules.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/control-hooks.tsx\">Form methods</code>\n<code src=\"./demo/layout.tsx\">Form Layout</code>\n<code src=\"./demo/disabled.tsx\">Form disabled</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Form variants</code>\n<code src=\"./demo/required-mark.tsx\">Required style</code>\n<code src=\"./demo/size.tsx\">Form size</code>\n<code src=\"./demo/layout-can-wrap.tsx\">label can wrap</code>\n<code src=\"./demo/warning-only.tsx\">No block rule</code>\n<code src=\"./demo/useWatch.tsx\">Watch Hooks</code>\n<code src=\"./demo/validate-trigger.tsx\">Validate Trigger</code>\n<code src=\"./demo/validate-only.tsx\">Validate Only</code>\n<code src=\"./demo/form-item-path.tsx\">Path Prefix</code>\n<code src=\"./demo/dynamic-form-item.tsx\">Dynamic Form Item</code>\n<code src=\"./demo/dynamic-form-items.tsx\">Dynamic Form nest Items</code>\n<code src=\"./demo/dynamic-form-items-no-style.tsx\" debug>Dynamic Form nest pure Items</code>\n<code src=\"./demo/dynamic-form-items-complex.tsx\">Complex Dynamic Form Item</code>\n<code src=\"./demo/nest-messages.tsx\">Nest</code>\n<code src=\"./demo/complex-form-control.tsx\">complex form control</code>\n<code src=\"./demo/customized-form-controls.tsx\">Customized Form Controls</code>\n<code src=\"./demo/global-state.tsx\">Store Form Data into Upper Component</code>\n<code src=\"./demo/form-context.tsx\">Control between forms</code>\n<code src=\"./demo/inline-login.tsx\">Inline Login Form</code>\n<code src=\"./demo/normal-login.tsx\">Login Form</code>\n<code src=\"./demo/register.tsx\">Registration</code>\n<code src=\"./demo/advanced-search.tsx\">Advanced search</code>\n<code src=\"./demo/form-in-modal.tsx\">Form in Modal to Create</code>\n<code src=\"./demo/time-related-controls.tsx\">Time-related Controls</code>\n<code src=\"./demo/without-form-create.tsx\">Handle Form Data Manually</code>\n<code src=\"./demo/validate-static.tsx\">Customized Validation</code>\n<code src=\"./demo/dynamic-rule.tsx\">Dynamic Rules</code>\n<code src=\"./demo/dependencies.tsx\">Dependencies</code>\n<code src=\"./demo/validate-other.tsx\">Other Form Controls</code>\n<code src=\"./demo/disabled-input-debug.tsx\" debug>Disabled Input Debug</code>\n<code src=\"./demo/label-debug.tsx\" debug>label ellipsis</code>\n<code src=\"./demo/col-24-debug.tsx\" debug>Test col 24 usage</code>\n<code src=\"./demo/ref-item.tsx\" debug>Ref item</code>\n<code src=\"./demo/custom-feedback-icons.tsx\" debug>Custom feedback icons</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Form\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| colon | Configure the default value of `colon` for Form.Item. Indicates whether the colon after the label is displayed (only effective when prop layout is horizontal) | boolean | true |  |\n| disabled | Set form component disable, only available for antd components | boolean | false | 4.21.0 |\n| component | Set the Form rendering element. Do not create a DOM node for `false` | ComponentType \\| false | form |  |\n| fields | Control of form fields through state management (such as redux). Not recommended for non-strong demand. View [example](#components-form-demo-global-state) | [FieldData](#fielddata)\\[] | - |  |\n| form | Form control instance created by `Form.useForm()`. Automatically created when not provided | [FormInstance](#forminstance) | - |  |\n| feedbackIcons | Can be passed custom icons while `Form.Item` element has `hasFeedback` | [FeedbackIcons](#feedbackicons) | - | 5.9.0 |\n| initialValues | Set value by Form initialization or reset | object | - |  |\n| labelAlign | The text align of label of all items | `left` \\| `right` | `right` |  |\n| labelWrap | whether label can be wrap | boolean | false | 4.18.0 |\n| labelCol | Label layout, like `<Col>` component. Set `span` `offset` value like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` | [object](/components/grid/#col) | - |  |\n| layout | Form layout | `horizontal` \\| `vertical` \\| `inline` | `horizontal` |  |\n| name | Form name. Will be the prefix of Field `id` | string | - |  |\n| preserve | Keep field value even when field removed. You can get the preserve field value by `getFieldsValue(true)` | boolean | true | 4.4.0 |\n| requiredMark | Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config | boolean \\| `optional` \\| ((label: ReactNode, info: { required: boolean }) => ReactNode) | true | `renderProps`: 5.9.0 |\n| scrollToFirstError | Auto scroll to first failed field when submit | boolean \\| [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options) | false |  |\n| size | Set field component size (antd components only) | `small` \\| `middle` \\| `large` | - |  |\n| validateMessages | Validation prompt template, description [see below](#validatemessages) | [ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134) | - |  |\n| validateTrigger | Config field validate trigger | string \\| string\\[] | `onChange` | 4.3.0 |\n| variant | Variant of components inside form | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| wrapperCol | The layout for input controls, same as `labelCol` | [object](/components/grid/#col) | - |  |\n| onFieldsChange | Trigger when field updated | function(changedFields, allFields) | - |  |\n| onFinish | Trigger after submitting the form and verifying data successfully | function(values) | - |  |\n| onFinishFailed | Trigger after submitting the form and verifying data failed | function({ values, errorFields, outOfDate }) | - |  |\n| onValuesChange | Trigger when value updated | function(changedValues, allValues) | - |  |\n\n### validateMessages\n\nForm provides [default verification error messages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134). You can modify the template by configuring `validateMessages` property. A common usage is to configure localization:\n\n```jsx\nconst validateMessages = {\n  required: \"'${name}' is required!\",\n  // ...\n};\n\n<Form validateMessages={validateMessages} />;\n```\n\nBesides, [ConfigProvider](/components/config-provider/) also provides a global configuration scheme that allows for uniform configuration error notification templates:\n\n```jsx\nconst validateMessages = {\n  required: \"'${name}' is Required!\",\n  // ...\n};\n\n<ConfigProvider form={{ validateMessages }}>\n  <Form />\n</ConfigProvider>;\n```\n\n## Form.Item\n\nForm field component for data bidirectional binding, validation, layout, and so on.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| colon | Used with `label`, whether to display `:` after label text. | boolean | true |  |\n| dependencies | Set the dependency field. See [below](#dependencies) | [NamePath](#namepath)\\[] | - |  |\n| extra | The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time | ReactNode | - |  |\n| getValueFromEvent | Specify how to get value from event or other onChange arguments | (..args: any\\[]) => any | - |  |\n| getValueProps | Additional props with sub component (It's not recommended to generate dynamic function prop by `getValueProps`. Please pass it to child component directly) | (value: any) => Record<string, any> | - | 4.2.0 |\n| hasFeedback | Used with `validateStatus`, this option specifies the validation status icon. Recommended to be used only with `Input`. Also, It can get feedback icons via icons prop. | boolean \\| { icons: [FeedbackIcons](#feedbackicons) } | false | icons: 5.9.0 |\n| help | The prompt message. If not provided, the prompt message will be generated by the validation rule. | ReactNode | - |  |\n| hidden | Whether to hide Form.Item (still collect and validate value) | boolean | false | 4.4.0 |\n| htmlFor | Set sub label `htmlFor` | string | - |  |\n| initialValue | Config sub default value. Form `initialValues` get higher priority when conflict | string | - | 4.2.0 |\n| label | Label text | ReactNode | - |  |\n| labelAlign | The text align of label | `left` \\| `right` | `right` |  |\n| labelCol | The layout of label. You can set `span` `offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`. You can set `labelCol` on Form which will not affect nest Item. If both exists, use Item first | [object](/components/grid/#col) | - |  |\n| messageVariables | The default validate field info | Record&lt;string, string> | - | 4.7.0 |\n| name | Field name, support array | [NamePath](#namepath) | - |  |\n| normalize | Normalize value from component value before passing to Form instance. Do not support async | (value, prevValue, prevValues) => any | - |  |\n| noStyle | No style for `true`, used as a pure field control. Will inherit parent Form.Item `validateStatus` if self `validateStatus` not configured | boolean | false |  |\n| preserve | Keep field value even when field removed | boolean | true | 4.4.0 |\n| required | Display required style. It will be generated by the validation rule | boolean | false |  |\n| rules | Rules for field validation. Click [here](#components-form-demo-basic) to see an example | [Rule](#rule)\\[] | - |  |\n| shouldUpdate | Custom field update logic. See [below](#shouldupdate) | boolean \\| (prevValue, curValue) => boolean | false |  |\n| tooltip | Config tooltip info | ReactNode \\| [TooltipProps & { icon: ReactNode }](/components/tooltip#api) | - | 4.7.0 |\n| trigger | When to collect the value of children node. Click [here](#components-form-demo-customized-form-controls) to see an example | string | `onChange` |  |\n| validateDebounce | Delay milliseconds to start validation | number | - | 5.9.0 |\n| validateFirst | Whether stop validate on first rule of error for this field. Will parallel validate when `parallel` configured | boolean \\| `parallel` | false | `parallel`: 4.5.0 |\n| validateStatus | The validation status. If not provided, it will be generated by validation rule. options: `success` `warning` `error` `validating` | string | - |  |\n| validateTrigger | When to validate the value of children node | string \\| string\\[] | `onChange` |  |\n| valuePropName | Props of children node, for example, the prop of Switch or Checkbox is `checked`. This prop is an encapsulation of `getValueProps`, which will be invalid after customizing `getValueProps` | string | `value` |  |\n| wrapperCol | The layout for input controls, same as `labelCol`. You can set `wrapperCol` on Form which will not affect nest Item. If both exists, use Item first | [object](/components/grid/#col) | - |  |\n\nAfter wrapped by `Form.Item` with `name` property, `value`(or other property defined by `valuePropName`) `onChange`(or other property defined by `trigger`) props will be added to form controls, the flow of form data will be handled by Form which will cause:\n\n1. You shouldn't use `onChange` on each form control to **collect data**(use `onValuesChange` of Form), but you can still listen to `onChange`.\n2. You cannot set value for each form control via `value` or `defaultValue` prop, you should set default value with `initialValues` of Form. Note that `initialValues` cannot be updated by `setState` dynamically, you should use `setFieldsValue` in that situation.\n3. You shouldn't call `setState` manually, please use `form.setFieldsValue` to change value programmatically.\n\n### dependencies\n\nUsed when there are dependencies between fields. If a field has the `dependencies` prop, this field will automatically trigger updates and validations when upstream is updated. A common scenario is a user registration form with \"password\" and \"confirm password\" fields. The \"Confirm Password\" validation depends on the \"Password\" field. After setting `dependencies`, the \"Password\" field update will re-trigger the validation of \"Check Password\". You can refer [examples](#components-form-demo-dependencies).\n\n`dependencies` shouldn't be used together with `shouldUpdate`, since it may result in conflicting update logic.\n\n### FeedbackIcons\n\n`({ status: ValidateStatus, errors: ReactNode, warnings: ReactNode }) => Record<ValidateStatus, ReactNode>`\n\n### shouldUpdate\n\nForm updates only the modified field-related components for performance optimization purposes by incremental update. In most cases, you only need to write code or do validation with the [`dependencies`](#dependencies) property. In some specific cases, such as when a new field option appears with a field value changed, or you just want to keep some area updating by form update, you can modify the update logic of Form.Item via the `shouldUpdate`.\n\nWhen `shouldUpdate` is `true`, any Form update will cause the Form.Item to be re-rendered. This is very helpful for custom rendering some areas. It should be noted that the child component should be returned in a function, otherwise `shouldUpdate` won't behave correctly:\n\nrelated issue: [#34500](https://github.com/ant-design/ant-design/issues/34500)\n\n```jsx\n<Form.Item shouldUpdate>\n  {() => {\n    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;\n  }}\n</Form.Item>\n```\n\nYou can ref [example](#components-form-demo-horizontal-login) to see detail.\n\nWhen `shouldUpdate` is a function, it will be called by form values update. Providing original values and current value to compare. This is very helpful for rendering additional fields based on values:\n\n```jsx\n<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>\n  {() => {\n    return (\n      <Form.Item name=\"other\">\n        <Input />\n      </Form.Item>\n    );\n  }}\n</Form.Item>\n```\n\nYou can ref [example](#components-form-demo-control-hooks) to see detail.\n\n### messageVariables\n\nYou can modify the default verification information of Form.Item through `messageVariables`.\n\n```jsx\n<Form>\n  <Form.Item\n    messageVariables={{ another: 'good' }}\n    label=\"user\"\n    rules={[{ required: true, message: '${another} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n  <Form.Item\n    messageVariables={{ label: 'good' }}\n    label={<span>user</span>}\n    rules={[{ required: true, message: '${label} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n</Form>\n```\n\n## Form.List\n\nProvides array management for fields.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| children | Render function | (fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode | - |  |\n| initialValue | Config sub default value. Form `initialValues` get higher priority when conflict | any\\[] | - | 4.9.0 |\n| name | Field name, support array. List is also a field, so it will return all the values by `getFieldsValue`. You can change this logic by [config](#getfieldsvalue) | [NamePath](#namepath) | - |  |\n| rules | Validate rules, only support customize validator. Should work with [ErrorList](#formerrorlist) | { validator, message }\\[] | - | 4.7.0 |\n\n```tsx\n<Form.List>\n  {(fields) => (\n    <div>\n      {fields.map((field) => (\n        <Form.Item {...field}>\n          <Input />\n        </Form.Item>\n      ))}\n    </div>\n  )}\n</Form.List>\n```\n\nNote: You should not configure Form.Item `initialValue` under Form.List. It always should be configured by Form.List `initialValue` or Form `initialValues`.\n\n## operation\n\nSome operator functions in render form of Form.List.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| add | add form item | (defaultValue?: any, insertIndex?: number) => void | insertIndex | 4.6.0 |\n| move | move form item | (from: number, to: number) => void | - |  |\n| remove | remove form item | (index: number \\| number\\[]) => void | number\\[] | 4.5.0 |\n\n## Form.ErrorList\n\nNew in 4.7.0. Show error messages, should only work with `rules` of Form.List. See [example](#components-form-demo-dynamic-form-item).\n\n| Property | Description | Type         | Default |\n| -------- | ----------- | ------------ | ------- |\n| errors   | Error list  | ReactNode\\[] | -       |\n\n## Form.Provider\n\nProvide linkage between forms. If a sub form with `name` prop update, it will auto trigger Provider related events. See [example](#components-form-demo-form-context).\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| onFormChange | Triggered when a sub form field updates | function(formName: string, info: { changedFields, forms }) | - |\n| onFormFinish | Triggered when a sub form submits | function(formName: string, info: { values, forms }) | - |\n\n```jsx\n<Form.Provider\n  onFormFinish={(name) => {\n    if (name === 'form1') {\n      // Do something...\n    }\n  }}\n>\n  <Form name=\"form1\">...</Form>\n  <Form name=\"form2\">...</Form>\n</Form.Provider>\n```\n\n### FormInstance\n\n| Name | Description | Type | Version |\n| --- | --- | --- | --- |\n| getFieldError | Get the error messages by the field name | (name: [NamePath](#namepath)) => string\\[] |  |\n| getFieldInstance | Get field instance | (name: [NamePath](#namepath)) => any | 4.4.0 |\n| getFieldsError | Get the error messages by the fields name. Return as an array | (nameList?: [NamePath](#namepath)\\[]) => FieldError\\[] |  |\n| getFieldsValue | Get values by a set of field names. Return according to the corresponding structure. Default return mounted field value, but you can use `getFieldsValue(true)` to get all values | [GetFieldsValue](#getfieldsvalue) |  |\n| getFieldValue | Get the value by the field name | (name: [NamePath](#namepath)) => any |  |\n| isFieldsTouched | Check if fields have been operated. Check if all fields is touched when `allTouched` is `true` | (nameList?: [NamePath](#namepath)\\[], allTouched?: boolean) => boolean |  |\n| isFieldTouched | Check if a field has been operated | (name: [NamePath](#namepath)) => boolean |  |\n| isFieldValidating | Check field if is in validating | (name: [NamePath](#namepath)) => boolean |  |\n| resetFields | Reset fields to `initialValues` | (fields?: [NamePath](#namepath)\\[]) => void |  |\n| scrollToField | Scroll to field position | (name: [NamePath](#namepath), options: \\[[ScrollOptions](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)]) => void |  |\n| setFields | Set fields status | (fields: [FieldData](#fielddata)\\[]) => void |  |\n| setFieldValue | Set fields value(Will directly pass to form store and **reset validation message**. If you do not want to modify passed object, please clone first) | (name: [NamePath](#namepath), value: any) => void | 4.22.0 |\n| setFieldsValue | Set fields value(Will directly pass to form store and **reset validation message**. If you do not want to modify passed object, please clone first). Use `setFieldValue` instead if you want to only config single value in Form.List | (values) => void |  |\n| submit | Submit the form. It's same as click `submit` button | () => void |  |\n| validateFields | Validate fields. Use `recursive` to validate all the field in the path | (nameList?: [NamePath](#namepath)\\[], config?: [ValidateConfig](#validateFields)) => Promise |  |\n\n#### validateFields\n\n```tsx\nexport interface ValidateConfig {\n  // New in 5.5.0. Only validate content and not show error message on UI.\n  validateOnly?: boolean;\n  // New in 5.9.0. Recursively validate the provided `nameList` and its sub-paths.\n  recursive?: boolean;\n  // New in 5.11.0. Validate dirty fields (touched + validated).\n  // It's useful to validate fields only when they are touched or validated.\n  dirty?: boolean;\n}\n```\n\nreturn sample:\n\n```jsx\nvalidateFields()\n  .then((values) => {\n    /*\n  values:\n    {\n      username: 'username',\n      password: 'password',\n    }\n  */\n  })\n  .catch((errorInfo) => {\n    /*\n    errorInfo:\n      {\n        values: {\n          username: 'username',\n          password: 'password',\n        },\n        errorFields: [\n          { name: ['password'], errors: ['Please input your Password!'] },\n        ],\n        outOfDate: false,\n      }\n    */\n  });\n```\n\n## Hooks\n\n### Form.useForm\n\n`type Form.useForm = (): [FormInstance]`\n\nCreate Form instance to maintain data store.\n\n### Form.useFormInstance\n\n`type Form.useFormInstance = (): FormInstance`\n\nAdded in `4.20.0`. Get current context form instance to avoid pass as props between components:\n\n```tsx\nconst Sub = () => {\n  const form = Form.useFormInstance();\n\n  return <Button onClick={() => form.setFieldsValue({})} />;\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form}>\n      <Sub />\n    </Form>\n  );\n};\n```\n\n### Form.useWatch\n\n`type Form.useWatch = (namePath: NamePath | (selector: (values: Store) => any), formInstance?: FormInstance | WatchOptions): Value`\n\n`5.12.0` add `selector`\n\nWatch the value of a field. You can use this to interact with other hooks like `useSWR` to reduce development costs:\n\n```tsx\nconst Demo = () => {\n  const [form] = Form.useForm();\n  const userName = Form.useWatch('username', form);\n\n  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);\n\n  return (\n    <Form form={form}>\n      <Form.Item name=\"username\">\n        <AutoComplete options={options} />\n      </Form.Item>\n    </Form>\n  );\n};\n```\n\nIf your component is wrapped by `Form.Item`, you can omit the second argument, `Form.useWatch` will find the nearest `FormInstance` automatically.\n\nBy default `useWatch` only watches the registered field. If you want to watch the unregistered field, please use `preserve`:\n\n```tsx\nconst Demo = () => {\n  const [form] = Form.useForm();\n\n  const age = Form.useWatch('age', { form, preserve: true });\n  console.log(age);\n\n  return (\n    <div>\n      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>\n      <Form form={form}>\n        <Form.Item name=\"name\">\n          <Input />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n```\n\n### Form.Item.useStatus\n\n`type Form.Item.useStatus = (): { status: ValidateStatus | undefined, errors: ReactNode[], warnings: ReactNode[] }`\n\nAdded in `4.22.0`. Could be used to get validate status of Form.Item. If this hook is not used under Form.Item, `status` would be `undefined`. Added `error` and `warnings` in `5.4.0`, Could be used to get error messages and warning messages of Form.Item:\n\n```tsx\nconst CustomInput = ({ value, onChange }) => {\n  const { status, errors } = Form.Item.useStatus();\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      className={`custom-input-${status}`}\n      placeholder={(errors.length && errors[0]) || ''}\n    />\n  );\n};\n\nexport default () => (\n  <Form>\n    <Form.Item name=\"username\">\n      <CustomInput />\n    </Form.Item>\n  </Form>\n);\n```\n\n#### Difference between other data fetching method\n\nForm only update the Field which changed to avoid full refresh perf issue. Thus you can not get real time value with `getFieldsValue` in render. And `useWatch` will rerender current component to sync with latest value. You can also use Field renderProps to get better performance if only want to do conditional render. If component no need care field value change, you can use `onValuesChange` to give to parent component to avoid current one rerender.\n\n### Interface\n\n#### NamePath\n\n`string | number | (string | number)[]`\n\n#### GetFieldsValue\n\n`getFieldsValue` provides overloaded methods:\n\n##### getFieldsValue(nameList?: true | [NamePath](#namepath)\\[], filterFunc?: FilterFunc)\n\nWhen `nameList` is empty, return all registered fields, including values of List (even if List has no Item children).\n\nWhen `nameList` is `true`, return all values in store, including unregistered fields. For example, if you set the value of an unregistered Item through `setFieldsValue`, you can also get all values through `true`.\n\nWhen `nameList` is an array, return the value of the specified path. Note that `nameList` is a nested array. For example, you need the value of a certain path as follows:\n\n```tsx\n// Single path\nform.getFieldsValue([['user', 'age']]);\n\n// multiple path\nform.getFieldsValue([\n  ['user', 'age'],\n  ['preset', 'account'],\n]);\n```\n\n##### getFieldsValue({ strict?: boolean, filter?: FilterFunc })\n\nNew in `5.8.0`. Accept configuration parameters. When `strict` is `true`, only the value of Item will be matched. For example, in `{ list: [{ bamboo: 1, little: 2 }] }`, if List is only bound to the `bamboo` field, then `getFieldsValue({ strict: true })` will only get `{ list: [{ bamboo: 1 }] }`.\n\n#### FilterFunc\n\nTo filter certain field values, `meta` will provide information related to the fields. For example, it can be used to retrieve values that have only been modified by the user, and so on.\n\n```tsx\ntype FilterFunc = (meta: { touched: boolean; validating: boolean }) => boolean;\n```\n\n#### FieldData\n\n| Name       | Description              | Type                     |\n| ---------- | ------------------------ | ------------------------ |\n| errors     | Error messages           | string\\[]                |\n| warnings   | Warning messages         | string\\[]                |\n| name       | Field name path          | [NamePath](#namepath)\\[] |\n| touched    | Whether is operated      | boolean                  |\n| validating | Whether is in validating | boolean                  |\n| value      | Field value              | any                      |\n\n#### Rule\n\nRule supports a config object, or a function returning config object:\n\n```tsx\ntype Rule = RuleConfig | ((form: FormInstance) => RuleConfig);\n```\n\n| Name | Description | Type | Version |\n| --- | --- | --- | --- |\n| defaultField | Validate rule for all array elements, valid when `type` is `array` | [rule](#rule) |  |\n| enum | Match enum value. You need to set `type` to `enum` to enable this | any\\[] |  |\n| fields | Validate rule for child elements, valid when `type` is `array` or `object` | Record&lt;string, [rule](#rule)> |  |\n| len | Length of string, number, array | number |  |\n| max | `type` required: max length of `string`, `number`, `array` | number |  |\n| message | Error message. Will auto generate by [template](#validatemessages) if not provided | string |  |\n| min | `type` required: min length of `string`, `number`, `array` | number |  |\n| pattern | Regex pattern | RegExp |  |\n| required | Required field | boolean |  |\n| transform | Transform value to the rule before validation | (value) => any |  |\n| type | Normally `string` \\|`number` \\|`boolean` \\|`url` \\| `email`. More type to ref [here](https://github.com/yiminghe/async-validator#type) | string |  |\n| validateTrigger | Set validate trigger event. Must be the sub set of `validateTrigger` in Form.Item | string \\| string\\[] |  |\n| validator | Customize validation rule. Accept Promise as return. See [example](#components-form-demo-register) | ([rule](#rule), value) => Promise |  |\n| warningOnly | Warning only. Not block form submit | boolean | 4.17.0 |\n| whitespace | Failed if only has whitespace, only work with `type: 'string'` rule | boolean |  |\n\n#### WatchOptions\n\n| Name | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| form | Form instance | FormInstance | Current form in context | 5.4.0 |\n| preserve | Whether to watch the field which has no matched `Form.Item` | boolean | false | 5.4.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Form\"></ComponentTokenTable>\n\n## FAQ\n\n### Why can't Switch、Checkbox bind data?\n\nForm.Item default bind value to `value` prop, but Switch or Checkbox value prop is `checked`. You can use `valuePropName` to change bind value prop.\n\n```tsx | pure\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Switch />\n</Form.Item>\n```\n\n### How does `name` fill value when it's an array?\n\n`name` will fill value by array order. When there exists number in it and no related field in form store, it will auto convert field to array. If you want to keep it as object, use string like: `['1', 'name']`.\n\n### Why is there a form warning when used in Modal?\n\n> Warning: Instance created by `useForm` is not connect to any Form element. Forget to pass `form` prop?\n\nBefore Modal opens, children elements do not exist in the view. You can set `forceRender` on Modal to pre-render its children. Click [here](https://codesandbox.io/s/antd-reproduction-template-ibu5c) to view an example.\n\n### Why is component `defaultValue` not working when inside Form.Item?\n\nComponents inside Form.Item with name property will turn into controlled mode, which makes `defaultValue` not work anymore. Please try `initialValues` of Form to set default value.\n\n### Why can not call `ref` of Form at first time?\n\n`ref` only receives the mounted instance. please ref React official doc: <https://reactjs.org/docs/refs-and-the-dom.html#accessing-refs>\n\n### Why will `resetFields` re-mount component?\n\n`resetFields` will re-mount component under Field to clean up customize component side effects (like async data, cached state, etc.). It's by design.\n\n### Difference between Form initialValues and Item initialValue?\n\nIn most case, we always recommend to use Form `initialValues`. Use Item `initialValue` only with dynamic field usage. Priority follows the rules:\n\n1. Form `initialValues` is the first priority\n2. Field `initialValue` is secondary \\*. Does not work when multiple Item with same `name` setting the `initialValue`\n\n### Why can't `getFieldsValue` get value at first render?\n\n`getFieldsValue` returns collected field data by default, but the Form.Item node is not ready at the first render. You can get all field data by `getFieldsValue(true)`.\n\n### Why some component not response with `setFieldsValue` to `undefined`?\n\n`value` change from certain one to `undefined` in React means from controlled mode to uncontrolled mode. Thus it will not change display value but modified FormStore in fact. You can HOC to handle this:\n\n```jsx\nconst MyInput = ({\n  // Force use controlled mode\n  value = '',\n  ...rest\n}) => <input value={value} {...rest} />;\n\n<Form.Item name=\"my\">\n  <MyInput />\n</Form.Item>;\n```\n\n### Why does `onFieldsChange` trigger three times on change when field sets `rules`?\n\nValidating is also part of the value updating. It pass follow steps:\n\n1. Trigger value change\n2. Rule validating\n3. Rule validated\n\nIn each `onFieldsChange`, you will get `false` > `true` > `false` with `isFieldValidating`.\n\n### Why doesn't Form.List support `label` and need ErrorList to show errors?\n\nForm.List use renderProps which mean internal structure is flexible. Thus `label` and `error` can not have best place. If you want to use antd `label`, you can wrap with Form.Item instead.\n\n### Why can't Form.Item `dependencies` work on Form.List field?\n\nYour name path should also contain Form.List `name`:\n\n```tsx\n<Form.List name=\"users\">\n  {(fields) =>\n    fields.map((field) => (\n      <React.Fragment key={field.key}>\n        <Form.Item name={[field.name, 'name']} {...someRest1} />\n        <Form.Item name={[field.name, 'age']} {...someRest1} />\n      </React.Fragment>\n    ))\n  }\n</Form.List>\n```\n\ndependencies should be `['users', 0, 'name']`\n\n### Why doesn't `normalize` support async?\n\nReact can not get correct interaction of controlled component with async value update. When user trigger `onChange`, component will do no response since `value` update is async. If you want to trigger value update async, you should use customize component to handle value state internal and pass sync value control to Form instead.\n\n<style>\n.site-form-item-icon {\n  color: rgba(0, 0, 0, 0.25);\n}\n</style>\n\n### `scrollToFirstError` and `scrollToField` not working?\n\n1. use custom form control\n\nSee similar issues: [#28370](https://github.com/ant-design/ant-design/issues/28370) [#27994](https://github.com/ant-design/ant-design/issues/27994)\n\n`scrollToFirstError` and `scrollToField` deps on `id` attribute passed to form control, please make sure that it hasn't been ignored in your custom form control. Check [codesandbox](https://codesandbox.io/s/antd-reproduction-template-forked-25nul?file=/index.js) for solution.\n\n2. multiple forms on same page\n\nIf there are multiple forms on the page, and there are duplicate same `name` form item, the form scroll probably may find the form item with the same name in another form. You need to set a different `name` for the `Form` component to distinguish it.\n\n### Continue, why not use `ref` to bind element?\n\nForm can not get real DOM node when customize component not support `ref`. It will get warning in React Strict Mode if wrap with Class Component and call `findDOMNode`. So we use `id` to locate element.\n\n### `setFieldsValue` do not trigger `onFieldsChange` or `onValuesChange`?\n\nIt's by design. Only user interactive can trigger the change event. This design is aim to avoid call `setFieldsValue` in change event which may makes loop calling.\n\n### Why Form.Item not update value when children is nest?\n\nForm.Item will inject `value` and `onChange` to children when render. Once your field component is wrapped, props will not pass to the correct node. Follow code will not work as expect:\n\n```jsx\n<Form.Item name=\"input\">\n  <div>\n    <h3>I am a wrapped Input</h3>\n    <Input />\n  </div>\n</Form.Item>\n```\n\nYou can use HOC to solve this problem, don't forget passing props to form control component:\n\n```jsx\nconst MyInput = (props) => (\n  <div>\n    <h3>I am a wrapped Input</h3>\n    <Input {...props} />\n  </div>\n);\n\n<Form.Item name=\"input\">\n  <MyInput />\n</Form.Item>;\n```\n"},"grid":{"zh-CN":"---\ncategory: Components\nsubtitle: 栅格\ngroup: 布局\ntitle: Grid\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*mfJeS6cqZrEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*DLUwQ4B2_zQAAAAAAAAAAAAADrJ8AQ/original\n---\n\n24 栅格系统。\n\n## 设计理念\n\n<div class=\"grid-demo\">\n  <img src=\"https://gw.alipayobjects.com/zos/bmw-prod/9189c9ef-c601-40dc-9960-c11dbb681888.svg\" alt=\"grid design\" />\n</div>\n\n在多数业务情况下，Ant Design 需要在设计区域内解决大量信息收纳的问题，因此在 12 栅格系统的基础上，我们将整个设计建议区域按照 24 等分的原则进行划分。\n\n划分之后的信息区块我们称之为『盒子』。建议横向排列的盒子数量最多四个，最少一个。『盒子』在整个屏幕上占比见上图。设计部分基于盒子的单位定制盒子内部的排版规则，以保证视觉层面的舒适感。\n\n## 概述\n\n布局的栅格化系统，我们是基于行（row）和列（col）来定义信息区块的外部框架，以保证页面的每个区域能够稳健地排布起来。下面简单介绍一下它的工作原理：\n\n- 通过 `row` 在水平方向建立一组 `column`（简写 col）。\n- 你的内容应当放置于 `col` 内，并且，只有 `col` 可以作为 `row` 的直接元素。\n- 栅格系统中的列是指 1 到 24 的值来表示其跨越的范围。例如，三个等宽的列可以使用 `<Col span={8} />` 来创建。\n- 如果一个 `row` 中的 `col` 总和超过 24，那么多余的 `col` 会作为一个整体另起一行排列。\n\n我们的栅格化系统基于 Flex 布局，允许子元素在父节点内的水平对齐方式 - 居左、居中、居右、等宽排列、分散排列。子元素与子元素之间，支持顶部对齐、垂直居中对齐、底部对齐的方式。同时，支持使用 order 来定义元素的排列顺序。\n\n布局是基于 24 栅格来定义每一个『盒子』的宽度，但不拘泥于栅格。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基础栅格</code>\n<code src=\"./demo/gutter.tsx\">区块间隔</code>\n<code src=\"./demo/offset.tsx\">左右偏移</code>\n<code src=\"./demo/sort.tsx\">栅格排序</code>\n<code src=\"./demo/flex.tsx\">排版</code>\n<code src=\"./demo/flex-align.tsx\">对齐</code>\n<code src=\"./demo/flex-order.tsx\">排序</code>\n<code src=\"./demo/flex-stretch.tsx\">Flex 填充</code>\n<code src=\"./demo/responsive.tsx\">响应式布局</code>\n<code src=\"./demo/responsive-more.tsx\">其他属性的响应式</code>\n<code src=\"./demo/playground.tsx\">栅格配置器</code>\n<code src=\"./demo/useBreakpoint.tsx\">useBreakpoint Hook</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\nAnt Design 的布局组件若不能满足你的需求，你也可以直接使用社区的优秀布局组件：\n\n- [react-flexbox-grid](http://roylee0704.github.io/react-flexbox-grid/)\n- [react-blocks](https://github.com/whoisandy/react-blocks/)\n\n### Row\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 垂直对齐方式 | `top` \\| `middle` \\| `bottom` \\| `stretch` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'top' \\| 'middle' \\| 'bottom' \\| 'stretch'}` | `top` | object: 4.24.0 |\n| gutter | 栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 `[水平间距, 垂直间距]` | number \\| object \\| array | 0 |  |\n| justify | 水平排列方式 | `start` \\| `end` \\| `center` \\| `space-around` \\| `space-between` \\| `space-evenly` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'start' \\| 'end' \\| 'center' \\| 'space-around' \\| 'space-between' \\| 'space-evenly'}` | `start` | object: 4.24.0 |\n| wrap | 是否自动换行 | boolean | true | 4.8.0 |\n\n### Col\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| flex | flex 布局属性 | string \\| number | - |  |\n| offset | 栅格左侧的间隔格数，间隔内不可以有栅格 | number | 0 |  |\n| order | 栅格顺序 | number | 0 |  |\n| pull | 栅格向左移动格数 | number | 0 |  |\n| push | 栅格向右移动格数 | number | 0 |  |\n| span | 栅格占位格数，为 0 时相当于 `display: none` | number | - |  |\n| xs | `屏幕 < 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number \\| object | - |  |\n| sm | `屏幕 ≥ 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number \\| object | - |  |\n| md | `屏幕 ≥ 768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number \\| object | - |  |\n| lg | `屏幕 ≥ 992px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number \\| object | - |  |\n| xl | `屏幕 ≥ 1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number \\| object | - |  |\n| xxl | `屏幕 ≥ 1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number \\| object | - |  |\n\n您可以使用 [主题定制](/docs/react/customize-theme-cn) 修改 `screen[XS|SM|MD|LG|XL|XXL]` 来修改断点值（自 5.1.0 起，[codesandbox demo](https://codesandbox.io/s/antd-reproduction-template-forked-dlq3r9?file=/index.js)）。\n\n响应式栅格的断点扩展自 [BootStrap 4 的规则](https://getbootstrap.com/docs/4.0/layout/overview/#responsive-breakpoints)（不包含链接里 `occasionally` 的部分)。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Grid\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Layout\ntitle: Grid\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*mfJeS6cqZrEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*DLUwQ4B2_zQAAAAAAAAAAAAADrJ8AQ/original\n---\n\n24 Grids System.\n\n## Design concept\n\n<div class=\"grid-demo\">\n  <img src=\"https://gw.alipayobjects.com/zos/bmw-prod/9189c9ef-c601-40dc-9960-c11dbb681888.svg\" alt=\"grid design\" />\n</div>\n\nIn most business situations, Ant Design needs to solve a lot of information storage problems within the design area, so based on 12 Grids System, we divided the design area into 24 sections.\n\nWe name the divided area 'box'. We suggest four boxes for horizontal arrangement at most, one at least. Boxes are proportional to the entire screen as shown in the picture above. To ensure a high level of visual comfort, we customize the typography inside of the box based on the box unit.\n\n## Outline\n\nIn the grid system, we define the frame outside the information area based on `row` and `column`, to ensure that every area can have stable arrangement.\n\nFollowing is a brief look at how it works:\n\n- Establish a set of `column` in the horizontal space defined by `row` (abbreviated col).\n- Your content elements should be placed directly in the `col`, and only `col` should be placed directly in `row`.\n- The column grid system is a value of 1-24 to represent its range spans. For example, three columns of equal width can be created by `<Col span={8} />`.\n- If the sum of `col` spans in a `row` are more than 24, then the overflowing `col` as a whole will start a new line arrangement.\n\nOur grid systems base on Flex layout to allow the elements within the parent to be aligned horizontally - left, center, right, wide arrangement, and decentralized arrangement. The Grid system also supports vertical alignment - top aligned, vertically centered, bottom-aligned. You can also define the order of elements by using `order`.\n\nLayout uses a 24 grid layout to define the width of each \"box\", but does not rigidly adhere to the grid layout.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Grid</code>\n<code src=\"./demo/gutter.tsx\">Grid Gutter</code>\n<code src=\"./demo/offset.tsx\">Column offset</code>\n<code src=\"./demo/sort.tsx\">Grid sort</code>\n<code src=\"./demo/flex.tsx\">Typesetting</code>\n<code src=\"./demo/flex-align.tsx\">Alignment</code>\n<code src=\"./demo/flex-order.tsx\">Order</code>\n<code src=\"./demo/flex-stretch.tsx\">Flex Stretch</code>\n<code src=\"./demo/responsive.tsx\">Responsive</code>\n<code src=\"./demo/responsive-more.tsx\">More responsive</code>\n<code src=\"./demo/playground.tsx\">Playground</code>\n<code src=\"./demo/useBreakpoint.tsx\">useBreakpoint Hook</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\nIf the Ant Design grid layout component does not meet your needs, you can use the excellent layout components of the community:\n\n- [react-flexbox-grid](http://roylee0704.github.io/react-flexbox-grid/)\n- [react-blocks](https://github.com/whoisandy/react-blocks/)\n\n### Row\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | Vertical alignment | `top` \\| `middle` \\| `bottom` \\| `stretch` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'top' \\| 'middle' \\| 'bottom' \\| 'stretch'}` | `top` | object: 4.24.0 |\n| gutter | Spacing between grids, could be a number or a object like { xs: 8, sm: 16, md: 24}. Or you can use array to make horizontal and vertical spacing work at the same time `[horizontal, vertical]` | number \\| object \\| array | 0 |  |\n| justify | Horizontal arrangement | `start` \\| `end` \\| `center` \\| `space-around` \\| `space-between` \\| `space-evenly` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'start' \\| 'end' \\| 'center' \\| 'space-around' \\| 'space-between' \\| 'space-evenly'}` | `start` | object: 4.24.0 |\n| wrap | Auto wrap line | boolean | true | 4.8.0 |\n\n### Col\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| flex | Flex layout style | string \\| number | - |  |\n| offset | The number of cells to offset Col from the left | number | 0 |  |\n| order | Raster order | number | 0 |  |\n| pull | The number of cells that raster is moved to the left | number | 0 |  |\n| push | The number of cells that raster is moved to the right | number | 0 |  |\n| span | Raster number of cells to occupy, 0 corresponds to `display: none` | number | none |  |\n| xs | `screen < 576px` and also default setting, could be a `span` value or an object containing above props | number \\| object | - |  |\n| sm | `screen ≥ 576px`, could be a `span` value or an object containing above props | number \\| object | - |  |\n| md | `screen ≥ 768px`, could be a `span` value or an object containing above props | number \\| object | - |  |\n| lg | `screen ≥ 992px`, could be a `span` value or an object containing above props | number \\| object | - |  |\n| xl | `screen ≥ 1200px`, could be a `span` value or an object containing above props | number \\| object | - |  |\n| xxl | `screen ≥ 1600px`, could be a `span` value or an object containing above props | number \\| object | - |  |\n\nYou can modify the breakpoints values using by modifying `screen[XS|SM|MD|LG|XL|XXL]` with [theme customization](/docs/react/customize-theme) (since 5.1.0, [sandbox demo](https://codesandbox.io/s/antd-reproduction-template-forked-dlq3r9?file=/index.js)).\n\nThe breakpoints of responsive grid follow [BootStrap 4 media queries rules](https://getbootstrap.com/docs/4.0/layout/overview/#responsive-breakpoints) (not including `occasionally part`).\n\n## Design Token\n\n<ComponentTokenTable component=\"Grid\"></ComponentTokenTable>\n"},"icon":{"zh-CN":"---\ncategory: Components\nsubtitle: 图标\ndescription: 语义化的矢量图形。\ngroup: 通用\ntitle: Icon\ntoc: false\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*PdAYS7anRpoAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*xEDOTJx2DEkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n## 使用方法\n\n使用图标组件，你需要安装 [@ant-design/icons](https://github.com/ant-design/ant-design-icons) 图标组件包：\n\n<InstallDependencies npm='npm install @ant-design/icons --save' yarn='yarn add @ant-design/icons' pnpm='pnpm install @ant-design/icons --save'></InstallDependencies>\n\n## 设计师专属\n\n安装 [Kitchen Sketch 插件 💎](https://kitchen.alipay.com)，就可以一键拖拽使用 Ant Design 和 Iconfont 的海量图标，还可以关联自有项目。\n\n## 图标列表\n\n<IconSearch></IconSearch>\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/two-tone.tsx\">多色图标</code>\n<code src=\"./demo/custom.tsx\">自定义图标</code>\n<code src=\"./demo/iconfont.tsx\">使用 iconfont.cn</code>\n<code src=\"./demo/scriptUrl.tsx\">使用 iconfont.cn 的多个资源</code>\n\n## API\n\n从 4.0 开始，antd 不再内置 Icon 组件，请使用独立的包 `@ant-design/icons`。\n\n### 通用图标\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 设置图标的样式名 | string | - |  |\n| rotate | 图标旋转角度（IE9 无效） | number | - |  |\n| spin | 是否有旋转动画 | boolean | false |  |\n| style | 设置图标的样式，例如 `fontSize` 和 `color` | CSSProperties | - |  |\n| twoToneColor | 仅适用双色图标。设置双色图标的主要颜色 | string (十六进制颜色) | - |  |\n\n其中我们提供了三种主题的图标，不同主题的 Icon 组件名为图标名加主题做为后缀。\n\n```jsx\nimport { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons';\n\n<StarOutlined />\n<StarFilled />\n<StarTwoTone twoToneColor=\"#eb2f96\" />\n```\n\n### 自定义 Icon\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| component | 控制如何渲染图标，通常是一个渲染根标签为 `<svg>` 的 React 组件 | ComponentType&lt;CustomIconComponentProps> | - |  |\n| rotate | 图标旋转角度（IE9 无效） | number | - |  |\n| spin | 是否有旋转动画 | boolean | false |  |\n| style | 设置图标的样式，例如 `fontSize` 和 `color` | CSSProperties | - |  |\n\n### 关于 SVG 图标\n\n在 `3.9.0` 之后，我们使用了 SVG 图标替换了原先的 font 图标，从而带来了以下优势：\n\n- 完全离线化使用，不需要从 CDN 下载字体文件，图标不会因为网络问题呈现方块，也无需字体文件本地部署。\n- 在低端设备上 SVG 有更好的清晰度。\n- 支持多色图标。\n- 对于内建图标的更换可以提供更多 API，而不需要进行样式覆盖。\n\n更多讨论可参考：[#10353](https://github.com/ant-design/ant-design/issues/10353)。\n\n所有的图标都会以 `<svg>` 标签渲染，可以使用 `style` 和 `className` 设置图标的大小和单色图标的颜色。例如：\n\n```jsx\nimport { MessageOutlined } from '@ant-design/icons';\n\n<MessageOutlined style={{ fontSize: '16px', color: '#08c' }} />;\n```\n\n### 双色图标主色\n\n对于双色图标，可以通过使用 `getTwoToneColor()` 和 `setTwoToneColor(colorString)` 来全局设置图标主色。\n\n```jsx\nimport { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\n\nsetTwoToneColor('#eb2f96');\ngetTwoToneColor(); // #eb2f96\n```\n\n### 自定义 font 图标\n\n在 `3.9.0` 之后，我们提供了一个 `createFromIconfontCN` 方法，方便开发者调用在 [iconfont.cn](http://iconfont.cn/) 上自行管理的图标。\n\n```jsx\nimport React from 'react';\nimport { createFromIconfontCN } from '@ant-design/icons';\nimport ReactDOM from 'react-dom/client';\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // 在 iconfont.cn 上生成\n});\n\nReactDOM.createRoot(mountNode).render(<MyIcon type=\"icon-example\" />);\n```\n\n其本质上是创建了一个使用 `<use>` 标签来渲染图标的组件。\n\noptions 的配置项如下：\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| extraCommonProps | 给所有的 `svg` 图标 `<Icon />` 组件设置额外的属性 | { \\[key: string]: any } | {} |  |\n| scriptUrl | [iconfont.cn](http://iconfont.cn/) 项目在线生成的 js 地址，`@ant-design/icons@4.1.0` 之后支持 `string[]` 类型 | string \\| string\\[] | - |  |\n\n在 `scriptUrl` 都设置有效的情况下，组件在渲染前会自动引入 [iconfont.cn](http://iconfont.cn/) 项目中的图标符号集，无需手动引入。\n\n见 [iconfont.cn 使用帮助](http://iconfont.cn/help/detail?spm=a313x.7781069.1998910419.15&helptype=code) 查看如何生成 js 地址。\n\n### 自定义 SVG 图标\n\n如果使用 `webpack`，可以通过配置 [@svgr/webpack](https://www.npmjs.com/package/@svgr/webpack) 来将 `svg` 图标作为 `React` 组件导入。`@svgr/webpack` 的 `options` 选项请参阅 [svgr 文档](https://github.com/smooth-code/svgr#options)。\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ... other config\n  test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n  use: [\n    {\n      loader: 'babel-loader',\n    },\n    {\n      loader: '@svgr/webpack',\n      options: {\n        babel: false,\n        icon: true,\n      },\n    },\n  ],\n};\n```\n\n```jsx\nimport React from 'react';\nimport Icon from '@ant-design/icons';\nimport MessageSvg from 'path/to/message.svg'; // 你的 '*.svg' 文件路径\nimport ReactDOM from 'react-dom/client';\n\n// in create-react-app:\n// import { ReactComponent as MessageSvg } from 'path/to/message.svg';\n\nReactDOM.createRoot(mountNode).render(<Icon component={MessageSvg} />);\n```\n\n`Icon` 中的 `component` 组件的接受的属性如下：\n\n| 字段      | 说明                    | 类型             | 只读值         | 版本 |\n| --------- | ----------------------- | ---------------- | -------------- | ---- |\n| className | 计算后的 `svg` 类名     | string           | -              |      |\n| fill      | `svg` 元素填充的颜色    | string           | `currentColor` |      |\n| height    | `svg` 元素高度          | string \\| number | `1em`          |      |\n| style     | 计算后的 `svg` 元素样式 | CSSProperties    | -              |      |\n| width     | `svg` 元素宽度          | string \\| number | `1em`          |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Icon\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: General\ntitle: Icon\ndescription: Semantic vector graphics.\ntoc: false\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*PdAYS7anRpoAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*xEDOTJx2DEkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n## How to use\n\nBefore use icons, you need to install [@ant-design/icons](https://github.com/ant-design/ant-design-icons) package:\n\n<InstallDependencies npm='npm install @ant-design/icons --save' yarn='yarn add @ant-design/icons' pnpm='pnpm install @ant-design/icons --save'></InstallDependencies>\n\n## List of icons\n\n<IconSearch></IconSearch>\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/two-tone.tsx\">Two-tone icon and colorful icon</code>\n<code src=\"./demo/custom.tsx\">Custom Icon</code>\n<code src=\"./demo/iconfont.tsx\">Use iconfont.cn</code>\n<code src=\"./demo/scriptUrl.tsx\">Multiple resources from iconfont.cn</code>\n\n## API\n\n### Common Icon\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | The className of Icon | string | - |  |\n| rotate | Rotate by n degrees (not working in IE9) | number | - |  |\n| spin | Rotate icon with animation | boolean | false |  |\n| style | The style properties of icon, like `fontSize` and `color` | CSSProperties | - |  |\n| twoToneColor | Only supports the two-tone icon. Specify the primary color | string (hex color) | - |  |\n\nWe still have three different themes for icons, icon component name is the icon name suffixed by the theme name.\n\n```jsx\nimport { StarOutlined, StarFilled, StarTwoTone } from '@ant-design/icons';\n\n<StarOutlined />\n<StarFilled />\n<StarTwoTone twoToneColor=\"#eb2f96\" />\n```\n\n### Custom Icon\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| component | The component used for the root node | ComponentType&lt;CustomIconComponentProps> | - |  |\n| rotate | Rotate degrees (not working in IE9) | number | - |  |\n| spin | Rotate icon with animation | boolean | false |  |\n| style | The style properties of icon, like `fontSize` and `color` | CSSProperties | - |  |\n\n### About SVG icons\n\nWe introduced SVG icons in version `3.9.0`, replacing font icons. This has the following benefits:\n\n- Complete offline usage of icons, without dependency on a CDN-hosted font icon file (No more empty square during downloading and no need to deploy icon font files locally either!)\n- Much more display accuracy on lower-resolution screens\n- The ability to choose icon color\n- No need to change built-in icons with overriding styles by providing more props in component\n\nMore discussion of SVG icon reference at [#10353](https://github.com/ant-design/ant-design/issues/10353).\n\n> ⚠️ Given the extra bundle size caused by all SVG icons imported in 3.9.0, we will provide a new API to allow developers to import icons as needed, you can track [#12011](https://github.com/ant-design/ant-design/issues/12011) for updates.\n>\n> While you wait, you can use [webpack plugin](https://github.com/Beven91/webpack-ant-icon-loader) from the community to chunk the icon file.\n\nThe properties `theme`, `component` and `twoToneColor` were added in `3.9.0`. The best practice is to pass the property `theme` to every `<Icon />` component.\n\n```jsx\nimport { MessageOutlined } from '@ant-design/icons';\n\n<MessageOutlined style={{ fontSize: '16px', color: '#08c' }} />;\n```\n\nAll the icons will render to `<svg>`. You can still set `style` and `className` for size and color of icons.\n\n```jsx\n<Icon type=\"message\" style={{ fontSize: '16px', color: '#08c' }} theme=\"outlined\" />\n```\n\n### Set TwoTone Color\n\nWhen using the two-tone icons, you can use the static methods `getTwoToneColor()` and `setTwoToneColor(colorString)` to specify the primary color.\n\n```jsx\nimport { getTwoToneColor, setTwoToneColor } from '@ant-design/icons';\n\nsetTwoToneColor('#eb2f96');\ngetTwoToneColor(); // #eb2f96\n```\n\n### Custom Font Icon\n\nWe added a `createFromIconfontCN` function to help developer use their own icons deployed at [iconfont.cn](http://iconfont.cn/) in a convenient way.\n\n> This method is specified for [iconfont.cn](http://iconfont.cn/).\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js', // generate in iconfont.cn\n});\n\nReactDOM.createRoot(mountNode).render(<MyIcon type=\"icon-example\" />);\n```\n\nIt creates a component that uses SVG sprites in essence.\n\nThe following options are available:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| extraCommonProps | Define extra properties to the component | { \\[key: string]: any } | {} |  |\n| scriptUrl | The URL generated by [iconfont.cn](http://iconfont.cn/) project. Support `string[]` after `@ant-design/icons@4.1.0` | string \\| string\\[] | - |  |\n\nThe property `scriptUrl` should be set to import the SVG sprite symbols.\n\nSee [iconfont.cn documents](http://iconfont.cn/help/detail?spm=a313x.7781069.1998910419.15&helptype=code) to learn about how to generate `scriptUrl`.\n\n### Custom SVG Icon\n\nYou can import SVG icon as a react component by using `webpack` and [`@svgr/webpack`](https://www.npmjs.com/package/@svgr/webpack). `@svgr/webpack`'s `options` [reference](https://github.com/smooth-code/svgr#options).\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ... other config\n  test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,\n  use: [\n    {\n      loader: 'babel-loader',\n    },\n    {\n      loader: '@svgr/webpack',\n      options: {\n        babel: false,\n        icon: true,\n      },\n    },\n  ],\n};\n```\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Icon from '@ant-design/icons';\nimport MessageSvg from 'path/to/message.svg'; // path to your '*.svg' file.\n// in create-react-app:\n// import { ReactComponent as MessageSvg } from 'path/to/message.svg';\n\nReactDOM.createRoot(mountNode).render(<Icon component={MessageSvg} />);\n```\n\nThe following properties are available for the component:\n\n| Property | Description | Type | Readonly | Version |\n| --- | --- | --- | --- | --- |\n| className | The computed class name of the `svg` element | string | - |  |\n| fill | Define the color used to paint the `svg` element | string | `currentColor` |  |\n| height | The height of the `svg` element | string \\| number | `1em` |  |\n| style | The computed style of the `svg` element | CSSProperties | - |  |\n| width | The width of the `svg` element | string \\| number | `1em` |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Icon\"></ComponentTokenTable>\n"},"image":{"zh-CN":"---\ncategory: Components\nsubtitle: 图片\ngroup: 数据展示\ntitle: Image\ncols: 2\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*FbOCS6aFMeUAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*LVQ3R5JjjJEAAAAAAAAAAAAADrJ8AQ/original\n---\n\n可预览的图片。\n\n## 何时使用\n\n- 需要展示图片时使用。\n- 加载显示大图或加载失败时容错处理。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/fallback.tsx\">容错处理</code>\n<code src=\"./demo/placeholder.tsx\">渐进加载</code>\n<code src=\"./demo/preview-group.tsx\">多张图片预览</code>\n<code src=\"./demo/preview-group-visible.tsx\">相册模式</code>\n<code src=\"./demo/previewSrc.tsx\">自定义预览图片</code>\n<code src=\"./demo/controlled-preview.tsx\">受控的预览</code>\n<code src=\"./demo/toolbarRender.tsx\">自定义工具栏</code>\n<code src=\"./demo/imageRender.tsx\">自定义预览内容</code>\n<code src=\"./demo/preview-mask.tsx\" debug>自定义预览文本</code>\n<code src=\"./demo/nested.tsx\">嵌套</code>\n<code src=\"./demo/preview-group-top-progress.tsx\" debug>多图预览时顶部进度自定义</code>\n<code src=\"./demo/component-token.tsx\" debug>自定义组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Image\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| alt | 图像描述 | string | - | 4.6.0 |\n| fallback | 加载失败容错地址 | string | - | 4.6.0 |\n| height | 图像高度 | string \\| number | - | 4.6.0 |\n| placeholder | 加载占位，为 `true` 时使用默认占位 | ReactNode | - | 4.6.0 |\n| preview | 预览参数，为 `false` 时禁用 | boolean \\| [PreviewType](#previewtype) | true | 4.6.0 [PreviewType](#previewyype):4.7.0 |\n| src | 图片地址 | string | - | 4.6.0 |\n| width | 图像宽度 | string \\| number | - | 4.6.0 |\n| onError | 加载错误回调 | (event: Event) => void | - | 4.12.0 |\n\n其他属性见 [&lt;img>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes)\n\n### PreviewType\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| visible | 是否显示 | boolean | - | - |\n| src | 自定义预览 src | string | - | 4.10.0 |\n| getContainer | 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置 | string \\| HTMLElement \\| (() => HTMLElement) \\| false | - | 4.8.0 |\n| movable | 是否可移动 | boolean | true | 5.8.0 |\n| mask | 缩略图遮罩 | ReactNode | - | 4.9.0 |\n| maskClassName | 缩略图遮罩类名 | string | - | 4.11.0 |\n| rootClassName | 预览图的根 DOM 类名 | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` 为缩放放大的每步倍数 | number | 0.5 | - |\n| minScale | 最小缩放倍数 | number | 1 | 5.7.0 |\n| maxScale | 最大放大倍数 | number | 50 | 5.7.0 |\n| closeIcon | 自定义关闭 Icon | React.ReactNode | - | 5.7.0 |\n| forceRender | 强制渲染预览图 | boolean | - | - |\n| toolbarRender | 自定义工具栏 | (originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' \\| 'total'>) => React.ReactNode | - | 5.7.0 |\n| imageRender | 自定义预览内容 | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype) }) => React.ReactNode | - | 5.7.0 |\n| onTransform | 预览图 transform 变化的回调 | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onVisibleChange | 当 `visible` 发生改变时的回调 | (visible: boolean, prevVisible: boolean) => void | - | - |\n\n## PreviewGroup\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| preview | 预览参数，为 `false` 时禁用 | boolean \\| [PreviewGroupType](#previewgrouptype) | true | 4.6.0 [PreviewGroupType](#previewgrouptype):4.7.0 |\n| items | 预览数组 | string[] \\| { src: string, crossOrigin: string, ... }[] | - | 5.7.0 |\n| fallback | 加载失败容错地址 | string | - | 5.7.0 |\n\n### PreviewGroupType\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| visible | 是否显示 | boolean | - | - |\n| getContainer | 指定预览挂载的节点，但依旧为全屏展示，false 为挂载在当前位置 | string \\| HTMLElement \\| (() => HTMLElement) \\| false | - | 4.8.0 |\n| movable | 是否可移动 | boolean | true | 5.8.0 |\n| current | 当前预览图的 index | number | - | 4.12.0 |\n| mask | 缩略图遮罩 | ReactNode | - | 4.9.0 |\n| maskClassName | 缩略图遮罩类名 | string | - | 4.11.0 |\n| rootClassName | 预览图的根 DOM 类名 | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` 为缩放放大的每步倍数 | number | 0.5 | - |\n| minScale | 最小缩放倍数 | number | 1 | 5.7.0 |\n| maxScale | 最大放大倍数 | number | 50 | 5.7.0 |\n| closeIcon | 自定义关闭 Icon | React.ReactNode | - | 5.7.0 |\n| forceRender | 强制渲染预览图 | boolean | - | - |\n| countRender | 自定义预览计数内容 | (current: number, total: number) => React.ReactNode | - | 4.20.0 |\n| toolbarRender | 自定义工具栏 | (originalNode: React.ReactElement, info: [ToolbarRenderInfoType](#toolbarrenderinfotype)) => React.ReactNode | - | 5.7.0 |\n| imageRender | 自定义预览内容 | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), current: number }) => React.ReactNode | - | 5.7.0 |\n| onTransform | 预览图 transform 变化的回调 | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onChange | 切换预览图的回调 | (current: number, prevCurrent: number) => void | - | 5.3.0 |\n| onVisibleChange | 当 `visible` 发生改变时的回调 | (visible: boolean, prevVisible: boolean, current: number) => void | - | current 参数 5.3.0 |\n\n## Interface\n\n### TransformType\n\n```typescript\n{\n  x: number;\n  y: number;\n  rotate: number;\n  scale: number;\n  flipX: boolean;\n  flipY: boolean;\n}\n```\n\n### TransformAction\n\n```typescript\ntype TransformAction =\n  | 'flipY'\n  | 'flipX'\n  | 'rotateLeft'\n  | 'rotateRight'\n  | 'zoomIn'\n  | 'zoomOut'\n  | 'close'\n  | 'prev'\n  | 'next'\n  | 'wheel'\n  | 'doubleClick'\n  | 'move'\n  | 'dragRebound';\n```\n\n### ToolbarRenderInfoType\n\n```typescript\n{\n  icons: {\n    flipYIcon: React.ReactNode;\n    flipXIcon: React.ReactNode;\n    rotateLeftIcon: React.ReactNode;\n    rotateRightIcon: React.ReactNode;\n    zoomOutIcon: React.ReactNode;\n    zoomInIcon: React.ReactNode;\n  };\n  actions: {\n    onFlipY: () => void;\n    onFlipX: () => void;\n    onRotateLeft: () => void;\n    onRotateRight: () => void;\n    onZoomOut: () => void;\n    onZoomIn: () => void;\n  };\n  transform: TransformType,\n  current: number;\n  total: number;\n}\n```\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Image\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Image\ncols: 2\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*FbOCS6aFMeUAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*LVQ3R5JjjJEAAAAAAAAAAAAADrJ8AQ/original\n---\n\nPreviewable image.\n\n## When To Use\n\n- When you need to display pictures.\n- Display when loading a large image or fault tolerant handling when loading fail.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/fallback.tsx\">Fault tolerant</code>\n<code src=\"./demo/placeholder.tsx\">Progressive Loading</code>\n<code src=\"./demo/preview-group.tsx\">Multiple image preview</code>\n<code src=\"./demo/preview-group-visible.tsx\">Preview from one image</code>\n<code src=\"./demo/previewSrc.tsx\">Custom preview image</code>\n<code src=\"./demo/controlled-preview.tsx\">Controlled Preview</code>\n<code src=\"./demo/toolbarRender.tsx\">Custom toolbar render</code>\n<code src=\"./demo/imageRender.tsx\">Custom preview render</code>\n<code src=\"./demo/preview-mask.tsx\" debug>Custom preview mask</code>\n<code src=\"./demo/nested.tsx\">nested</code>\n<code src=\"./demo/preview-group-top-progress.tsx\" debug>Top progress customization when previewing multiple images</code>\n<code src=\"./demo/component-token.tsx\" debug>Custom component token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Image\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| alt | Image description | string | - | 4.6.0 |\n| fallback | Load failure fault-tolerant src | string | - | 4.6.0 |\n| height | Image height | string \\| number | - | 4.6.0 |\n| placeholder | Load placeholder, use default placeholder when set `true` | ReactNode | - | 4.6.0 |\n| preview | preview config, disabled when `false` | boolean \\| [PreviewType](#previewtype) | true | 4.6.0 [PreviewType](#previewtype):4.7.0 |\n| src | Image path | string | - | 4.6.0 |\n| width | Image width | string \\| number | - | 4.6.0 |\n| onError | Load failed callback | (event: Event) => void | - | 4.12.0 |\n\nOther attributes [&lt;img>](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#Attributes)\n\n### PreviewType\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| visible | Whether the preview dialog is visible or not | boolean | - | - |\n| src | Custom preview src | string | - | 4.10.0 |\n| getContainer | The mounted node for preview dialog but still display at fullScreen | string \\| HTMLElement \\| (() => HTMLElement) \\| false | - | 4.8.0 |\n| movable | whether can be moved | boolean | true | 5.8.0 |\n| mask | Thumbnail mask | ReactNode | - | 4.9.0 |\n| maskClassName | The className of the mask | string | - | 4.11.0 |\n| rootClassName | The classname of the preview root DOM | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` is the step to increase or decrease the scale | number | 0.5 | - |\n| minScale | Min scale | number | 1 | 5.7.0 |\n| maxScale | Max scale | number | 50 | 5.7.0 |\n| closeIcon | Custom close icon | React.ReactNode | - | 5.7.0 |\n| forceRender | Force render preview dialog | boolean | - | - |\n| toolbarRender | Custom toolbar render | (originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' \\| 'total'>) => React.ReactNode | - | 5.7.0 |\n| imageRender | Custom preview content | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype) }) => React.ReactNode | - | 5.7.0 |\n| onTransform | Callback when the transform of image changed | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onVisibleChange | Callback when `visible` changed | (visible: boolean, prevVisible: boolean) => void | - | - |\n\n## PreviewGroup\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| preview | Preview config, `disabled` when false | boolean \\| [PreviewGroupType](#previewgrouptype) | true | 4.6.0 [PreviewGroupType](#previewgrouptype):4.7.0 |\n| items | Preview items | string[] \\| { src: string, crossOrigin: string, ... }[] | - | 5.7.0 |\n| fallback | Load failure fault-tolerant src | string | - | 5.7.0 |\n\n### PreviewGroupType\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| visible | Whether the preview dialog is visible or not | boolean | - | - |\n| getContainer | The mounted node for preview dialog but still display at fullScreen | string \\| HTMLElement \\| (() => HTMLElement) \\| false | - | 4.8.0 |\n| movable | whether can be moved | boolean | true | 5.8.0 |\n| current | The index of the current preview | number | - | 4.12.0 |\n| mask | Thumbnail mask | ReactNode | - | 4.9.0 |\n| maskClassName | The className of the mask | string | - | 4.11.0 |\n| rootClassName | The classname of the preview root DOM | string | - | 5.4.0 |\n| scaleStep | `1 + scaleStep` is the step to increase or decrease the scale | number | 0.5 | - |\n| minScale | Min scale | number | 1 | 5.7.0 |\n| maxScale | Max scale | number | 50 | 5.7.0 |\n| closeIcon | Custom close icon | React.ReactNode | - | 5.7.0 |\n| forceRender | Force render preview dialog | boolean | - | - |\n| countRender | Custom preview count content | (current: number, total: number) => React.ReactNode | - | 4.20.0 |\n| toolbarRender | Custom toolbar render | (originalNode: React.ReactElement, info: [ToolbarRenderInfoType](#toolbarrenderinfotype)) => React.ReactNode | - | 5.7.0 |\n| imageRender | Custom preview content | (originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), current: number }) => React.ReactNode | - | 5.7.0 |\n| onTransform | Callback when the transform of image changed | { transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) } | - | 5.7.0 |\n| onChange | Callback when switch preview image | (current: number, prevCurrent: number) => void | - | 5.3.0 |\n| onVisibleChange | Callback when `visible` changed | (visible: boolean, prevVisible: boolean, current: number) => void | - | current Property 5.3.0 |\n\n## Interface\n\n### TransformType\n\n```typescript\n{\n  x: number;\n  y: number;\n  rotate: number;\n  scale: number;\n  flipX: boolean;\n  flipY: boolean;\n}\n```\n\n### TransformAction\n\n```typescript\ntype TransformAction =\n  | 'flipY'\n  | 'flipX'\n  | 'rotateLeft'\n  | 'rotateRight'\n  | 'zoomIn'\n  | 'zoomOut'\n  | 'close'\n  | 'prev'\n  | 'next'\n  | 'wheel'\n  | 'doubleClick'\n  | 'move'\n  | 'dragRebound';\n```\n\n### ToolbarRenderInfoType\n\n```typescript\n{\n  icons: {\n    flipYIcon: React.ReactNode;\n    flipXIcon: React.ReactNode;\n    rotateLeftIcon: React.ReactNode;\n    rotateRightIcon: React.ReactNode;\n    zoomOutIcon: React.ReactNode;\n    zoomInIcon: React.ReactNode;\n  };\n  actions: {\n    onFlipY: () => void;\n    onFlipX: () => void;\n    onRotateLeft: () => void;\n    onRotateRight: () => void;\n    onZoomOut: () => void;\n    onZoomIn: () => void;\n  };\n  transform: TransformType,\n  current: number;\n  total: number;\n}\n```\n\n## Design Token\n\n<ComponentTokenTable component=\"Image\"></ComponentTokenTable>\n"},"input-number":{"zh-CN":"---\ncategory: Components\nsubtitle: 数字输入框\ngroup: 数据录入\ntitle: InputNumber\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JvWbSYhuNlIAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*1uH-R5kLAMIAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n通过鼠标或键盘，输入范围内的数值。\n\n## 何时使用\n\n当需要获取标准数值时。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/size.tsx\">三种大小</code>\n<code src=\"./demo/addon.tsx\">前置/后置标签</code>\n<code src=\"./demo/disabled.tsx\">不可用</code>\n<code src=\"./demo/digit.tsx\">高精度小数</code>\n<code src=\"./demo/formatter.tsx\">格式化展示</code>\n<code src=\"./demo/keyboard.tsx\">键盘行为</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">形态变体</code>\n<code src=\"./demo/filled-debug.tsx\" debug>Filled Debug</code>\n<code src=\"./demo/out-of-range.tsx\">超出边界</code>\n<code src=\"./demo/prefix.tsx\">前缀</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/controls.tsx\" debug>图标按钮</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/debug-token.tsx\" debug>覆盖组件样式</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| addonAfter | 带标签的 input，设置后置标签 | ReactNode | - | 4.17.0 |\n| addonBefore | 带标签的 input，设置前置标签 | ReactNode | - | 4.17.0 |\n| autoFocus | 自动获取焦点 | boolean | false | - |\n| changeOnBlur | 是否在失去焦点时，触发 `onChange` 事件（例如值超出范围时，重新限制回范围并触发事件） | boolean | true | 5.11.0 |\n| controls | 是否显示增减按钮，也可设置自定义箭头图标 | boolean \\| { upIcon?: React.ReactNode; downIcon?: React.ReactNode; } | - | 4.19.0 |\n| decimalSeparator | 小数点 | string | - | - |\n| placeholder | 占位符 | string | - |  |\n| defaultValue | 初始值 | number | - | - |\n| disabled | 禁用 | boolean | false | - |\n| formatter | 指定输入框展示值的格式 | function(value: number \\| string, info: { userTyping: boolean, input: string }): string | - | info: 4.17.0 |\n| keyboard | 是否启用键盘快捷行为 | boolean | true | 4.12.0 |\n| max | 最大值 | number | [Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) | - |\n| min | 最小值 | number | [Number.MIN_SAFE_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) | - |\n| parser | 指定从 `formatter` 里转换回数字的方式，和 `formatter` 搭配使用 | function(string): number | - | - |\n| precision | 数值精度，配置 `formatter` 时会以 `formatter` 为准 | number | - | - |\n| readOnly | 只读 | boolean | false | - |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| prefix | 带有前缀图标的 input | ReactNode | - | 4.17.0 |\n| size | 输入框大小 | `large` \\| `middle` \\| `small` | - | - |\n| step | 每次改变步数，可以为小数 | number \\| string | 1 | - |\n| stringMode | 字符值模式，开启后支持高精度小数。同时 `onChange` 将返回 string 类型 | boolean | false | 4.13.0 |\n| value | 当前值 | number | - | - |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| wheel | 是否允许滚轮滑动更改数值 | boolean | false | - |\n| onChange | 变化回调 | function(value: number \\| string \\| null) | - | - |\n| onPressEnter | 按下回车的回调 | function(e) | - | - |\n| onStep | 点击上下箭头的回调 | (value: number, info: { offset: number, type: 'up' \\| 'down' }) => void | - | 4.7.0 |\n\n## 方法\n\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"InputNumber\"></ComponentTokenTable>\n\n## FAQ\n\n### 为何受控模式下，`value` 可以超出 `min` 和 `max` 范围？\n\n在受控模式下，开发者可能自行存储相关数据。如果组件将数据约束回范围内，会导致展示数据与实际存储数据不一致的情况。这使得一些如表单场景存在潜在的数据问题。\n\n### 为何动态修改 `min` 和 `max` 让 `value` 超出范围不会触发 `onChange` 事件？\n\n`onChange` 事件为用户触发事件，自行触发会导致表单库误以为变更来自用户操作。我们以错误样式展示超出范围的数值。\n\n### 为何 `onBlur` 等事件获取不到正确的 value？\n\nInputNumber 的值由内部逻辑封装而成，通过 `onBlur` 等事件获取的 `event.target.value` 仅为 DOM 元素的 `value` 而非 InputNumber 的实际值。例如通过 `formatter` 或者 `decimalSeparator` 更改展示格式，DOM 中得到的就是格式化后的字符串。你总是应该通过 `onChange` 获取当前值。\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: InputNumber\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JvWbSYhuNlIAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*1uH-R5kLAMIAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nEnter a number within certain range with the mouse or keyboard.\n\n## When To Use\n\nWhen a numeric value needs to be provided.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/size.tsx\">Sizes</code>\n<code src=\"./demo/addon.tsx\">Pre / Post tab</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/digit.tsx\">High precision decimals</code>\n<code src=\"./demo/formatter.tsx\">Formatter</code>\n<code src=\"./demo/keyboard.tsx\">Keyboard</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n<code src=\"./demo/filled-debug.tsx\" debug>Filled Debug</code>\n<code src=\"./demo/out-of-range.tsx\">Out of range</code>\n<code src=\"./demo/prefix.tsx\">Prefix</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/controls.tsx\" debug>Icon</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/debug-token.tsx\" debug>Override Component Style</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| addonAfter | The label text displayed after (on the right side of) the input field | ReactNode | - |  |\n| addonBefore | The label text displayed before (on the left side of) the input field | ReactNode | - |  |\n| autoFocus | If get focus when component mounted | boolean | false | - |\n| changeOnBlur | Trigger `onChange` when blur. e.g. reset value in range by blur | boolean | true | 5.11.0 |\n| controls | Whether to show `+-` controls, or set custom arrows icon | boolean \\| { upIcon?: React.ReactNode; downIcon?: React.ReactNode; } | - | 4.19.0 |\n| decimalSeparator | Decimal separator | string | - | - |\n| placeholder | placeholder | string | - |  |\n| defaultValue | The initial value | number | - | - |\n| disabled | If disable the input | boolean | false | - |\n| formatter | Specifies the format of the value presented | function(value: number \\| string, info: { userTyping: boolean, input: string }): string | - | info: 4.17.0 |\n| keyboard | If enable keyboard behavior | boolean | true | 4.12.0 |\n| max | The max value | number | [Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) | - |\n| min | The min value | number | [Number.MIN_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER) | - |\n| parser | Specifies the value extracted from formatter | function(string): number | - | - |\n| precision | The precision of input value. Will use `formatter` when config of `formatter` | number | - | - |\n| readOnly | If readonly the input | boolean | false | - |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| prefix | The prefix icon for the Input | ReactNode | - | 4.17.0 |\n| size | The height of input box | `large` \\| `middle` \\| `small` | - | - |\n| step | The number to which the current value is increased or decreased. It can be an integer or decimal | number \\| string | 1 | - |\n| stringMode | Set value as string to support high precision decimals. Will return string value by `onChange` | boolean | false | 4.13.0 |\n| value | The current value | number | - | - |\n| variant | Variants of Input | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| wheel | Allows changing value with mouse wheel | boolean | false | - |\n| onChange | The callback triggered when the value is changed | function(value: number \\| string \\| null) | - | - |\n| onPressEnter | The callback function that is triggered when Enter key is pressed | function(e) | - | - |\n| onStep | The callback function that is triggered when click up or down buttons | (value: number, info: { offset: number, type: 'up' \\| 'down' }) => void | - | 4.7.0 |\n\n## Methods\n\n| Name    | Description  |\n| ------- | ------------ |\n| blur()  | Remove focus |\n| focus() | Get focus    |\n\n## Design Token\n\n<ComponentTokenTable component=\"InputNumber\"></ComponentTokenTable>\n\n## Notes\n\nPer issues [#21158](https://github.com/ant-design/ant-design/issues/21158), [#17344](https://github.com/ant-design/ant-design/issues/17344), [#9421](https://github.com/ant-design/ant-design/issues/9421), and [documentation about inputs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#Using_number_inputs), it appears this community does not support native inclusion of the `type=\"number\"` in the `<Input />` attributes, so please feel free to include it as needed, and be aware that it is heavily suggested that server side validation be utilized, as client side validation can be edited by power users.\n\n## FAQ\n\n### Why `value` can exceed `min` or `max` in control?\n\nDeveloper handle data by their own in control. It will make data out of sync if InputNumber change display value. It also cause potential data issues when use in form.\n\n### Why dynamic change `min` or `max` which makes `value` out of range will not trigger `onChange`?\n\n`onChange` is user trigger event. Auto trigger will makes form lib can not detect data modify source.\n\n### Why `onBlur` or other event can not get correct value?\n\nInputNumber's value is wrapped by internal logic. The `event.target.value` you get from `onBlur` or other event is the DOM element's `value` instead of the actual value of InputNumber. For example, if you change the display format through `formatter` or `decimalSeparator`, you will get the formatted string in the DOM. You should always get the current value through `onChange`.\n"},"input":{"zh-CN":"---\ncategory: Components\nsubtitle: 输入框\ngroup: 数据录入\ntitle: Input\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Y3R0RowXHlAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sBqqTatJ-AkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n通过鼠标或键盘输入内容，是最基础的表单域的包装。\n\n## 何时使用\n\n- 需要用户输入表单域内容时。\n- 提供组合型输入框，带搜索的输入框，还可以进行大小选择。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本使用</code>\n<code src=\"./demo/size.tsx\">三种大小</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">变体</code>\n<code src=\"./demo/filled-debug.tsx\" debug>面性变体 Debug</code>\n<code src=\"./demo/addon.tsx\">前置/后置标签</code>\n<code src=\"./demo/compact-style.tsx\">紧凑模式</code>\n<code src=\"./demo/group.tsx\" debug>输入框组合</code>\n<code src=\"./demo/search-input.tsx\">搜索框</code>\n<code src=\"./demo/search-input-loading.tsx\">搜索框 loading</code>\n<code src=\"./demo/textarea.tsx\">文本域</code>\n<code src=\"./demo/autosize-textarea.tsx\">适应文本高度的文本域</code>\n<code src=\"./demo/tooltip.tsx\">输入时格式化展示</code>\n<code src=\"./demo/presuffix.tsx\">前缀和后缀</code>\n<code src=\"./demo/password-input.tsx\">密码框</code>\n<code src=\"./demo/allowClear.tsx\">带移除图标</code>\n<code src=\"./demo/show-count.tsx\">带字数提示</code>\n<code src=\"./demo/advance-count.tsx\" version=\">= 5.10.0\">定制计数能力</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/focus.tsx\">聚焦</code>\n<code src=\"./demo/borderless-debug.tsx\" debug>Style Debug</code>\n<code src=\"./demo/align.tsx\" debug>文本对齐</code>\n<code src=\"./demo/textarea-resize.tsx\" debug>文本域</code>\n<code src=\"./demo/debug-addon.tsx\" debug>debug 前置/后置标签</code>\n<code src=\"./demo/component-token.tsx\" debug>debug token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Input\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| addonAfter | 带标签的 input，设置后置标签 | ReactNode | - |  |\n| addonBefore | 带标签的 input，设置前置标签 | ReactNode | - |  |\n| allowClear | 可以点击清除图标删除内容 | boolean \\| { clearIcon: ReactNode } | - |  |\n| classNames | 语义化结构 class | Record<[SemanticDOM](#input-1), string> | - | 5.4.0 |\n| count | 字符计数配置 | [CountConfig](#countconfig) | - | 5.10.0 |\n| defaultValue | 输入框默认内容 | string | - |  |\n| disabled | 是否禁用状态，默认为 false | boolean | false |  |\n| id | 输入框的 id | string | - |  |\n| maxLength | 最大长度 | number | - |  |\n| prefix | 带有前缀图标的 input | ReactNode | - |  |\n| showCount | 是否展示字数 | boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode } | false | 4.18.0 info.value: 4.23.0 |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| styles | 语义化结构 style | Record<[SemanticDOM](#input-1), CSSProperties> | - | 5.4.0 |\n| size | 控件大小。注：标准表单内的输入框大小限制为 `middle` | `large` \\| `middle` \\| `small` | - |  |\n| suffix | 带有后缀图标的 input | ReactNode | - |  |\n| type | 声明 input 类型，同原生 input 标签的 type 属性，见：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#属性)(请直接使用 `Input.TextArea` 代替 `type=\"textarea\"`) | string | `text` |  |\n| value | 输入框内容 | string | - |  |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onChange | 输入框内容变化时的回调 | function(e) | - |  |\n| onPressEnter | 按下回车的回调 | function(e) | - |  |\n\n> 如果 `Input` 在 `Form.Item` 内，并且 `Form.Item` 设置了 `id` 属性，则 `value` `defaultValue` 和 `id` 属性会被自动设置。\n\nInput 的其他属性和 React 自带的 [input](https://reactjs.org/docs/dom-elements.html#all-supported-html-attributes) 一致。\n\n#### CountConfig\n\n```tsx\ninterface CountConfig {\n  // 最大字符数，不同于原生 `maxLength`，超出后标红但不会截断\n  max?: number;\n  // 自定义字符计数，例如标准 emoji 长度大于 1，可以自定义计数策略将其改为 1\n  strategy?: (value: string) => number;\n  // 同 `showCount`\n  show?: boolean | ((args: { value: string; count: number; maxLength?: number }) => ReactNode);\n  // 当字符数超出 `count.max` 时的自定义裁剪逻辑，不配置时不进行裁剪\n  exceedFormatter?: (value: string, config: { max: number }) => string;\n}\n```\n\n### Input.TextArea\n\n同 Input 属性，外加：\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoSize | 自适应内容高度，可设置为 true \\| false 或对象：{ minRows: 2, maxRows: 6 } | boolean \\| object | false |  |\n| classNames | 语义化结构 class | Record<[SemanticDOM](#inputtextarea-1), string> | - | 5.4.0 |\n| styles | 语义化结构 style | Record<[SemanticDOM](#inputtextarea-1), CSSProperties> | - | 5.4.0 |\n\n`Input.TextArea` 的其他属性和浏览器自带的 [textarea](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) 一致。\n\n#### Input.Search\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| enterButton | 是否有确认按钮，可设为按钮文字。该属性会与 `addonAfter` 冲突。 | boolean \\| ReactNode | false |\n| loading | 搜索 loading | boolean | false |\n| onSearch | 点击搜索图标、清除图标，或按下回车键时的回调 | function(value, event, { source: \"input\" \\| \"clear\" }) | - |\n\n其余属性和 Input 一致。\n\n#### Input.Password\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| iconRender | 自定义切换按钮 | (visible) => ReactNode | (visible) => (visible ? &lt;EyeOutlined /> : &lt;EyeInvisibleOutlined />) | 4.3.0 |\n| visibilityToggle | 是否显示切换按钮或者控制密码显隐 | boolean \\| [VisibilityToggle](#visibilitytoggle) | true |  |\n\n#### VisibilityToggle\n\n| Property        | Description          | Type              | Default | Version |\n| --------------- | -------------------- | ----------------- | ------- | ------- |\n| visible         | 用于手动控制密码显隐 | boolean           | false   | 4.24    |\n| onVisibleChange | 显隐密码的回调       | (visible) => void | -       | 4.24    |\n\n#### Input Methods\n\n| 名称 | 说明 | 参数 | 版本 |\n| --- | --- | --- | --- |\n| blur | 取消焦点 | - |  |\n| focus | 获取焦点 | (option?: { preventScroll?: boolean, cursor?: 'start' \\| 'end' \\| 'all' }) | option - 4.10.0 |\n\n### Semantic DOM\n\n#### Input\n\n| 名称   | 说明               | 版本  |\n| ------ | ------------------ | ----- |\n| input  | `input` 元素       | 5.4.0 |\n| prefix | 所有前缀的包裹元素 | 5.4.0 |\n| suffix | 所有后缀的包裹元素 | 5.4.0 |\n| count  | 文字计数元素       | 5.4.0 |\n\n#### Input.TextArea\n\n| 名称     | 说明            | 版本  |\n| -------- | --------------- | ----- |\n| textarea | `textarea` 元素 | 5.4.0 |\n| count    | 文字计数元素    | 5.4.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Input\"></ComponentTokenTable>\n\n## FAQ\n\n### 为什么我动态改变 `prefix/suffix/showCount` 时，Input 会失去焦点？\n\n当 Input 动态添加或者删除 `prefix/suffix/showCount` 时，React 会重新创建 DOM 结构而新的 input 是没有焦点的。你可以预设一个空的 `<span />` 来保持 DOM 结构不变：\n\n```jsx\nconst suffix = condition ? <Icon type=\"smile\" /> : <span />;\n\n<Input suffix={suffix} />;\n```\n\n### 为何 TextArea 受控时，`value` 可以超过 `maxLength`？\n\n受控时，组件应该按照受控内容展示。以防止在表单组件内使用时显示值和提交值不同的问题。\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Input\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Y3R0RowXHlAAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sBqqTatJ-AkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA basic widget for getting the user input is a text field. Keyboard and mouse can be used for providing or changing data.\n\n## When To Use\n\n- A user input in a form field is needed.\n- A search input is required.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic usage</code>\n<code src=\"./demo/size.tsx\">Three sizes of Input</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n<code src=\"./demo/filled-debug.tsx\" debug>Filled Debug</code>\n<code src=\"./demo/addon.tsx\">Pre / Post tab</code>\n<code src=\"./demo/compact-style.tsx\">Compact Style</code>\n<code src=\"./demo/group.tsx\" debug>Input Group</code>\n<code src=\"./demo/search-input.tsx\">Search box</code>\n<code src=\"./demo/search-input-loading.tsx\">Search box with loading</code>\n<code src=\"./demo/textarea.tsx\">TextArea</code>\n<code src=\"./demo/autosize-textarea.tsx\">Autosizing the height to fit the content</code>\n<code src=\"./demo/tooltip.tsx\">Format Tooltip Input</code>\n<code src=\"./demo/presuffix.tsx\">prefix and suffix</code>\n<code src=\"./demo/password-input.tsx\">Password box</code>\n<code src=\"./demo/allowClear.tsx\">With clear icon</code>\n<code src=\"./demo/show-count.tsx\">With character counting</code>\n<code src=\"./demo/advance-count.tsx\" version=\">= 5.10.0\">Custom count logic</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/focus.tsx\">Focus</code>\n<code src=\"./demo/borderless-debug.tsx\" debug>Style Debug</code>\n<code src=\"./demo/align.tsx\" debug>Text Align</code>\n<code src=\"./demo/textarea-resize.tsx\" debug>TextArea</code>\n<code src=\"./demo/debug-addon.tsx\" debug>debug Pre / Post tab</code>\n<code src=\"./demo/component-token.tsx\" debug>debug token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Input\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| addonAfter | The label text displayed after (on the right side of) the input field | ReactNode | - |  |\n| addonBefore | The label text displayed before (on the left side of) the input field | ReactNode | - |  |\n| allowClear | If allow to remove input content with clear icon | boolean \\| { clearIcon: ReactNode } | false |  |\n| classNames | Semantic DOM class | Record<[SemanticDOM](#input-1), string> | - | 5.4.0 |\n| count | Character count config | [CountConfig](#countconfig) | - | 5.10.0 |\n| defaultValue | The initial input content | string | - |  |\n| disabled | Whether the input is disabled | boolean | false |  |\n| id | The ID for input | string | - |  |\n| maxLength | The maximum number of characters in Input | number | - |  |\n| prefix | The prefix icon for the Input | ReactNode | - |  |\n| showCount | Whether to show character count | boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode } | false | 4.18.0 info.value: 4.23.0 |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| styles | Semantic DOM style | Record<[SemanticDOM](#input-1), CSSProperties> | - | 5.4.0 |\n| size | The size of the input box. Note: in the context of a form, the `middle` size is used | `large` \\| `middle` \\| `small` | - |  |\n| suffix | The suffix icon for the Input | ReactNode | - |  |\n| type | The type of input, see: [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types)( use `Input.TextArea` instead of `type=\"textarea\"`) | string | `text` |  |\n| value | The input content value | string | - |  |\n| variant | Variants of Input | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onChange | Callback when user input | function(e) | - |  |\n| onPressEnter | The callback function that is triggered when Enter key is pressed | function(e) | - |  |\n\n> When `Input` is used in a `Form.Item` context, if the `Form.Item` has the `id` props defined then `value`, `defaultValue`, and `id` props of `Input` are automatically set.\n\nThe rest of the props of Input are exactly the same as the original [input](https://reactjs.org/docs/dom-elements.html#all-supported-html-attributes).\n\n#### CountConfig\n\n```tsx\ninterface CountConfig {\n  // Max character count. Different from the native `maxLength`, it will be marked warning but not truncated\n  max?: number;\n  // Custom character count, for example, the standard emoji length is greater than 1, you can customize the counting strategy to change it to 1\n  strategy?: (value: string) => number;\n  // Same as `showCount`\n  show?: boolean | ((args: { value: string; count: number; maxLength?: number }) => ReactNode);\n  // Custom clipping logic when the number of characters exceeds `count.max`, no clipping when not configured\n  exceedFormatter?: (value: string, config: { max: number }) => string;\n}\n```\n\n### Input.TextArea\n\nSame as Input, and more:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoSize | Height auto size feature, can be set to true \\| false or an object { minRows: 2, maxRows: 6 } | boolean \\| object | false |  |\n| classNames | Semantic DOM class | Record<[SemanticDOM](#inputtextarea-1), string> | - | 5.4.0 |\n| styles | Semantic DOM style | Record<[SemanticDOM](#inputtextarea-1), CSSProperties> | - | 5.4.0 |\n\nThe rest of the props of `Input.TextArea` are the same as the original [textarea](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea).\n\n#### Input.Search\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| enterButton | Whether to show an enter button after input. This property conflicts with the `addonAfter` property | boolean \\| ReactNode | false |\n| loading | Search box with loading | boolean | false |\n| onSearch | The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key | function(value, event, { source: \"input\" \\| \"clear\" }) | - |\n\nSupports all props of `Input`.\n\n#### Input.Password\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| iconRender | Custom toggle button | (visible) => ReactNode | (visible) => (visible ? &lt;EyeOutlined /> : &lt;EyeInvisibleOutlined />) | 4.3.0 |\n| visibilityToggle | Whether show toggle button or control password visible | boolean \\| [VisibilityToggle](#visibilitytoggle) | true |  |\n\n#### VisibilityToggle\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| visible | Whether the password is show or hide | boolean | false | 4.24.0 |\n| onVisibleChange | Callback executed when visibility of the password is changed | (visible) => void | - | 4.24.0 |\n\n#### Input Methods\n\n| Name | Description | Parameters | Version |\n| --- | --- | --- | --- |\n| blur | Remove focus | - |  |\n| focus | Get focus | (option?: { preventScroll?: boolean, cursor?: 'start' \\| 'end' \\| 'all' }) | option - 4.10.0 |\n\n### Semantic DOM\n\n#### Input\n\n<!-- prettier-ignore -->\n| Property | Description | Version |\n| --- | --- | --- |\n| input | `input` element | 5.4.0 |\n| prefix | Wrapper of prefix | 5.4.0 |\n| suffix | Wrapper of suffix | 5.4.0 |\n| count | Text count element | 5.4.0 |\n\n#### Input.TextArea\n\n<!-- prettier-ignore -->\n| Property | Description | Version |\n| --- | --- | --- |\n| textarea | `textarea` element | 5.4.0 |\n| count | Text count element | 5.4.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Input\"></ComponentTokenTable>\n\n## FAQ\n\n### Why Input lose focus when change `prefix/suffix/showCount`\n\nWhen Input dynamic add or remove `prefix/suffix/showCount` will make React recreate the dom structure and new input will be not focused. You can set an empty `<span />` element to keep the dom structure:\n\n```jsx\nconst suffix = condition ? <Icon type=\"smile\" /> : <span />;\n\n<Input suffix={suffix} />;\n```\n\n### Why TextArea in control can make `value` exceed `maxLength`?\n\nWhen in control, component should show as what it set to avoid submit value not align with store value in Form.\n"},"layout":{"zh-CN":"---\ncategory: Components\nsubtitle: 布局\ngroup: 布局\ntitle: Layout\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*4i58ToAcxaYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HdS6Q5vUCDcAAAAAAAAAAAAADrJ8AQ/original\n---\n\n协助进行页面级整体布局。\n\n## 设计规则\n\n### 尺寸\n\n一级导航项偏左靠近 logo 放置，辅助菜单偏右放置。\n\n- 顶部导航（大部分系统）：一级导航高度 `64px`，二级导航 `48px`。\n- 顶部导航（展示类页面）：一级导航高度 `80px`，二级导航 `56px`。\n- 顶部导航高度的范围计算公式为：`48+8n`。\n- 侧边导航宽度的范围计算公式：`200+8n`。\n\n### 交互\n\n- 一级导航和末级的导航需要在可视化的层面被强调出来；\n- 当前项应该在呈现上优先级最高；\n- 当导航收起的时候，当前项的样式自动赋予给它的上一个层级；\n- 左侧导航栏的收放交互同时支持手风琴和全展开的样式，根据业务的要求进行适当的选择。\n\n### 视觉\n\n导航样式上需要根据信息层级合理的选择样式：\n\n- **大色块强调**\n\n  建议用于底色为深色系时，当前页面父级的导航项。\n\n- **高亮火柴棍**\n\n  当导航栏底色为浅色系时使用，可用于当前页面对应导航项，建议尽量在导航路径的最终项使用。\n\n- **字体高亮变色**\n\n  从可视化层面，字体高亮的视觉强化力度低于大色块，通常在当前项的上一级使用。\n\n- **字体放大**\n\n  `12px`、`14px` 是导航的标准字号，14 号字体用在一、二级导航中。字号可以考虑导航项的等级做相应选择。\n\n## 组件概述\n\n- `Layout`：布局容器，其下可嵌套 `Header` `Sider` `Content` `Footer` 或 `Layout` 本身，可以放在任何父容器中。\n- `Header`：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Sider`：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Content`：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n- `Footer`：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 `Layout` 中。\n\n> 注意：采用 flex 布局实现，请注意[浏览器兼容性](http://caniuse.com/#search=flex)问题。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本结构</code>\n<code src=\"./demo/top.tsx\" compact background=\"grey\">上中下布局</code>\n<code src=\"./demo/top-side.tsx\" compact background=\"grey\">顶部-侧边布局</code>\n<code src=\"./demo/top-side-2.tsx\" compact background=\"grey\">顶部-侧边布局-通栏</code>\n<code src=\"./demo/side.tsx\" iframe=\"360\">侧边布局</code>\n<code src=\"./demo/custom-trigger.tsx\" compact background=\"grey\">自定义触发器</code>\n<code src=\"./demo/responsive.tsx\" compact background=\"grey\">响应式布局</code>\n<code src=\"./demo/fixed.tsx\" iframe=\"360\">固定头部</code>\n<code src=\"./demo/fixed-sider.tsx\" iframe=\"360\">固定侧边栏</code>\n<code src=\"./demo/custom-trigger-debug.tsx\" compact background=\"grey\" debug>自定义触发器 Debug</code>\n<code src=\"./demo/component-token.tsx\" compact background=\"grey\" debug>组件 Token</code>\n\n## API\n\n```jsx\n<Layout>\n  <Header>header</Header>\n  <Layout>\n    <Sider>left sidebar</Sider>\n    <Content>main content</Content>\n    <Sider>right sidebar</Sider>\n  </Layout>\n  <Footer>footer</Footer>\n</Layout>\n```\n\n### Layout\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n布局容器。\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| className | 容器 className | string | - |\n| hasSider | 表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动 | boolean | - |\n| style | 指定样式 | CSSProperties | - |\n\n### Layout.Sider\n\n侧边栏。\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| breakpoint | 触发响应式布局的[断点](/components/grid-cn#col) | `xs` \\| `sm` \\| `md` \\| `lg` \\| `xl` \\| `xxl` | - |\n| className | 容器 className | string | - |\n| collapsed | 当前收起状态 | boolean | - |\n| collapsedWidth | 收缩宽度，设置为 0 会出现特殊 trigger | number | 80 |\n| collapsible | 是否可收起 | boolean | false |\n| defaultCollapsed | 是否默认收起 | boolean | false |\n| reverseArrow | 翻转折叠提示箭头的方向，当 Sider 在右边时可以使用 | boolean | false |\n| style | 指定样式 | CSSProperties | - |\n| theme | 主题颜色 | `light` \\| `dark` | `dark` |\n| trigger | 自定义 trigger，设置为 null 时隐藏 trigger | ReactNode | - |\n| width | 宽度 | number \\| string | 200 |\n| zeroWidthTriggerStyle | 指定当 `collapsedWidth` 为 0 时出现的特殊 trigger 的样式 | object | - |\n| onBreakpoint | 触发响应式布局[断点](/components/grid-cn#api)时的回调 | (broken) => {} | - |\n| onCollapse | 展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发 | (collapsed, type) => {} | - |\n\n#### breakpoint width\n\n```js\n{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n}\n```\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Layout\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Layout\ntitle: Layout\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*4i58ToAcxaYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HdS6Q5vUCDcAAAAAAAAAAAAADrJ8AQ/original\n---\n\nHandling the overall layout of a page.\n\n## Specification\n\n### Size\n\nThe first level navigation is left aligned near a logo, and the secondary menu is right aligned.\n\n- Top Navigation: the height of the first level navigation `64px`, the second level navigation `48px`.\n- Top Navigation (for landing pages): the height of the first level navigation `80px`, the second level navigation `56px`.\n- Calculation formula of a top navigation: `48+8n`.\n- Calculation formula of an aside navigation: `200+8n`.\n\n### Interaction rules\n\n- The first level navigation and the last level navigation should be distinguishable by visualization;\n- The current item should have the highest priority of visualization;\n- When the current navigation item is collapsed, the style of the current navigation item is applied to its parent level;\n- The left side navigation bar has support for both the accordion and expanding styles; you can choose the one that fits your case the best.\n\n## Visualization rules\n\nStyle of a navigation should conform to its level.\n\n- **Emphasis by colorblock**\n\n  When background color is a deep color, you can use this pattern for the parent level navigation item of the current page.\n\n- **The highlight match stick**\n\n  When background color is a light color, you can use this pattern for the current page navigation item; we recommend using it for the last item of the navigation path.\n\n- **Highlighted font**\n\n  From the visualization aspect, a highlighted font is stronger than colorblock; this pattern is often used for the parent level of the current item.\n\n- **Enlarge the size of the font**\n\n  `12px`, `14px` is a standard font size of navigation's, `14px` is used for the first and the second level of the navigation. You can choose an appropriate font size regarding the level of your navigation.\n\n## Component Overview\n\n- `Layout`: The layout wrapper, in which `Header` `Sider` `Content` `Footer` or `Layout` itself can be nested, and can be placed in any parent container.\n- `Header`: The top layout with the default style, in which any element can be nested, and must be placed in `Layout`.\n- `Sider`: The sidebar with default style and basic functions, in which any element can be nested, and must be placed in `Layout`.\n- `Content`: The content layout with the default style, in which any element can be nested, and must be placed in `Layout`.\n- `Footer`: The bottom layout with the default style, in which any element can be nested, and must be placed in `Layout`.\n\n> Based on `flex layout`, please pay attention to the [compatibility](http://caniuse.com/#search=flex).\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Structure</code>\n<code src=\"./demo/top.tsx\" compact background=\"grey\">Header-Content-Footer</code>\n<code src=\"./demo/top-side.tsx\" compact background=\"grey\">Header-Sider</code>\n<code src=\"./demo/top-side-2.tsx\" compact background=\"grey\">Header Sider 2</code>\n<code src=\"./demo/side.tsx\" iframe=\"360\">Sider</code>\n<code src=\"./demo/custom-trigger.tsx\" compact background=\"grey\">Custom trigger</code>\n<code src=\"./demo/responsive.tsx\" compact background=\"grey\">Responsive</code>\n<code src=\"./demo/fixed.tsx\" iframe=\"360\">Fixed Header</code>\n<code src=\"./demo/fixed-sider.tsx\" iframe=\"360\">Fixed Sider</code>\n<code src=\"./demo/custom-trigger-debug.tsx\" compact background=\"grey\" debug>Custom trigger debug</code>\n<code src=\"./demo/component-token.tsx\" compact background=\"grey\" debug>Component Token</code>\n\n## API\n\n```jsx\n<Layout>\n  <Header>header</Header>\n  <Layout>\n    <Sider>left sidebar</Sider>\n    <Content>main content</Content>\n    <Sider>right sidebar</Sider>\n  </Layout>\n  <Footer>footer</Footer>\n</Layout>\n```\n\n### Layout\n\nCommon props ref：[Common props](/docs/react/common-props)\n\nThe wrapper.\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| className | Container className | string | - |\n| hasSider | Whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering | boolean | - |\n| style | To customize the styles | CSSProperties | - |\n\n### Layout.Sider\n\nThe sidebar.\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| breakpoint | [Breakpoints](/components/grid/#col) of the responsive layout | `xs` \\| `sm` \\| `md` \\| `lg` \\| `xl` \\| `xxl` | - |\n| className | Container className | string | - |\n| collapsed | To set the current status | boolean | - |\n| collapsedWidth | Width of the collapsed sidebar, by setting to 0 a special trigger will appear | number | 80 |\n| collapsible | Whether can be collapsed | boolean | false |\n| defaultCollapsed | To set the initial status | boolean | false |\n| reverseArrow | Reverse direction of arrow, for a sider that expands from the right | boolean | false |\n| style | To customize the styles | CSSProperties | - |\n| theme | Color theme of the sidebar | `light` \\| `dark` | `dark` |\n| trigger | Specify the customized trigger, set to null to hide the trigger | ReactNode | - |\n| width | Width of the sidebar | number \\| string | 200 |\n| zeroWidthTriggerStyle | To customize the styles of the special trigger that appears when `collapsedWidth` is 0 | object | - |\n| onBreakpoint | The callback function, executed when [breakpoints](/components/grid/#api) changed | (broken) => {} | - |\n| onCollapse | The callback function, executed by clicking the trigger or activating the responsive layout | (collapsed, type) => {} | - |\n\n#### breakpoint width\n\n```js\n{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n}\n```\n\n## Design Token\n\n<ComponentTokenTable component=\"Layout\"></ComponentTokenTable>\n"},"list":{"zh-CN":"---\ncategory: Components\ngroup: 数据展示\ntitle: List\nsubtitle: 列表\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*EYuhSpw1iSwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*tBzwQ7raKX8AAAAAAAAAAAAADrJ8AQ/original\n---\n\n通用列表。\n\n## 何时使用\n\n最基础的列表展示，可承载文字、列表、图片、段落，常用于后台数据展示页面。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/simple.tsx\">简单列表</code>\n<code src=\"./demo/basic.tsx\">基础列表</code>\n<code src=\"./demo/loadmore.tsx\">加载更多</code>\n<code src=\"./demo/vertical.tsx\">竖排列表样式</code>\n<code src=\"./demo/pagination.tsx\">分页设置</code>\n<code src=\"./demo/grid.tsx\">栅格列表</code>\n<code src=\"./demo/grid-test.tsx\" debug>测试栅格列表</code>\n<code src=\"./demo/responsive.tsx\">响应式的栅格列表</code>\n<code src=\"./demo/infinite-load.tsx\">滚动加载</code>\n<code src=\"./demo/virtual-list.tsx\">滚动加载无限长列表</code>\n<code src=\"./demo/component-token.tsx\" debug>自定义组件 token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n另外我们封装了 [ProList](https://procomponents.ant.design/components/list)，在 `antd` List 之上扩展了更多便捷易用的功能，比如多选，展开等功能，使用体验贴近 Table，欢迎尝试使用。\n\n### List\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示边框 | boolean | false |  |\n| dataSource | 列表数据源 | any\\[] | - |  |\n| footer | 列表底部 | ReactNode | - |  |\n| grid | 列表栅格配置 | [object](#list-grid-props) | - |  |\n| header | 列表头部 | ReactNode | - |  |\n| itemLayout | 设置 `List.Item` 布局，设置成 `vertical` 则竖直样式显示，默认横排 | string | - |  |\n| loading | 当卡片内容还在加载中时，可以用 `loading` 展示一个占位 | boolean \\| [object](/components/spin-cn#api) ([更多](https://github.com/ant-design/ant-design/issues/8659)) | false |  |\n| loadMore | 加载更多 | ReactNode | - |  |\n| locale | 默认文案设置，目前包括空数据文案 | object | {emptyText: `暂无数据`} |  |\n| pagination | 对应的 `pagination` 配置，设置 false 不显示 | boolean \\| object | false |  |\n| renderItem | 当使用 dataSource 时，可以用 `renderItem` 自定义渲染列表项 | (item) => ReactNode | - |  |\n| rowKey | 当 `renderItem` 自定义渲染列表项有效时，自定义每一行的 `key` 的获取方式 | `keyof` T \\| (item: T) => `React.Key` | `\"key\"` |  |\n| size | list 的尺寸 | `default` \\| `large` \\| `small` | `default` |  |\n| split | 是否展示分割线 | boolean | true |  |\n\n### pagination\n\n分页的配置项。\n\n| 参数     | 说明               | 类型                         | 默认值   |\n| -------- | ------------------ | ---------------------------- | -------- |\n| position | 指定分页显示的位置 | `top` \\| `bottom` \\| `both`  | `bottom` |\n| align    | 指定分页对齐的位置 | `start` \\| `center` \\| `end` | `end`    |\n\n更多配置项，请查看 [`Pagination`](/components/pagination-cn)。\n\n### List grid props\n\n| 参数   | 说明                 | 类型   | 默认值 | 版本 |\n| ------ | -------------------- | ------ | ------ | ---- |\n| column | 列数                 | number | -      |      |\n| gutter | 栅格间隔             | number | 0      |      |\n| xs     | `<576px` 展示的列数  | number | -      |      |\n| sm     | `≥576px` 展示的列数  | number | -      |      |\n| md     | `≥768px` 展示的列数  | number | -      |      |\n| lg     | `≥992px` 展示的列数  | number | -      |      |\n| xl     | `≥1200px` 展示的列数 | number | -      |      |\n| xxl    | `≥1600px` 展示的列数 | number | -      |      |\n\n### List.Item\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| actions | 列表操作组，根据 `itemLayout` 的不同，位置在卡片底部或者最右侧 | Array&lt;ReactNode> | - |  |\n| extra | 额外内容，通常用在 `itemLayout` 为 `vertical` 的情况下，展示右侧内容; `horizontal` 展示在列表元素最右侧 | ReactNode | - |  |\n\n### List.Item.Meta\n\n| 参数        | 说明               | 类型      | 默认值 | 版本 |\n| ----------- | ------------------ | --------- | ------ | ---- |\n| avatar      | 列表元素的图标     | ReactNode | -      |      |\n| description | 列表元素的描述内容 | ReactNode | -      |      |\n| title       | 列表元素的标题     | ReactNode | -      |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"List\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: List\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*EYuhSpw1iSwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*tBzwQ7raKX8AAAAAAAAAAAAADrJ8AQ/original\n---\n\nSimple List.\n\n## When To Use\n\nA list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/simple.tsx\">Simple list</code>\n<code src=\"./demo/basic.tsx\">Basic list</code>\n<code src=\"./demo/loadmore.tsx\">Load more</code>\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n<code src=\"./demo/pagination.tsx\">Pagination Settings</code>\n<code src=\"./demo/grid.tsx\">Grid</code>\n<code src=\"./demo/grid-test.tsx\" debug>Test Grid</code>\n<code src=\"./demo/responsive.tsx\">Responsive grid list</code>\n<code src=\"./demo/infinite-load.tsx\">Scrolling loaded</code>\n<code src=\"./demo/virtual-list.tsx\">virtual list</code>\n<code src=\"./demo/component-token.tsx\" debug>custom component token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### List\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | Toggles rendering of the border around the list | boolean | false |  |\n| dataSource | DataSource array for list | any\\[] | - |  |\n| footer | List footer renderer | ReactNode | - |  |\n| grid | The grid type of list. You can set grid to something like {gutter: 16, column: 4} | [object](#list-grid-props) | - |  |\n| header | List header renderer | ReactNode | - |  |\n| itemLayout | The layout of list | `horizontal` \\| `vertical` | `horizontal` |  |\n| loading | Shows a loading indicator while the contents of the list are being fetched | boolean \\| [SpinProps](/components/spin/#api) ([more](https://github.com/ant-design/ant-design/issues/8659)) | false |  |\n| loadMore | Shows a load more content | ReactNode | - |  |\n| locale | The i18n text including empty text | object | {emptyText: `No Data`} |  |\n| pagination | Pagination [config](/components/pagination/), hide it by setting it to false | boolean \\| object | false |  |\n| renderItem | Customize list item when using `dataSource` | (item) => ReactNode | - |  |\n| rowKey | Item's unique value, could be an Item's key which holds a unique value of type `React.Key` or function that receives Item and returns a `React.Key` | `keyof` T \\| (item: T) => `React.Key` | `\"key\"` |  |\n| size | Size of list | `default` \\| `large` \\| `small` | `default` |  |\n| split | Toggles rendering of the split under the list item | boolean | true |  |\n\n### pagination\n\nProperties for pagination.\n\n| Property | Description                               | Type                         | Default  |\n| -------- | ----------------------------------------- | ---------------------------- | -------- |\n| position | The specify the position of `Pagination`  | `top` \\| `bottom` \\| `both`  | `bottom` |\n| align    | The specify the alignment of `Pagination` | `start` \\| `center` \\| `end` | `end`    |\n\nMore about pagination, please check [`Pagination`](/components/pagination/).\n\n### List grid props\n\n| Property | Description              | Type   | Default | Version |\n| -------- | ------------------------ | ------ | ------- | ------- |\n| column   | The column of grid       | number | -       |         |\n| gutter   | The spacing between grid | number | 0       |         |\n| xs       | `<576px` column of grid  | number | -       |         |\n| sm       | `≥576px` column of grid  | number | -       |         |\n| md       | `≥768px` column of grid  | number | -       |         |\n| lg       | `≥992px` column of grid  | number | -       |         |\n| xl       | `≥1200px` column of grid | number | -       |         |\n| xxl      | `≥1600px` column of grid | number | -       |         |\n\n### List.Item\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| actions | The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right | Array&lt;ReactNode> | - |  |\n| extra | The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right | ReactNode | - |  |\n\n### List.Item.Meta\n\n| Property    | Description                  | Type      | Default | Version |\n| ----------- | ---------------------------- | --------- | ------- | ------- |\n| avatar      | The avatar of list item      | ReactNode | -       |         |\n| description | The description of list item | ReactNode | -       |         |\n| title       | The title of list item       | ReactNode | -       |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"List\"></ComponentTokenTable>\n"},"mentions":{"zh-CN":"---\ncategory: Components\nsubtitle: 提及\ngroup: 数据录入\ntitle: Mentions\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*e4bXT7Uhi9YAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*pxR2S53P_xoAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n提及组件。\n\n## 何时使用\n\n用于在输入中提及某人或某事，常用于发布、聊天或评论功能。\n\n### 5.1.0 用法升级\n\n<!-- prettier-ignore -->\n:::info\n在 5.1.0 版本后，我们提供了 `<Mentions options={[...]} />` 的简写方式，有更好的性能和更方便的数据组织方式，开发者不再需要自行拼接 JSX。\n同时我们废弃了原先的写法，你还是可以在 5.x 继续使用，但会在控制台看到警告，并会在 6.0 后移除。\n:::\n\n```jsx\n// >=5.1.0 可用，推荐的写法 ✅\nconst options = [{ value: 'sample', label: 'sample' }];\nreturn <Mentions options={options} />;\n\n// <5.1.0 可用，>=5.1.0 时不推荐 🙅🏻‍♀️\nreturn (\n  <Mentions onChange={onChange}>\n    <Mentions.Option value=\"sample\">Sample</Mentions.Option>\n  </Mentions>\n);\n```\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本使用</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">形态变体</code>\n<code src=\"./demo/async.tsx\">异步加载</code>\n<code src=\"./demo/form.tsx\">配合 Form 使用</code>\n<code src=\"./demo/prefix.tsx\">自定义触发字符</code>\n<code src=\"./demo/readonly.tsx\">无效或只读</code>\n<code src=\"./demo/placement.tsx\">向上展开</code>\n<code src=\"./demo/allowClear.tsx\">带移除图标</code>\n<code src=\"./demo/autoSize.tsx\">自动大小</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Mentions\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 支持清除 | boolean \\| { clearIcon?: ReactNode } | false | 5.13.0 |\n| autoFocus | 自动获得焦点 | boolean | false |  |\n| autoSize | 自适应内容高度，可设置为 true \\| false 或对象：{ minRows: 2, maxRows: 6 } | boolean \\| object | false |  |\n| defaultValue | 默认值 | string | - |  |\n| filterOption | 自定义过滤逻辑 | false \\| (input: string, option: OptionProps) => boolean | - |  |\n| getPopupContainer | 指定建议框挂载的 HTML 节点 | () => HTMLElement | - |  |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` |  |\n| placement | 弹出层展示位置 | `top` \\| `bottom` | `bottom` |  |\n| prefix | 设置触发关键字 | string \\| string\\[] | `@` |  |\n| split | 设置选中项前后分隔符 | string | ` ` |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| validateSearch | 自定义触发验证逻辑 | (text: string, props: MentionsProps) => void | - |  |\n| value | 设置值 | string | - |  |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onBlur | 失去焦点时触发 | () => void | - |  |\n| onChange | 值改变时触发 | (text: string) => void | - |  |\n| onFocus | 获得焦点时触发 | () => void | - |  |\n| onResize | resize 回调 | function({ width, height }) | - |  |\n| onSearch | 搜索时触发 | (text: string, prefix: string) => void | - |  |\n| onSelect | 选择选项时触发 | (option: OptionProps, prefix: string) => void | - |  |\n| options | 选项配置 | [Options](#option) | [] | 5.1.0 |\n\n### Mentions 方法\n\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n### Option\n\n| 参数      | 说明           | 类型                | 默认值 |\n| --------- | -------------- | ------------------- | ------ |\n| value     | 选择时填充的值 | string              | -      |\n| label     | 选项的标题     | React.ReactNode     | -      |\n| key       | 选项的 key 值  | string              | -      |\n| disabled  | 是否可选       | boolean             | -      |\n| className | css 类名       | string              | -      |\n| style     | 选项样式       | React.CSSProperties | -      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Mentions\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Mentions\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*e4bXT7Uhi9YAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*pxR2S53P_xoAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nMention component.\n\n## When To Use\n\nWhen you need to mention someone or something.\n\n### Usage upgrade after 5.1.0\n\n<!-- prettier-ignore -->\n:::info\nAfter version 5.1.0, we provide a simpler usage `<Mentions options={[...]} />` with better performance and potential of writing simpler code style in your applications.\nMeanwhile, we deprecated the old usage in browser console, we will remove it in antd 6.0.\n:::\n\n```jsx\n// works when >=5.1.0, recommended ✅\nconst options = [{ value: 'sample', label: 'sample' }];\nreturn <Mentions options={options} />;\n\n// works when <5.1.0, deprecated when >=5.1.0 🙅🏻‍♀️\nreturn (\n  <Mentions onChange={onChange}>\n    <Mentions.Option value=\"sample\">Sample</Mentions.Option>\n  </Mentions>\n);\n```\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n<code src=\"./demo/async.tsx\">Asynchronous loading</code>\n<code src=\"./demo/form.tsx\">With Form</code>\n<code src=\"./demo/prefix.tsx\">Customize Trigger Token</code>\n<code src=\"./demo/readonly.tsx\">disabled or readOnly</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/allowClear.tsx\">With clear icon</code>\n<code src=\"./demo/autoSize.tsx\">autoSize</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Mention\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Show clear button | boolean \\| { clearIcon?: ReactNode } | false | 5.13.0 |\n| autoFocus | Auto get focus when component mounted | boolean | false |  |\n| autoSize | Textarea height autosize feature, can be set to true \\| false or an object { minRows: 2, maxRows: 6 } | boolean \\| object | false |  |\n| defaultValue | Default value | string | - |  |\n| filterOption | Customize filter option logic | false \\| (input: string, option: OptionProps) => boolean | - |  |\n| getPopupContainer | Set the mount HTML node for suggestions | () => HTMLElement | - |  |\n| notFoundContent | Set mentions content when not match | ReactNode | `Not Found` |  |\n| placement | Set popup placement | `top` \\| `bottom` | `bottom` |  |\n| prefix | Set trigger prefix keyword | string \\| string\\[] | `@` |  |\n| split | Set split string before and after selected mention | string | ` ` |  |\n| status | Set validation status | 'error' \\| 'warning' \\| 'success' \\| 'validating' | - | 4.19.0 |\n| validateSearch | Customize trigger search logic | (text: string, props: MentionsProps) => void | - |  |\n| value | Set value of mentions | string | - |  |\n| variant | Variants of Input | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onBlur | Trigger when mentions lose focus | () => void | - |  |\n| onChange | Trigger when value changed | (text: string) => void | - |  |\n| onFocus | Trigger when mentions get focus | () => void | - |  |\n| onResize | The callback function that is triggered when textarea resize | function({ width, height }) | - |  |\n| onSearch | Trigger when prefix hit | (text: string, prefix: string) => void | - |  |\n| onSelect | Trigger when user select the option | (option: OptionProps, prefix: string) => void | - |  |\n| options | Option Configuration | [Options](#option) | \\[] | 5.1.0 |\n\n### Mention methods\n\n| Name    | Description  |\n| ------- | ------------ |\n| blur()  | Remove focus |\n| focus() | Get focus    |\n\n### Option\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| label | Title of the option | React.ReactNode | - |\n| key | The key value of the option | string | - |\n| disabled | Optional | boolean | - |\n| className | className | string | - |\n| style | The style of the option | React.CSSProperties | - |\n\n## Design Token\n\n<ComponentTokenTable component=\"Mentions\"></ComponentTokenTable>\n"},"menu":{"zh-CN":"---\ncategory: Components\ngroup: 导航\ntitle: Menu\nsubtitle: 导航菜单\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*KeyQQL5iKkkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Vn4XSqJFAxcAAAAAAAAAAAAADrJ8AQ/original\n---\n\n为页面和功能提供导航的菜单列表。\n\n## 何时使用\n\n导航菜单是一个网站的灵魂，用户依赖导航在各个页面中进行跳转。一般分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。\n\n更多布局和导航的使用可以参考：[通用布局](/components/layout-cn)。\n\n## 开发者注意事项\n\n- Menu 元素为 `ul`，因而仅支持 [`li` 以及 `script-supporting` 子元素](https://html.spec.whatwg.org/multipage/grouping-content.html#the-ul-element)。因而你的子节点元素应该都在 `Menu.Item` 内使用。\n- Menu 需要计算节点结构，因而其子元素仅支持 `Menu.*` 以及对此进行封装的 HOC 组件。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/horizontal.tsx\">顶部导航</code>\n<code src=\"./demo/horizontal-dark.tsx\" debug>顶部导航（dark）</code>\n<code src=\"./demo/inline.tsx\">内嵌菜单</code>\n<code src=\"./demo/inline-collapsed.tsx\">缩起内嵌菜单</code>\n<code src=\"./demo/sider-current.tsx\">只展开当前父级菜单</code>\n<code src=\"./demo/vertical.tsx\">垂直菜单</code>\n<code src=\"./demo/theme.tsx\">主题</code>\n<code src=\"./demo/submenu-theme.tsx\">子菜单主题</code>\n<code src=\"./demo/switch-mode.tsx\">切换菜单类型</code>\n<code src=\"./demo/style-debug.tsx\" debug>Style debug</code>\n<code src=\"./demo/menu-v4.tsx\" debug>v4 版本 Menu</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Menu\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| defaultOpenKeys | 初始展开的 SubMenu 菜单项 key 数组 | string\\[] | - |  |\n| defaultSelectedKeys | 初始选中的菜单项 key 数组 | string\\[] | - |  |\n| expandIcon | 自定义展开图标 | ReactNode \\| `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode` | - | 4.9.0 |\n| forceSubMenuRender | 在子菜单展示之前就渲染进 DOM | boolean | false |  |\n| inlineCollapsed | inline 时菜单是否收起状态 | boolean | - |  |\n| inlineIndent | inline 模式的菜单缩进宽度 | number | 24 |  |\n| items | 菜单内容 | [ItemType\\[\\]](#itemtype) | - | 4.20.0 |\n| mode | 菜单类型，现在支持垂直、水平、和内嵌模式三种 | `vertical` \\| `horizontal` \\| `inline` | `vertical` |  |\n| multiple | 是否允许多选 | boolean | false |  |\n| openKeys | 当前展开的 SubMenu 菜单项 key 数组 | string\\[] | - |  |\n| overflowedIndicator | 用于自定义 Menu 水平空间不足时的省略收缩的图标 | ReactNode | `<EllipsisOutlined />` |  |\n| selectable | 是否允许选中 | boolean | true |  |\n| selectedKeys | 当前选中的菜单项 key 数组 | string\\[] | - |  |\n| style | 根节点样式 | CSSProperties | - |  |\n| subMenuCloseDelay | 用户鼠标离开子菜单后关闭延时，单位：秒 | number | 0.1 |  |\n| subMenuOpenDelay | 用户鼠标进入子菜单后开启延时，单位：秒 | number | 0 |  |\n| theme | 主题颜色 | `light` \\| `dark` | `light` |  |\n| triggerSubMenuAction | SubMenu 展开/关闭的触发行为 | `hover` \\| `click` | `hover` |  |\n| onClick | 点击 MenuItem 调用此函数 | function({ item, key, keyPath, domEvent }) | - |  |\n| onDeselect | 取消选中时调用，仅在 multiple 生效 | function({ item, key, keyPath, selectedKeys, domEvent }) | - |  |\n| onOpenChange | SubMenu 展开/关闭的回调 | function(openKeys: string\\[]) | - |  |\n| onSelect | 被选中时调用 | function({ item, key, keyPath, selectedKeys, domEvent }) | -   |  |\n\n> 更多属性查看 [rc-menu](https://github.com/react-component/menu#api)\n\n### ItemType\n\n> type ItemType = [MenuItemType](#MenuItemType) | [SubMenuType](#SubMenuType) | [MenuItemGroupType](#MenuItemGroupType) | [MenuDividerType](#MenuDividerType);\n\n#### MenuItemType\n\n| 参数     | 说明                     | 类型      | 默认值 | 版本 |\n| -------- | ------------------------ | --------- | ------ | ---- |\n| danger   | 展示错误状态样式         | boolean   | false  |      |\n| disabled | 是否禁用                 | boolean   | false  |      |\n| icon     | 菜单图标                 | ReactNode | -      |      |\n| key      | item 的唯一标志          | string    | -      |      |\n| label    | 菜单项标题               | ReactNode | -      |      |\n| title    | 设置收缩时展示的悬浮标题 | string    | -      |      |\n\n#### SubMenuType\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| children | 子菜单的菜单项 | [ItemType\\[\\]](#itemtype) | - |  |\n| disabled | 是否禁用 | boolean | false |  |\n| icon | 菜单图标 | ReactNode | - |  |\n| key | 唯一标志 | string | - |  |\n| label | 菜单项标题 | ReactNode | - |  |\n| popupClassName | 子菜单样式，`mode=\"inline\"` 时无效 | string | - |  |\n| popupOffset | 子菜单偏移量，`mode=\"inline\"` 时无效 | \\[number, number] | - |  |\n| onTitleClick | 点击子菜单标题 | function({ key, domEvent }) | - |  |\n| theme | 设置子菜单的主题，默认从 Menu 上继承 | `light` \\| `dark` | - |  |\n\n#### MenuItemGroupType\n\n定义类型为 `group` 时，会作为分组处理:\n\n```ts\nconst groupItem = {\n  type: 'group', // Must have\n  label: 'My Group',\n  children: [],\n};\n```\n\n| 参数     | 说明         | 类型                              | 默认值 | 版本 |\n| -------- | ------------ | --------------------------------- | ------ | ---- |\n| children | 分组的菜单项 | [MenuItemType\\[\\]](#menuitemtype) | -      |      |\n| label    | 分组标题     | ReactNode                         | -      |      |\n\n#### MenuDividerType\n\n菜单项分割线，只用在弹出菜单内，需要定义类型为 `divider`：\n\n```ts\nconst dividerItem = {\n  type: 'divider', // Must have\n};\n```\n\n| 参数   | 说明     | 类型    | 默认值 | 版本 |\n| ------ | -------- | ------- | ------ | ---- |\n| dashed | 是否虚线 | boolean | false  |      |\n\n## FAQ\n\n### 为何 Menu 的子元素会渲染两次？\n\nMenu 通过[二次渲染](https://github.com/react-component/menu/blob/f4684514096d6b7123339cbe72e7b0f68db0bce2/src/Menu.tsx#L543)收集嵌套结构信息以支持 HOC 的结构。合并成一个推导结构会使得逻辑变得十分复杂，欢迎 PR 以协助改进该设计。\n\n### 在 Flex 布局中，Menu 没有按照预期响应式省略菜单？\n\nMenu 初始化时会先全部渲染，然后根据宽度裁剪内容。当处于 Flex 布局中，你需要告知其预期宽度为响应式宽度（[在线 Demo](https://codesandbox.io/s/ding-bu-dao-hang-antd-4-21-7-forked-5e3imy?file=/demo.js)）：\n\n```jsx\n<div style={{ flex }}>\n  <div style={{ ... }}>Some Content</div>\n  <Menu style={{ minWidth: 0, flex: \"auto\" }} />\n</div>\n```\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Menu\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Navigation\ntitle: Menu\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*KeyQQL5iKkkAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Vn4XSqJFAxcAAAAAAAAAAAAADrJ8AQ/original\n---\n\nA versatile menu for navigation.\n\n## When To Use\n\nNavigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. Ant Design offers two navigation options: top and side. Top navigation provides all the categories and functions of the website. Side navigation provides the multi-level structure of the website.\n\nMore layouts with navigation: [Layout](/components/layout).\n\n## Notes for developers\n\n- Menu is rendered as a `ul` element, so it only supports [`li` and `script-supporting` elements](https://html.spec.whatwg.org/multipage/grouping-content.html#the-ul-element) as children nodes。Your customized node should be wrapped by `Menu.Item`.\n- Menu needs to collect its node structure, so its children should be `Menu.*` or encapsulated HOCs.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/horizontal.tsx\">Top Navigation</code>\n<code src=\"./demo/horizontal-dark.tsx\" debug>Top Navigation (dark)</code>\n<code src=\"./demo/inline.tsx\">Inline menu</code>\n<code src=\"./demo/inline-collapsed.tsx\">Collapsed inline menu</code>\n<code src=\"./demo/sider-current.tsx\">Open current submenu only</code>\n<code src=\"./demo/vertical.tsx\">Vertical menu</code>\n<code src=\"./demo/theme.tsx\">Menu Themes</code>\n<code src=\"./demo/submenu-theme.tsx\">Sub-menu theme</code>\n<code src=\"./demo/switch-mode.tsx\">Switch the menu type</code>\n<code src=\"./demo/style-debug.tsx\" debug>Style debug</code>\n<code src=\"./demo/menu-v4.tsx\" debug>Menu v4</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Menu\n\n| Param | Description | Type | Default value | Version |\n| --- | --- | --- | --- | --- |\n| defaultOpenKeys | Array with the keys of default opened sub menus | string\\[] | - |  |\n| defaultSelectedKeys | Array with the keys of default selected menu items | string\\[] | - |  |\n| expandIcon | custom expand icon of submenu | ReactNode \\| `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode` | - | 4.9.0 |\n| forceSubMenuRender | Render submenu into DOM before it becomes visible | boolean | false |  |\n| inlineCollapsed | Specifies the collapsed status when menu is inline mode | boolean | - |  |\n| inlineIndent | Indent (in pixels) of inline menu items on each level | number | 24 |  |\n| items | Menu item content | [ItemType\\[\\]](#itemtype) | - | 4.20.0 |\n| mode | Type of menu | `vertical` \\| `horizontal` \\| `inline` | `vertical` |  |\n| multiple | Allows selection of multiple items | boolean | false |  |\n| openKeys | Array with the keys of currently opened sub-menus | string\\[] | - |  |\n| overflowedIndicator | Customized the ellipsis icon when menu is collapsed horizontally | ReactNode | `<EllipsisOutlined />` |  |\n| selectable | Allows selecting menu items | boolean | true |  |\n| selectedKeys | Array with the keys of currently selected menu items | string\\[] | - |  |\n| style | Style of the root node | CSSProperties | - |  |\n| subMenuCloseDelay | Delay time to hide submenu when mouse leaves (in seconds) | number | 0.1 |  |\n| subMenuOpenDelay | Delay time to show submenu when mouse enters, (in seconds) | number | 0 |  |\n| theme | Color theme of the menu | `light` \\| `dark` | `light` |  |\n| triggerSubMenuAction | Which action can trigger submenu open/close | `hover` \\| `click` | `hover` |  |\n| onClick | Called when a menu item is clicked | function({ item, key, keyPath, domEvent }) | - |  |\n| onDeselect | Called when a menu item is deselected (multiple mode only) | function({ item, key, keyPath, selectedKeys, domEvent }) | - |  |\n| onOpenChange | Called when sub-menus are opened or closed | function(openKeys: string\\[]) | - |  |\n| onSelect | Called when a menu item is selected | function({ item, key, keyPath, selectedKeys, domEvent }) | - |  |\n\n> More options in [rc-menu](https://github.com/react-component/menu#api)\n\n### ItemType\n\n> type ItemType = [MenuItemType](#MenuItemType) | [SubMenuType](#SubMenuType) | [MenuItemGroupType](#MenuItemGroupType) | [MenuDividerType](#MenuDividerType);\n\n#### MenuItemType\n\n| Param    | Description                          | Type      | Default value | Version |\n| -------- | ------------------------------------ | --------- | ------------- | ------- |\n| danger   | Display the danger style             | boolean   | false         |         |\n| disabled | Whether menu item is disabled        | boolean   | false         |         |\n| icon     | The icon of the menu item            | ReactNode | -             |         |\n| key      | Unique ID of the menu item           | string    | -             |         |\n| label    | Menu label                           | ReactNode | -             |         |\n| title    | Set display title for collapsed item | string    | -             |         |\n\n#### SubMenuType\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default value | Version |\n| --- | --- | --- | --- | --- |\n| children | Sub-menus or sub-menu items | [ItemType\\[\\]](#itemtype) | - |  |\n| disabled | Whether sub-menu is disabled | boolean | false |  |\n| icon | Icon of sub menu | ReactNode | - |  |\n| key | Unique ID of the sub-menu | string | - |  |\n| label | Menu label | ReactNode | - |  |\n| popupClassName | Sub-menu class name, not working when `mode=\"inline\"` | string | - |  |\n| popupOffset | Sub-menu offset, not working when `mode=\"inline\"` | \\[number, number] | - |  |\n| theme | Color theme of the SubMenu (inherits from Menu by default) |  | `light` \\| `dark` | - |  |\n| onTitleClick | Callback executed when the sub-menu title is clicked | function({ key, domEvent }) | - |  |\n\n#### MenuItemGroupType\n\nDefine `type` as `group` to make as group:\n\n```ts\nconst groupItem = {\n  type: 'group', // Must have\n  label: 'My Group',\n  children: [],\n};\n```\n\n| Param    | Description            | Type                              | Default value | Version |\n| -------- | ---------------------- | --------------------------------- | ------------- | ------- |\n| children | Sub-menu items         | [MenuItemType\\[\\]](#menuitemtype) | -             |         |\n| label    | The title of the group | ReactNode                         | -             |         |\n\n#### MenuDividerType\n\nDivider line in between menu items, only used in vertical popup Menu or Dropdown Menu. Need define the `type` as `divider`：\n\n```ts\nconst dividerItem = {\n  type: 'divider', // Must have\n};\n```\n\n| Param  | Description            | Type    | Default value | Version |\n| ------ | ---------------------- | ------- | ------------- | ------- |\n| dashed | Whether line is dashed | boolean | false         |         |\n\n## FAQ\n\n### Why will Menu's children be rendered twice?\n\nMenu collects structure info with [twice-render](https://github.com/react-component/menu/blob/f4684514096d6b7123339cbe72e7b0f68db0bce2/src/Menu.tsx#L543) to support HOC usage. Merging into one render may cause the logic to become much more complex. Contributions to help improve the collection logic are welcomed.\n\n### Why Menu do not responsive collapse in Flex layout?\n\nMenu will render fully item in flex layout and then collapse it. You need tell flex not consider Menu width to enable responsive ([online demo](https://codesandbox.io/s/ding-bu-dao-hang-antd-4-21-7-forked-5e3imy?file=/demo.js)):\n\n```jsx\n<div style={{ flex }}>\n  <div style={{ ... }}>Some Content</div>\n  <Menu style={{ minWidth: 0, flex: \"auto\" }} />\n</div>\n```\n\n## Design Token\n\n<ComponentTokenTable component=\"Menu\"></ComponentTokenTable>\n"},"message":{"zh-CN":"---\ncategory: Components\nsubtitle: 全局提示\ngroup: 反馈\nnoinstant: true\ntitle: Message\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JjZBT6N1MusAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*7qMTRoq3ZGkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n全局展示操作反馈信息。\n\n## 何时使用\n\n- 可提供成功、警告和错误等反馈信息。\n- 顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/hooks.tsx\">Hooks 调用（推荐）</code>\n<code src=\"./demo/other.tsx\">其他提示类型</code>\n<code src=\"./demo/duration.tsx\">修改延时</code>\n<code src=\"./demo/loading.tsx\">加载中</code>\n<code src=\"./demo/thenable.tsx\">Promise 接口</code>\n<code src=\"./demo/custom-style.tsx\">自定义样式</code>\n<code src=\"./demo/update.tsx\">更新消息内容</code>\n<code src=\"./demo/info.tsx\">静态方法（不推荐）</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n组件提供了一些静态方法，使用方式和参数如下：\n\n- `message.success(content, [duration], onClose)`\n- `message.error(content, [duration], onClose)`\n- `message.info(content, [duration], onClose)`\n- `message.warning(content, [duration], onClose)`\n- `message.loading(content, [duration], onClose)`\n\n| 参数     | 说明                                        | 类型                | 默认值 |\n| -------- | ------------------------------------------- | ------------------- | ------ |\n| content  | 提示内容                                    | ReactNode \\| config | -      |\n| duration | 自动关闭的延时，单位秒。设为 0 时不自动关闭 | number              | 3      |\n| onClose  | 关闭时触发的回调函数                        | function            | -      |\n\n组件同时提供 promise 接口。\n\n- `message[level](content, [duration]).then(afterClose)`\n- `message[level](content, [duration], onClose).then(afterClose)`\n\n其中 `message[level]` 是组件已经提供的静态方法。`then` 接口返回值是 Promise。\n\n也可以对象的形式传递参数：\n\n- `message.open(config)`\n- `message.success(config)`\n- `message.error(config)`\n- `message.info(config)`\n- `message.warning(config)`\n- `message.loading(config)`\n\n`config` 对象属性如下：\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| className | 自定义 CSS class | string | - |\n| content | 提示内容 | ReactNode | - |\n| duration | 自动关闭的延时，单位秒。设为 0 时不自动关闭 | number | 3 |\n| icon | 自定义图标 | ReactNode | - |\n| key | 当前提示的唯一标志 | string \\| number | - |\n| style | 自定义内联样式 | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - |\n| onClick | 点击 message 时触发的回调函数 | function | - |\n| onClose | 关闭时触发的回调函数 | function | - |\n\n### 全局方法\n\n还提供了全局配置和全局销毁方法：\n\n- `message.config(options)`\n- `message.destroy()`\n\n> 也可通过 `message.destroy(key)` 来关闭一条消息。\n\n#### message.config\n\n> 当你使用 `ConfigProvider` 进行全局化配置时，系统会默认自动开启 RTL 模式。(4.3.0+)\n>\n> 当你想单独使用，可通过如下设置开启 RTL 模式。\n\n```js\nmessage.config({\n  top: 100,\n  duration: 2,\n  maxCount: 3,\n  rtl: true,\n  prefixCls: 'my-message',\n});\n```\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| duration | 默认自动关闭延时，单位秒 | number | 3 |  |\n| getContainer | 配置渲染节点的输出位置，但依旧为全屏展示 | () => HTMLElement | () => document.body |  |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - |  |\n| prefixCls | 消息节点的 className 前缀 | string | `ant-message` | 4.5.0 |\n| rtl | 是否开启 RTL 模式 | boolean | false |  |\n| top | 消息距离顶部的位置 | number | 8 |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Message\"></ComponentTokenTable>\n\n## FAQ\n\n### 为什么 message 不能获取 context、redux 的内容和 ConfigProvider 的 `locale/prefixCls/theme` 等配置？\n\n直接调用 message 方法，antd 会通过 `ReactDOM.render` 动态创建新的 React 实体。其 context 与当前代码所在 context 并不相同，因而无法获取 context 信息。\n\n当你需要 context 信息（例如 ConfigProvider 配置的内容）时，可以通过 `message.useMessage` 方法会返回 `api` 实体以及 `contextHolder` 节点。将其插入到你需要获取 context 位置即可：\n\n```tsx\nconst [api, contextHolder] = message.useMessage();\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder 在 Context1 内，它可以获得 Context1 的 context */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder 在 Context2 外，因而不会获得 Context2 的 context */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n**异同**：通过 hooks 创建的 `contextHolder` 必须插入到子元素节点中才会生效，当你不需要上下文信息时请直接调用。\n\n> 可通过 [App 包裹组件](/components/app-cn) 简化 `useMessage` 等方法需要手动植入 contextHolder 的问题。\n\n### 静态方法如何设置 prefixCls ？\n\n你可以通过 [`ConfigProvider.config`](/components/config-provider-cn#configproviderconfig-4130) 进行设置。\n","en-US":"---\ncategory: Components\ngroup: Feedback\nnoinstant: true\ntitle: Message\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JjZBT6N1MusAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*7qMTRoq3ZGkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nDisplay global messages as feedback in response to user operations.\n\n## When To Use\n\n- To provide feedback such as success, warning, error etc.\n- A message is displayed at top and center and will be dismissed automatically, as a non-interrupting light-weighted prompt.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/hooks.tsx\">Hooks usage (recommended)</code>\n<code src=\"./demo/other.tsx\">Other types of message</code>\n<code src=\"./demo/duration.tsx\">Customize duration</code>\n<code src=\"./demo/loading.tsx\">Message with loading indicator</code>\n<code src=\"./demo/thenable.tsx\">Promise interface</code>\n<code src=\"./demo/custom-style.tsx\">Customized style</code>\n<code src=\"./demo/update.tsx\">Update Message Content</code>\n<code src=\"./demo/info.tsx\">Static method (deprecated)</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\nThis component provides some static methods, with usage and arguments as following:\n\n- `message.success(content, [duration], onClose)`\n- `message.error(content, [duration], onClose)`\n- `message.info(content, [duration], onClose)`\n- `message.warning(content, [duration], onClose)`\n- `message.loading(content, [duration], onClose)`\n\n| Argument | Description | Type | Default |\n| --- | --- | --- | --- |\n| content | The content of the message | ReactNode \\| config | - |\n| duration | Time(seconds) before auto-dismiss, don't dismiss if set to 0 | number | 1.5 |\n| onClose | Specify a function that will be called when the message is closed | function | - |\n\n`afterClose` can be called in thenable interface:\n\n- `message[level](content, [duration]).then(afterClose)`\n- `message[level](content, [duration], onClose).then(afterClose)`\n\nwhere `level` refers one static methods of `message`. The result of `then` method will be a Promise.\n\nSupports passing parameters wrapped in an object:\n\n- `message.open(config)`\n- `message.success(config)`\n- `message.error(config)`\n- `message.info(config)`\n- `message.warning(config)`\n- `message.loading(config)`\n\nThe properties of config are as follows:\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| className | Customized CSS class | string | - |\n| content | The content of the message | ReactNode | - |\n| duration | Time(seconds) before auto-dismiss, don't dismiss if set to 0 | number | 3 |\n| icon | Customized Icon | ReactNode | - |\n| key | The unique identifier of the Message | string \\| number | - |\n| style | Customized inline style | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - |\n| onClick | Specify a function that will be called when the message is clicked | function | - |\n| onClose | Specify a function that will be called when the message is closed | function | - |\n\n### Global static methods\n\nMethods for global configuration and destruction are also provided:\n\n- `message.config(options)`\n- `message.destroy()`\n\n> use `message.destroy(key)` to remove a message。\n\n#### message.config\n\n> When you use `ConfigProvider` for global configuration, the system will automatically start RTL mode by default.(4.3.0+)\n>\n> When you want to use it alone, you can start the RTL mode through the following settings.\n\n```js\nmessage.config({\n  top: 100,\n  duration: 2,\n  maxCount: 3,\n  rtl: true,\n  prefixCls: 'my-message',\n});\n```\n\n| Argument | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| duration | Time before auto-dismiss, in seconds | number | 3 |  |\n| getContainer | Return the mount node for Message, but still display at fullScreen | () => HTMLElement | () => document.body |  |\n| maxCount | Max message show, drop oldest if exceed limit | number | - |  |\n| prefixCls | The prefix className of message node | string | `ant-message` | 4.5.0 |\n| rtl | Whether to enable RTL mode | boolean | false |  |\n| top | Distance from top | number | 8 |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Message\"></ComponentTokenTable>\n\n## FAQ\n\n### Why I can not access context, redux, ConfigProvider `locale/prefixCls/theme` in message?\n\nantd will dynamic create React instance by `ReactDOM.render` when call message methods. Whose context is different with origin code located context.\n\nWhen you need context info (like ConfigProvider context), you can use `message.useMessage` to get `api` instance and `contextHolder` node. And put it in your children:\n\n```tsx\nconst [api, contextHolder] = message.useMessage();\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder is inside Context1 which means api will get value of Context1 */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n**Note:** You must insert `contextHolder` into your children with hooks. You can use origin method if you do not need context connection.\n\n> [App Package Component](/components/app) can be used to simplify the problem of `useMessage` and other methods that need to manually implant contextHolder.\n\n### How to set static methods prefixCls ？\n\nYou can config with [`ConfigProvider.config`](/components/config-provider#configproviderconfig-4130)\n"},"modal":{"zh-CN":"---\ngroup: 反馈\ncategory: Components\nsubtitle: 对话框\ntitle: Modal\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*wM3qQ5XrhlcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*fBrgSJBmavgAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n模态对话框。\n\n## 何时使用\n\n需要用户处理事务，又不希望跳转页面以致打断工作流程时，可以使用 `Modal` 在当前页面正中打开一个浮层，承载相应的操作。\n\n另外当需要一个简洁的确认框询问用户时，可以使用 [`App.useApp`](/components/app-cn/) 封装的语法糖方法。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/async.tsx\">异步关闭</code>\n<code src=\"./demo/footer.tsx\">自定义页脚</code>\n<code src=\"./demo/footer-render.tsx\">自定义页脚渲染函数</code>\n<code src=\"./demo/hooks.tsx\">使用 hooks 获得上下文</code>\n<code src=\"./demo/locale.tsx\">国际化</code>\n<code src=\"./demo/manual.tsx\">手动更新和移除</code>\n<code src=\"./demo/position.tsx\">自定义位置</code>\n<code src=\"./demo/dark.tsx\" debug>暗背景</code>\n<code src=\"./demo/button-props.tsx\">自定义页脚按钮属性</code>\n<code src=\"./demo/modal-render.tsx\">自定义渲染对话框</code>\n<code src=\"./demo/width.tsx\">自定义模态的宽度</code>\n<code src=\"./demo/static-info.tsx\">静态方法</code>\n<code src=\"./demo/confirm.tsx\">静态确认对话框</code>\n<code src=\"./demo/classNames.tsx\">自定义内部模块 className</code>\n<code src=\"./demo/confirm-router.tsx\">销毁确认对话框</code>\n<code src=\"./demo/nested.tsx\" debug>嵌套弹框</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/custom-mouse-position.tsx\" debug>控制弹框动画原点</code>\n<code src=\"./demo/wireframe.tsx\" debug>线框风格</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| afterClose | Modal 完全关闭后的回调 | function | - |  |\n| classNames | 配置弹窗内置模块的 className | `header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;` | - |  |\n| styles | 配置弹窗内置模块的 style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties;` | - | 5.10.0 |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - |  |\n| cancelText | 取消按钮文字 | ReactNode | `取消` |  |\n| centered | 垂直居中展示 Modal | boolean | false |  |\n| closeIcon | 自定义关闭图标。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | boolean \\| ReactNode | &lt;CloseOutlined /> |  |\n| confirmLoading | 确定按钮 loading | boolean | false |  |\n| destroyOnClose | 关闭时销毁 Modal 里的子元素 | boolean | false |  |\n| focusTriggerAfterClose | 对话框关闭后是否需要聚焦触发元素 | boolean | true | 4.9.0 |\n| footer | 底部内容，当不需要默认底部按钮时，可以设为 `footer={null}` | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode \\| React.ReactNode | (确定取消按钮) | 5.9.0 |\n| forceRender | 强制渲染 Modal | boolean | false |  |\n| getContainer | 指定 Modal 挂载的节点，但依旧为全屏展示，`false` 为挂载在当前位置 | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | document.body |  |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true |  |\n| mask | 是否展示遮罩 | boolean | true |  |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | true |  |\n| modalRender | 自定义渲染对话框 | (node: ReactNode) => ReactNode | - | 4.7.0 |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - |  |\n| okText | 确认按钮文字 | ReactNode | `确定` |  |\n| okType | 确认按钮类型 | string | `primary` |  |\n| style | 可用于设置浮层的样式，调整浮层位置等 | CSSProperties | - |  |\n| title | 标题 | ReactNode | - |  |\n| open | 对话框是否可见 | boolean | - |  |\n| width | 宽度 | string \\| number | 520 |  |\n| wrapClassName | 对话框外层容器的类名 | string | - |  |\n| zIndex | 设置 Modal 的 `z-index` | number | 1000 |  |\n| onCancel | 点击遮罩层或右上角叉或取消按钮的回调 | function(e) | - |  |\n| onOk | 点击确定回调 | function(e) | - |  |\n| afterOpenChange | 打开和关闭 Modal 时动画结束后的回调 | (open: boolean) => void | - | 5.4.0 |\n\n#### 注意\n\n- `<Modal />` 默认关闭后状态不会自动清空，如果希望每次打开都是新内容，请设置 `destroyOnClose`。\n- `<Modal />` 和 Form 一起配合使用时，设置 `destroyOnClose` 也不会在 Modal 关闭时销毁表单字段数据，需要设置 `<Form preserve={false} />`。\n- `Modal.method()` RTL 模式仅支持 hooks 用法。\n\n### Modal.method()\n\n包括：\n\n- `Modal.info`\n- `Modal.success`\n- `Modal.error`\n- `Modal.warning`\n- `Modal.confirm`\n\n以上均为一个函数，参数为 object，具体属性如下：\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| afterClose | Modal 完全关闭后的回调 | function | - | 4.9.0 |\n| autoFocusButton | 指定自动获得焦点的按钮 | null \\| `ok` \\| `cancel` | `ok` |  |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - |  |\n| cancelText | 设置 Modal.confirm 取消按钮文字 | string | `取消` |  |\n| centered | 垂直居中展示 Modal | boolean | false |  |\n| className | 容器类名 | string | - |  |\n| closable | 是否显示右上角的关闭按钮 | boolean | false | 4.9.0 |\n| closeIcon | 自定义关闭图标 | ReactNode | undefined | 4.9.0 |\n| content | 内容 | ReactNode | - |  |\n| footer | 底部内容，当不需要默认底部按钮时，可以设为 `footer: null` | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode \\| React.ReactNode | - | 5.9.0 |\n| getContainer | 指定 Modal 挂载的 HTML 节点，false 为挂载在当前 dom | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | document.body |  |\n| icon | 自定义图标 | ReactNode | &lt;ExclamationCircleFilled /> |  |\n| keyboard | 是否支持键盘 esc 关闭 | boolean | true |  |\n| mask | 是否展示遮罩 | boolean | true |  |\n| maskClosable | 点击蒙层是否允许关闭 | boolean | false |  |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - |  |\n| okText | 确认按钮文字 | string | `确定` |  |\n| okType | 确认按钮类型 | string | `primary` |  |\n| style | 可用于设置浮层的样式，调整浮层位置等 | CSSProperties | - |  |\n| title | 标题 | ReactNode | - |  |\n| width | 宽度 | string \\| number | 416 |  |\n| wrapClassName | 对话框外层容器的类名 | string | - | 4.18.0 |\n| zIndex | 设置 Modal 的 `z-index` | number | 1000 |  |\n| onCancel | 取消回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭 | function(close) | - |  |\n| onOk | 点击确定回调，参数为关闭函数，返回 promise 时 resolve 后自动关闭 | function(close) | - |  |\n\n以上函数调用后，会返回一个引用，可以通过该引用更新和关闭弹窗。\n\n```jsx\nconst modal = Modal.info();\n\nmodal.update({\n  title: '修改的标题',\n  content: '修改的内容',\n});\n\n// 在 4.8.0 或更高版本中，可以通过传入函数的方式更新弹窗\nmodal.update((prevConfig) => ({\n  ...prevConfig,\n  title: `${prevConfig.title}（新）`,\n}));\n\nmodal.destroy();\n```\n\n- `Modal.destroyAll`\n\n使用 `Modal.destroyAll()` 可以销毁弹出的确认窗（即上述的 `Modal.info`、`Modal.success`、`Modal.error`、`Modal.warning`、`Modal.confirm`）。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题，而不用各处去使用实例的返回值进行关闭（`modal.destroy()` 适用于主动关闭，而不是路由这样被动关闭）\n\n```jsx\nimport { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  Modal.destroyAll();\n});\n```\n\n### Modal.useModal()\n\n当你需要使用 Context 时，可以通过 `Modal.useModal` 创建一个 `contextHolder` 插入子节点中。通过 hooks 创建的临时 Modal 将会得到 `contextHolder` 所在位置的所有上下文。创建的 `modal` 对象拥有与 [`Modal.method`](#modalmethod) 相同的创建通知方法。\n\n```jsx\nconst [modal, contextHolder] = Modal.useModal();\n\nReact.useEffect(() => {\n  modal.confirm({\n    // ...\n  });\n}, []);\n\nreturn <div>{contextHolder}</div>;\n```\n\n`modal.confirm` 返回方法：\n\n- `destroy`：销毁当前窗口\n- `update`：更新当前窗口\n- `then`：Promise 链式调用，支持 `await` 操作。该方法为 Hooks 仅有\n\n```tsx\n//点击 `onOk` 时返回 `true`，点击 `onCancel` 时返回 `false`\nconst confirmed = await modal.confirm({ ... });\n```\n\n## footerRenderParams\n\n<!-- prettier-ignore -->\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| originNode | 默认节点 | React.ReactNode                   | -      |\n| extra      | 扩展选项 | { OkBtn: FC; CancelBtn: FC } | -      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Modal\"></ComponentTokenTable>\n\n## FAQ\n\n### 为什么 Modal 关闭时，内容不会更新？\n\nModal 在关闭时会将内容进行 memo 从而避免关闭过程中的内容跳跃。也因此如果你在配合使用 Form 有关闭时重置 `initialValues` 的操作，请通过在 effect 中调用 `resetFields` 来重置。\n\n### 为什么 Modal 方法不能获取 context、redux、的内容和 ConfigProvider `locale/prefixCls/theme` 等配置？\n\n直接调用 Modal 方法，antd 会通过 `ReactDOM.render` 动态创建新的 React 实体。其 context 与当前代码所在 context 并不相同，因而无法获取 context 信息。\n\n当你需要 context 信息（例如 ConfigProvider 配置的内容）时，可以通过 `Modal.useModal` 方法会返回 `modal` 实体以及 `contextHolder` 节点。将其插入到你需要获取 context 位置即可：\n\n```tsx\nconst [modal, contextHolder] = Modal.useModal();\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder 在 Context1 内，它可以获得 Context1 的 context */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder 在 Context2 外，因而不会获得 Context2 的 context */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n**异同**：通过 hooks 创建的 `contextHolder` 必须插入到子元素节点中才会生效，当你不需要上下文信息时请直接调用。\n\n> 可通过 [App 包裹组件](/components/app-cn) 简化 `useModal` 等方法需要手动植入 contextHolder 的问题。\n\n### 静态方法如何设置 prefixCls ？\n\n你可以通过 [`ConfigProvider.config`](/components/config-provider-cn#configproviderconfig-4130) 进行设置。\n","en-US":"---\ngroup: Feedback\ncategory: Components\ntitle: Modal\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*wM3qQ5XrhlcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*fBrgSJBmavgAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nModal dialogs.\n\n## When To Use\n\nWhen requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use `Modal` to create a new floating layer over the current page to get user feedback or display information.\n\nAdditionally, if you need to show a simple confirmation dialog, you can use [`App.useApp`](/components/app/) hooks.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/async.tsx\">Asynchronously close</code>\n<code src=\"./demo/footer.tsx\">Customized Footer</code>\n<code src=\"./demo/footer-render.tsx\">Customized Footer render function</code>\n<code src=\"./demo/hooks.tsx\">Use hooks to get context</code>\n<code src=\"./demo/locale.tsx\">Internationalization</code>\n<code src=\"./demo/manual.tsx\">Manual to update destroy</code>\n<code src=\"./demo/position.tsx\">To customize the position of modal</code>\n<code src=\"./demo/dark.tsx\" debug>Dark Bg</code>\n<code src=\"./demo/button-props.tsx\">Customize footer buttons props</code>\n<code src=\"./demo/modal-render.tsx\">Custom modal content render</code>\n<code src=\"./demo/width.tsx\">To customize the width of modal</code>\n<code src=\"./demo/static-info.tsx\">Static Method</code>\n<code src=\"./demo/confirm.tsx\">Static confirmation</code>\n<code src=\"./demo/classNames.tsx\">Customize className for build-in module</code>\n<code src=\"./demo/confirm-router.tsx\">destroy confirmation modal dialog</code>\n<code src=\"./demo/nested.tsx\" debug>Nested Modal</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/custom-mouse-position.tsx\" debug>Control modal's animation origin position</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| afterClose | Specify a function that will be called when modal is closed completely | function | - |  |\n| classNames | Config Modal build-in module's className | `header?: string; body?: string; footer?: string; mask?: string; wrapper?: string;` | - |  |\n| styles | Config Modal build-in module's style | `header?: CSSProperties; body?: CSSProperties; footer?: CSSProperties; mask?: CSSProperties;` | - | 5.10.0 |\n| cancelButtonProps | The cancel button props | [ButtonProps](/components/button/#api) | - |  |\n| cancelText | Text of the Cancel button | ReactNode | `Cancel` |  |\n| centered | Centered Modal | boolean | false |  |\n| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | &lt;CloseOutlined /> |  |\n| confirmLoading | Whether to apply loading visual effect for OK button or not | boolean | false |  |\n| destroyOnClose | Whether to unmount child components on onClose | boolean | false |  |\n| focusTriggerAfterClose | Whether need to focus trigger element after dialog is closed | boolean | true | 4.9.0 |\n| footer | Footer content, set as `footer={null}` when you don't need default buttons | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode \\| React.ReactNode | (OK and Cancel buttons) |  |\n| forceRender | Force render Modal | boolean | false |  |\n| getContainer | The mounted node for Modal but still display at fullscreen | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | document.body |  |\n| keyboard | Whether support press esc to close | boolean | true |  |\n| mask | Whether show mask or not | boolean | true |  |\n| maskClosable | Whether to close the modal dialog when the mask (area outside the modal) is clicked | boolean | true |  |\n| modalRender | Custom modal content render | (node: ReactNode) => ReactNode | - | 4.7.0 |\n| okButtonProps | The ok button props | [ButtonProps](/components/button/#api) | - |  |\n| okText | Text of the OK button | ReactNode | `OK` |  |\n| okType | Button `type` of the OK button | string | `primary` |  |\n| style | Style of floating layer, typically used at least for adjusting the position | CSSProperties | - |  |\n| title | The modal dialog's title | ReactNode | - |  |\n| open | Whether the modal dialog is visible or not | boolean | false |  |\n| width | Width of the modal dialog | string \\| number | 520 |  |\n| wrapClassName | The class name of the container of the modal dialog | string | - |  |\n| zIndex | The `z-index` of the Modal | number | 1000 |  |\n| onCancel | Specify a function that will be called when a user clicks mask, close button on top right or Cancel button | function(e) | - |  |\n| onOk | Specify a function that will be called when a user clicks the OK button | function(e) | - |  |\n| afterOpenChange | Callback when the animation ends when Modal is turned on and off | (open: boolean) => void | - | 5.4.0 |\n\n#### Note\n\n- The state of Modal will be preserved at it's component lifecycle by default, if you wish to open it with a brand new state every time, set `destroyOnClose` on it.\n- There is a situation that using `<Modal />` with Form, which won't clear fields value when closing Modal even you have set `destroyOnClose`. You need `<Form preserve={false} />` in this case.\n- `Modal.method()` RTL mode only supports hooks.\n\n### Modal.method()\n\nThere are five ways to display the information based on the content's nature:\n\n- `Modal.info`\n- `Modal.success`\n- `Modal.error`\n- `Modal.warning`\n- `Modal.confirm`\n\nThe items listed above are all functions, expecting a settings object as parameter. The properties of the object are follows:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| afterClose | Specify a function that will be called when modal is closed completely | function | - | 4.9.0 |\n| autoFocusButton | Specify which button to autofocus | null \\| `ok` \\| `cancel` | `ok` |  |\n| cancelButtonProps | The cancel button props | [ButtonProps](/components/button/#api) | - |  |\n| cancelText | Text of the Cancel button with Modal.confirm | string | `Cancel` |  |\n| centered | Centered Modal | boolean | false |  |\n| className | The className of container | string | - |  |\n| closable | Whether a close (x) button is visible on top right of the confirm dialog or not | boolean | false | 4.9.0 |\n| closeIcon | Custom close icon | ReactNode | undefined | 4.9.0 |\n| content | Content | ReactNode | - |  |\n| footer | Footer content, set as `footer: null` when you don't need default buttons | (params:[footerRenderParams](/components/modal-cn#footerrenderparams))=> React.ReactNode \\| React.ReactNode | - | 5.9.0 |\n| getContainer | Return the mount node for Modal | HTMLElement \\| () => HTMLElement \\| Selectors \\| false | document.body |  |\n| icon | Custom icon | ReactNode | &lt;ExclamationCircleFilled /> |  |\n| keyboard | Whether support press esc to close | boolean | true |  |\n| mask | Whether show mask or not. | boolean | true |  |\n| maskClosable | Whether to close the modal dialog when the mask (area outside the modal) is clicked | boolean | false |  |\n| okButtonProps | The ok button props | [ButtonProps](/components/button/#api) | - |  |\n| okText | Text of the OK button | string | `OK` |  |\n| okType | Button `type` of the OK button | string | `primary` |  |\n| style | Style of floating layer, typically used at least for adjusting the position | CSSProperties | - |  |\n| title | Title | ReactNode | - |  |\n| width | Width of the modal dialog | string \\| number | 416 |  |\n| wrapClassName | The class name of the container of the modal dialog | string | - | 4.18.0 |\n| zIndex | The `z-index` of the Modal | number | 1000 |  |\n| onCancel | Specify a function that will be called when the user clicks the Cancel button. The parameter of this function is a function whose execution should include closing the dialog. If the function does not take any parameter (`!onCancel.length`) then modal dialog will be closed unless returned value is `true` (`!!onCancel()`). You can also just return a promise and when the promise is resolved, the modal dialog will also be closed | function(close) | - |  |\n| onOk | Specify a function that will be called when the user clicks the OK button. The parameter of this function is a function whose execution should include closing the dialog. If the function does not take any parameter (`!onOk.length`) then modal dialog will be closed unless returned value is `true` (`!!onOk()`). You can also just return a promise and when the promise is resolved, the modal dialog will also be closed | function(close) | - |  |\n\nAll the `Modal.method`s will return a reference, and then we can update and close the modal dialog by the reference.\n\n```jsx\nconst modal = Modal.info();\n\nmodal.update({\n  title: 'Updated title',\n  content: 'Updated content',\n});\n\n// on 4.8.0 or above, you can pass a function to update modal\nmodal.update((prevConfig) => ({\n  ...prevConfig,\n  title: `${prevConfig.title} (New)`,\n}));\n\nmodal.destroy();\n```\n\n- `Modal.destroyAll`\n\n`Modal.destroyAll()` could destroy all confirmation modal dialogs(`Modal.confirm|success|info|error|warning`). Usually, you can use it in router change event to destroy confirm modal dialog automatically without use modal reference to close( it's too complex to use for all modal dialogs)\n\n```jsx\nimport { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  Modal.destroyAll();\n});\n```\n\n### Modal.useModal()\n\nWhen you need using Context, you can use `contextHolder` which created by `Modal.useModal` to insert into children. Modal created by hooks will get all the context where `contextHolder` are. Created `modal` has the same creating function with `Modal.method`.\n\n```jsx\nconst [modal, contextHolder] = Modal.useModal();\n\nReact.useEffect(() => {\n  modal.confirm({\n    // ...\n  });\n}, []);\n\nreturn <div>{contextHolder}</div>;\n```\n\n`modal.confirm` return method:\n\n- `destroy`: Destroy current modal\n- `update`: Update current modal\n- `then`: (Hooks only) Promise chain call, support `await` operation\n\n```tsx\n// Return `true` when click `onOk` and `false` when click `onCancel`\nconst confirmed = await modal.confirm({ ... });\n```\n\n## footerRenderParams\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| originNode | default node | React.ReactNode                   | -      |\n| extra      | extended options | { OkBtn: FC; CancelBtn: FC } | -      |\n\n## Design Token\n\n<ComponentTokenTable component=\"Modal\"></ComponentTokenTable>\n\n## FAQ\n\n### Why content not update when Modal closed?\n\nModal will use memo to avoid content jumping when closed. Also, if you use Form in Modal, you can reset `initialValues` by calling `resetFields` in effect.\n\n### Why I can not access context, redux, ConfigProvider `locale/prefixCls` in Modal.xxx?\n\nantd will dynamic create React instance by `ReactDOM.render` when call Modal methods. Whose context is different with origin code located context.\n\nWhen you need context info (like ConfigProvider context), you can use `Modal.useModal` to get `modal` instance and `contextHolder` node. And put it in your children:\n\n```tsx\nconst [modal, contextHolder] = Modal.useModal();\n\n// then call modal.confirm instead of Modal.confirm\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder is in Context1, which means modal will get context of Context1 */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder is out of Context2, which means modal will not get context of Context2 */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n**Note:** You must insert `contextHolder` into your children with hooks. You can use origin method if you do not need context connection.\n\n> [App Package Component](/components/app) can be used to simplify the problem of `useModal` and other methods that need to manually implant contextHolder.\n\n### How to set static methods prefixCls ？\n\nYou can config with [`ConfigProvider.config`](/components/config-provider#configproviderconfig-4130)\n"},"notification":{"zh-CN":"---\ncategory: Components\ngroup: 反馈\nnoinstant: true\ntitle: Notification\nsubtitle: 通知提醒框\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*6RWNQ78WtvEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*9hTIToR-3YYAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n全局展示通知提醒信息。\n\n## 何时使用\n\n在系统四个角显示通知提醒信息。经常用于以下情况：\n\n- 较为复杂的通知内容。\n- 带有交互的通知，给出用户下一步的行动点。\n- 系统主动推送。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/hooks.tsx\">Hooks 调用（推荐）</code>\n<code src=\"./demo/duration.tsx\">自动关闭的延时</code>\n<code src=\"./demo/with-icon.tsx\">带有图标的通知提醒框</code>\n<code src=\"./demo/with-btn.tsx\">自定义按钮</code>\n<code src=\"./demo/custom-icon.tsx\">自定义图标</code>\n<code src=\"./demo/placement.tsx\">位置</code>\n<code src=\"./demo/custom-style.tsx\">自定义样式</code>\n<code src=\"./demo/update.tsx\">更新消息内容</code>\n<code src=\"./demo/stack.tsx\" version=\"5.10.0\">堆叠</code>\n<code src=\"./demo/basic.tsx\">静态方法（不推荐）</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n- `notification.success(config)`\n- `notification.error(config)`\n- `notification.info(config)`\n- `notification.warning(config)`\n- `notification.open(config)`\n- `notification.destroy(key?: String)`\n\nconfig 参数如下：\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| btn | 自定义关闭按钮 | ReactNode | - | - |\n| className | 自定义 CSS class | string | - | - |\n| closeIcon | 自定义关闭图标 | boolean \\| ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| description | 通知提醒内容，必选 | ReactNode | - | - |\n| duration | 默认 4.5 秒后自动关闭，配置为 null 则不自动关闭 | number | 4.5 | - |\n| icon | 自定义图标 | ReactNode | - | - |\n| key | 当前通知唯一标志 | string | - | - |\n| message | 通知提醒标题，必选 | ReactNode | - | - |\n| placement | 弹出位置，可选 `topLeft` `topRight` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| style | 自定义内联样式 | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - | - |\n| role | 供屏幕阅读器识别的通知内容语义，默认为 `alert`。此情况下屏幕阅读器会立即打断当前正在阅读的其他内容，转而阅读通知内容 | `alert \\| status` | `alert` | 5.6.0 |\n| onClick | 点击通知时触发的回调函数 | function | - | - |\n| onClose | 当通知关闭时触发 | function | - | - |\n| props | 透传至通知 `div` 上的 props 对象，支持传入 `data-*` `aria-*` 或 `role` 作为对象的属性。需要注意的是，虽然在 TypeScript 类型中声明的类型支持传入 `data-*` 作为对象的属性，但目前只允许传入 `data-testid` 作为对象的属性。 详见 https://github.com/microsoft/TypeScript/issues/28960 | Object | - | - |\n\n- `notification.useNotification(config)`\n\nconfig 参数如下：\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bottom | 消息从底部弹出时，距离底部的位置，单位像素 | number | 24 |  |\n| closeIcon | 自定义关闭图标 | boolean \\| ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| getContainer | 配置渲染节点的输出位置 | () => HTMLNode | () => document.body |  |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` |  |\n| rtl | 是否开启 RTL 模式 | boolean | false |  |\n| stack | 堆叠模式，超过阈值时会将所有消息收起 | boolean \\| `{ threshold: number }` | `{ threshold: 3 }` | 5.10.0 |\n| top | 消息从顶部弹出时，距离顶部的位置，单位像素 | number | 24 |  |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | 4.17.0 |\n\n### 全局配置\n\n还提供了一个全局配置方法，在调用前提前配置，全局一次生效。\n\n`notification.config(options)`\n\n> 当你使用 `ConfigProvider` 进行全局化配置时，系统会默认自动开启 RTL 模式。(4.3.0+)\n>\n> 当你想单独使用，可通过如下设置开启 RTL 模式。\n\n```js\nnotification.config({\n  placement: 'bottomRight',\n  bottom: 50,\n  duration: 3,\n  rtl: true,\n});\n```\n\n#### notification.config\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bottom | 消息从底部弹出时，距离底部的位置，单位像素 | number | 24 |  |\n| closeIcon | 自定义关闭图标 | boolean \\| ReactNode | true | 5.7.0：设置为 null 或 false 时隐藏关闭按钮 |\n| duration | 默认自动关闭延时，单位秒 | number | 4.5 |  |\n| getContainer | 配置渲染节点的输出位置，但依旧为全屏展示 | () => HTMLNode | () => document.body |  |\n| placement | 弹出位置，可选 `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | string | `topRight` |  |\n| rtl | 是否开启 RTL 模式 | boolean | false |  |\n| top | 消息从顶部弹出时，距离顶部的位置，单位像素 | number | 24 |  |\n| maxCount | 最大显示数，超过限制时，最早的消息会被自动关闭 | number | - | 4.17.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Notification\"></ComponentTokenTable>\n\n## FAQ\n\n### 为什么 notification 不能获取 context、redux 的内容和 ConfigProvider 的 `locale/prefixCls/theme` 等配置？\n\n直接调用 notification 方法，antd 会通过 `ReactDOM.render` 动态创建新的 React 实体。其 context 与当前代码所在 context 并不相同，因而无法获取 context 信息。\n\n当你需要 context 信息（例如 ConfigProvider 配置的内容）时，可以通过 `notification.useNotification` 方法会返回 `api` 实体以及 `contextHolder` 节点。将其插入到你需要获取 context 位置即可：\n\n```tsx\nconst [api, contextHolder] = notification.useNotification();\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder 在 Context1 内，它可以获得 Context1 的 context */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder 在 Context2 外，因而不会获得 Context2 的 context */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n**异同**：通过 hooks 创建的 `contextHolder` 必须插入到子元素节点中才会生效，当你不需要上下文信息时请直接调用。\n\n> 可通过 [App 包裹组件](/components/app-cn) 简化 `useNotification` 等方法需要手动植入 contextHolder 的问题。\n\n### 静态方法如何设置 prefixCls ？\n\n你可以通过 [`ConfigProvider.config`](/components/config-provider-cn#configproviderconfig-4130) 进行设置。\n","en-US":"---\ncategory: Components\ngroup: Feedback\nnoinstant: true\ntitle: Notification\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*6RWNQ78WtvEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*9hTIToR-3YYAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nDisplay a notification message globally.\n\n## When To Use\n\nTo display a notification message at any of the four corners of the viewport. Typically it can be used in the following cases:\n\n- A notification with complex content.\n- A notification providing a feedback based on the user interaction. Or it may show some details about upcoming steps the user may have to follow.\n- A notification that is pushed by the application.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/hooks.tsx\">Hooks usage (recommended)</code>\n<code src=\"./demo/duration.tsx\">Duration after which the notification box is closed</code>\n<code src=\"./demo/with-icon.tsx\">Notification with icon</code>\n<code src=\"./demo/with-btn.tsx\">Custom close button</code>\n<code src=\"./demo/custom-icon.tsx\">Customized Icon</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/custom-style.tsx\">Customized style</code>\n<code src=\"./demo/update.tsx\">Update Message Content</code>\n<code src=\"./demo/stack.tsx\" version=\"5.10.0\">Stack</code>\n<code src=\"./demo/basic.tsx\">Static Method (deprecated)</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n- `notification.success(config)`\n- `notification.error(config)`\n- `notification.info(config)`\n- `notification.warning(config)`\n- `notification.open(config)`\n- `notification.destroy(key?: String)`\n\nThe properties of config are as follows:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| btn | Customized close button | ReactNode | - | - |\n| className | Customized CSS class | string | - | - |\n| closeIcon | Custom close icon | boolean \\| ReactNode | true | 5.7.0: close button will be hidden when setting to null or false |\n| description | The content of notification box (required) | ReactNode | - | - |\n| duration | Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically | number | 4.5 | - |\n| icon | Customized icon | ReactNode | - | - |\n| key | The unique identifier of the Notification | string | - | - |\n| message | The title of notification box (required) | ReactNode | - | - |\n| placement | Position of Notification, can be one of `topLeft` `topRight` `bottomLeft` `bottomRight` | string | `topRight` | - |\n| style | Customized inline style | [CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794) | - | - |\n| role | The semantics of notification content recognized by screen readers. The default value is `alert`. When set as the default value, the screen reader will promptly interrupt any ongoing content reading and prioritize the notification content for immediate attention. | `alert \\| status` | `alert` | 5.6.0 |\n| onClick | Specify a function that will be called when the notification is clicked | function | - | - |\n| onClose | Trigger when notification closed | function | - | - |\n| props | An object that can contain `data-*`, `aria-*`, or `role` props, to be put on the notification `div`. This currently only allows `data-testid` instead of `data-*` in TypeScript. See https://github.com/microsoft/TypeScript/issues/28960. | Object | - | - |\n\n- `notification.useNotification(config)`\n\nThe properties of config are as follows:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bottom | Distance from the bottom of the viewport, when `placement` is `bottomRight` or `bottomLeft` (unit: pixels) | number | 24 |  |\n| closeIcon | Custom close icon | boolean \\| ReactNode | true | 5.7.0: close button will be hidden when setting to null or false |\n| getContainer | Return the mount node for Notification | () => HTMLNode | () => document.body |  |\n| placement | Position of Notification, can be one of `topLeft` `topRight` `bottomLeft` `bottomRight` | string | `topRight` |  |\n| rtl | Whether to enable RTL mode | boolean | false |  |\n| stack | Notifications will be stacked when amount is over threshold | boolean \\| `{ threshold: number }` | `{ threshold: 3 }` | 5.10.0 |\n| top | Distance from the top of the viewport, when `placement` is `topRight` or `topLeft` (unit: pixels) | number | 24 |  |\n| maxCount | Max Notification show, drop oldest if exceed limit | number | - | 4.17.0 |\n\n`notification` also provides a global `config()` method that can be used for specifying the default options. Once this method is used, all the notification boxes will take into account these globally defined options when displaying.\n\n### Global configuration\n\n`notification.config(options)`\n\n> When you use `ConfigProvider` for global configuration, the system will automatically start RTL mode by default.(4.3.0+)\n>\n> When you want to use it alone, you can start the RTL mode through the following settings.\n\n#### notification.config\n\n```js\nnotification.config({\n  placement: 'bottomRight',\n  bottom: 50,\n  duration: 3,\n  rtl: true,\n});\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bottom | Distance from the bottom of the viewport, when `placement` is `bottomRight` or `bottomLeft` (unit: pixels) | number | 24 |  |\n| closeIcon | Custom close icon | boolean \\| ReactNode | true | 5.7.0: close button will be hidden when setting to null or false |\n| duration | Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically | number | 4.5 |  |\n| getContainer | Return the mount node for Notification, but still display at fullScreen | () => HTMLNode | () => document.body |  |\n| placement | Position of Notification, can be one of `topLeft` `topRight` `bottomLeft` `bottomRight` | string | `topRight` |  |\n| rtl | Whether to enable RTL mode | boolean | false |  |\n| top | Distance from the top of the viewport, when `placement` is `topRight` or `topLeft` (unit: pixels) | number | 24 |  |\n| maxCount | Max Notification show, drop oldest if exceed limit | number | - | 4.17.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Notification\"></ComponentTokenTable>\n\n## FAQ\n\n### Why I can not access context, redux, ConfigProvider `locale/prefixCls/theme` in notification?\n\nantd will dynamic create React instance by `ReactDOM.render` when call notification methods. Whose context is different with origin code located context.\n\nWhen you need context info (like ConfigProvider context), you can use `notification.useNotification` to get `api` instance and `contextHolder` node. And put it in your children:\n\n```tsx\nconst [api, contextHolder] = notification.useNotification();\n\nreturn (\n  <Context1.Provider value=\"Ant\">\n    {/* contextHolder is inside Context1 which means api will get value of Context1 */}\n    {contextHolder}\n    <Context2.Provider value=\"Design\">\n      {/* contextHolder is outside Context2 which means api will **not** get value of Context2 */}\n    </Context2.Provider>\n  </Context1.Provider>\n);\n```\n\n**Note:** You must insert `contextHolder` into your children with hooks. You can use origin method if you do not need context connection.\n\n> [App Package Component](/components/app) can be used to simplify the problem of `useNotification` and other methods that need to manually implant contextHolder.\n\n### How to set static methods prefixCls ？\n\nYou can config with [`ConfigProvider.config`](/components/config-provider#configproviderconfig-4130)\n"},"overview":{"zh-CN":"---\ncategory: Components\ntitle: 组件总览\n---\n\n`antd` 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。除了官方组件，我们也提供了[社区精选组件](/docs/react/recommendation-cn)作为必要的补充，另外如果您是内网用户，欢迎尝试使用 [TechUI](https://techui.alipay.com)。\n\n<ComponentOverview></ComponentOverview>\n","en-US":"---\ncategory: Components\ntitle: Components Overview\n---\n\n`antd` provides plenty of UI components to enrich your web applications, and we will improve components experience consistently. We also recommend some great [Third-Party Libraries](/docs/react/recommendation) additionally.\n\n<ComponentOverview></ComponentOverview>\n"},"pagination":{"zh-CN":"---\ncategory: Components\nsubtitle: 分页\ngroup: 导航\ntitle: Pagination\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8y_iTJGY_aUAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*WM86SrBC8TsAAAAAAAAAAAAADrJ8AQ/original\n---\n\n采用分页的形式分隔长列表，每次只加载一个页面。\n\n## 何时使用\n\n- 当加载/渲染所有数据将花费很多时间时；\n- 可切换页码浏览数据。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/more.tsx\">更多</code>\n<code src=\"./demo/changer.tsx\">改变</code>\n<code src=\"./demo/jump.tsx\">跳转</code>\n<code src=\"./demo/mini.tsx\">迷你</code>\n<code src=\"./demo/simple.tsx\">简洁</code>\n<code src=\"./demo/controlled.tsx\">受控</code>\n<code src=\"./demo/total.tsx\">总数</code>\n<code src=\"./demo/all.tsx\">全部展示</code>\n<code src=\"./demo/itemRender.tsx\">上一步和下一步</code>\n<code src=\"./demo/wireframe.tsx\" debug>线框风格</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n```jsx\n<Pagination onChange={onChange} total={50} />\n```\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| current | 当前页数 | number | - |  |\n| defaultCurrent | 默认的当前页数 | number | 1 |  |\n| defaultPageSize | 默认的每页条数 | number | 10 |  |\n| disabled | 禁用分页 | boolean | - |  |\n| hideOnSinglePage | 只有一页时是否隐藏分页器 | boolean | false |  |\n| itemRender | 用于自定义页码的结构，可用于优化 SEO | (page, type: 'page' \\| 'prev' \\| 'next', originalElement) => React.ReactNode | - |  |\n| pageSize | 每页条数 | number | - |  |\n| pageSizeOptions | 指定每页可以显示多少条 | string\\[] \\| number\\[] | \\[`10`, `20`, `50`, `100`] |  |\n| responsive | 当 size 未指定时，根据屏幕宽度自动调整尺寸 | boolean | - |  |\n| showLessItems | 是否显示较少页面内容 | boolean | false |  |\n| showQuickJumper | 是否可以快速跳转至某页 | boolean \\| { goButton: ReactNode } | false |  |\n| showSizeChanger | 是否展示 `pageSize` 切换器，当 `total` 大于 50 时默认为 true | boolean | - |  |\n| showTitle | 是否显示原生 tooltip 页码提示 | boolean | true |  |\n| showTotal | 用于显示数据总量和当前数据顺序 | function(total, range) | - |  |\n| simple | 当添加该属性时，显示为简单分页 | boolean | - |  |\n| size | 当为 `small` 时，是小尺寸分页 | `default` \\| `small` | `default` |  |\n| total | 数据总数 | number | 0 |  |\n| onChange | 页码或 `pageSize` 改变的回调，参数是改变后的页码及每页条数 | function(page, pageSize) | - |  |\n| onShowSizeChange | pageSize 变化的回调 | function(current, size) | - |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Pagination\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Navigation\ntitle: Pagination\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8y_iTJGY_aUAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*WM86SrBC8TsAAAAAAAAAAAAADrJ8AQ/original\n---\n\nA long list can be divided into several pages using `Pagination`, and only one page will be loaded at a time.\n\n## When To Use\n\n- When it will take a long time to load/render all items.\n- If you want to browse the data by navigating through pages.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/more.tsx\">More</code>\n<code src=\"./demo/changer.tsx\">Changer</code>\n<code src=\"./demo/jump.tsx\">Jumper</code>\n<code src=\"./demo/mini.tsx\">Mini size</code>\n<code src=\"./demo/simple.tsx\">Simple mode</code>\n<code src=\"./demo/controlled.tsx\">Controlled</code>\n<code src=\"./demo/total.tsx\">Total number</code>\n<code src=\"./demo/all.tsx\">Show All</code>\n<code src=\"./demo/itemRender.tsx\">Prev and next</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n<code src=\"./demo/component-token.tsx\" debug>component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n```jsx\n<Pagination onChange={onChange} total={50} />\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| current | Current page number | number | - |  |\n| defaultCurrent | Default initial page number | number | 1 |  |\n| defaultPageSize | Default number of data items per page | number | 10 |  |\n| disabled | Disable pagination | boolean | - |  |\n| hideOnSinglePage | Whether to hide pager on single page | boolean | false |  |\n| itemRender | To customize item's innerHTML | (page, type: 'page' \\| 'prev' \\| 'next', originalElement) => React.ReactNode | - |  |\n| pageSize | Number of data items per page | number | - |  |\n| pageSizeOptions | Specify the sizeChanger options | string\\[] \\| number\\[] | \\[`10`, `20`, `50`, `100`] |  |\n| responsive | If `size` is not specified, `Pagination` would resize according to the width of the window | boolean | - |  |\n| showLessItems | Show less page items | boolean | false |  |\n| showQuickJumper | Determine whether you can jump to pages directly | boolean \\| { goButton: ReactNode } | false |  |\n| showSizeChanger | Determine whether to show `pageSize` select, it will be true when `total > 50` | boolean | - |  |\n| showTitle | Show page item's title | boolean | true |  |\n| showTotal | To display the total number and range | function(total, range) | - |  |\n| simple | Whether to use simple mode | boolean | - |  |\n| size | Specify the size of `Pagination`, can be set to `small` | `default` \\| `small` | `default` |  |\n| total | Total number of data items | number | 0 |  |\n| onChange | Called when the page number or `pageSize` is changed, and it takes the resulting page number and pageSize as its arguments | function(page, pageSize) | - |  |\n| onShowSizeChange | Called when `pageSize` is changed | function(current, size) | - |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Pagination\"></ComponentTokenTable>\n"},"popconfirm":{"zh-CN":"---\ncategory: Components\nsubtitle: 气泡确认框\ngroup: 反馈\ntitle: Popconfirm\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sAGpRoBtTXcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HrFtQ6jJJFQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n点击元素，弹出气泡式的确认框。\n\n## 何时使用\n\n目标元素的操作需要用户进一步的确认时，在目标元素附近弹出浮层提示，询问用户。\n\n和 `confirm` 弹出的全屏居中模态对话框相比，交互形式更轻量。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/locale.tsx\">国际化</code>\n<code src=\"./demo/placement.tsx\">位置</code>\n<code src=\"./demo/dynamic-trigger.tsx\">条件触发</code>\n<code src=\"./demo/icon.tsx\">自定义 Icon 图标</code>\n<code src=\"./demo/async.tsx\">异步关闭</code>\n<code src=\"./demo/promise.tsx\">基于 Promise 的异步关闭</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/wireframe.tsx\" debug>线框风格</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| cancelButtonProps | cancel 按钮 props | [ButtonProps](/components/button-cn#api) | - |  |\n| cancelText | 取消按钮文字 | string | `取消` |  |\n| disabled | 阻止点击 Popconfirm 子元素时弹出确认框 | boolean | false |  |\n| icon | 自定义弹出气泡 Icon 图标 | ReactNode | &lt;ExclamationCircle /> |  |\n| okButtonProps | ok 按钮 props | [ButtonProps](/components/button-cn#api) | - |  |\n| okText | 确认按钮文字 | string | `确定` |  |\n| okType | 确认按钮类型 | string | `primary` |  |\n| showCancel | 是否显示取消按钮 | boolean | true | 4.18.0 |\n| title | 确认框标题 | ReactNode \\| () => ReactNode | - |  |\n| description | 确认内容的详细描述 | ReactNode \\| () => ReactNode | - | 5.1.0 |\n| onCancel | 点击取消的回调 | function(e) | - |  |\n| onConfirm | 点击确认的回调 | function(e) | - |  |\n| onPopupClick | 弹出气泡点击事件 | function(e) | - | 5.5.0 |\n\n更多属性请参考 [Tooltip](/components/tooltip-cn/#api)。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Popconfirm\"></ComponentTokenTable>\n\n## 注意\n\n请确保 `Popconfirm` 的子元素能接受 `onMouseEnter`、`onMouseLeave`、`onFocus`、`onClick` 事件。\n","en-US":"---\ncategory: Components\ngroup: Feedback\ntitle: Popconfirm\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sAGpRoBtTXcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HrFtQ6jJJFQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA simple and compact confirmation dialog of an action.\n\n## When To Use\n\nA simple and compact dialog used for asking for user confirmation.\n\nThe difference with the `confirm` modal dialog is that it's more lightweight than the static popped full-screen confirm modal.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/locale.tsx\">Locale text</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/dynamic-trigger.tsx\">Conditional trigger</code>\n<code src=\"./demo/icon.tsx\">Customize icon</code>\n<code src=\"./demo/async.tsx\">Asynchronously close</code>\n<code src=\"./demo/promise.tsx\">Asynchronously close on Promise</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Param | Description | Type | Default value | Version |\n| --- | --- | --- | --- | --- |\n| cancelButtonProps | The cancel button props | [ButtonProps](/components/button/#api) | - |  |\n| cancelText | The text of the Cancel button | string | `Cancel` |  |\n| disabled | Whether show popconfirm when click its childrenNode | boolean | false |  |\n| icon | Customize icon of confirmation | ReactNode | &lt;ExclamationCircle /> |  |\n| okButtonProps | The ok button props | [ButtonProps](/components/button/#api) | - |  |\n| okText | The text of the Confirm button | string | `OK` |  |\n| okType | Button `type` of the Confirm button | string | `primary` |  |\n| showCancel | Show cancel button | boolean | true | 4.18.0 |\n| title | The title of the confirmation box | ReactNode \\| () => ReactNode | - |  |\n| description | The description of the confirmation box title | ReactNode \\| () => ReactNode | - | 5.1.0 |\n| onCancel | A callback of cancel | function(e) | - |  |\n| onConfirm | A callback of confirmation | function(e) | - |  |\n| onPopupClick | A callback of popup click | function(e) | - | 5.5.0 |\n\nConsult [Tooltip's documentation](/components/tooltip/#api) to find more APIs.\n\n## Design Token\n\n<ComponentTokenTable component=\"Popconfirm\"></ComponentTokenTable>\n\n## Note\n\nPlease ensure that the child node of `Popconfirm` accepts `onMouseEnter`, `onMouseLeave`, `onFocus`, `onClick` events.\n"},"popover":{"zh-CN":"---\ncategory: Components\nsubtitle: 气泡卡片\ngroup: 数据展示\ntitle: Popover\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*XhL3QpRw92kAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*RMP_TrdZ3nsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n点击/鼠标移入元素，弹出气泡式的卡片浮层。\n\n## 何时使用\n\n当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现。\n\n和 `Tooltip` 的区别是，用户可以对浮层上的元素进行操作，因此它可以承载更复杂的内容，比如链接或按钮等。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/triggerType.tsx\">三种触发方式</code>\n<code src=\"./demo/placement.tsx\">位置</code>\n<code src=\"./demo/arrow.tsx\">箭头展示</code>\n<code src=\"./demo/control.tsx\">从浮层内关闭</code>\n<code src=\"./demo/hover-with-click.tsx\">悬停点击弹出窗口</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/wireframe.tsx\" debug>线框风格</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数    | 说明     | 类型                         | 默认值 | 版本 |\n| ------- | -------- | ---------------------------- | ------ | ---- |\n| content | 卡片内容 | ReactNode \\| () => ReactNode | -      |      |\n| title   | 卡片标题 | ReactNode \\| () => ReactNode | -      |      |\n\n更多属性请参考 [Tooltip](/components/tooltip-cn/#api)。\n\n## 注意\n\n请确保 `Popover` 的子元素能接受 `onMouseEnter`、`onMouseLeave`、`onFocus`、`onClick` 事件。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Popover\"></ComponentTokenTable>\n\n## FAQ\n\n请参考 [Tooltip FAQ](/components/tooltip#faq)。\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Popover\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*XhL3QpRw92kAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*RMP_TrdZ3nsAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nThe floating card popped by clicking or hovering.\n\n## When To Use\n\nA simple popup menu to provide extra information or operations.\n\nComparing with `Tooltip`, besides information `Popover` card can also provide action elements like links and buttons.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/triggerType.tsx\">Three ways to trigger</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/arrow.tsx\">Arrow</code>\n<code src=\"./demo/control.tsx\">Controlling the close of the dialog</code>\n<code src=\"./demo/hover-with-click.tsx\">Hover with click popover</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Param   | Description         | Type                         | Default value | Version |\n| ------- | ------------------- | ---------------------------- | ------------- | ------- |\n| content | Content of the card | ReactNode \\| () => ReactNode | -             |         |\n| title   | Title of the card   | ReactNode \\| () => ReactNode | -             |         |\n\nConsult [Tooltip's documentation](/components/tooltip/#api) to find more APIs.\n\n## Note\n\nPlease ensure that the child node of `Popover` accepts `onMouseEnter`, `onMouseLeave`, `onFocus`, `onClick` events.\n\n## Design Token\n\n<ComponentTokenTable component=\"Popover\"></ComponentTokenTable>\n\n## FAQ\n\nPlease ref [Tooltip FAQ](/components/tooltip#faq).\n"},"progress":{"zh-CN":"---\ncategory: Components\nsubtitle: 进度条\ngroup: 反馈\ntitle: Progress\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*gK_4S6fDRfgAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HJH8Tb1lcYAAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n展示操作的当前进度。\n\n## 何时使用\n\n在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。\n\n- 当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过 2 秒时；\n- 当需要显示一个操作完成的百分比时。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/line.tsx\">进度条</code>\n<code src=\"./demo/circle.tsx\">进度圈</code>\n<code src=\"./demo/line-mini.tsx\">小型进度条</code>\n<code src=\"./demo/circle-micro.tsx\">响应式进度圈</code>\n<code src=\"./demo/circle-mini.tsx\">小型进度圈</code>\n<code src=\"./demo/dynamic.tsx\">动态展示</code>\n<code src=\"./demo/format.tsx\">自定义文字格式</code>\n<code src=\"./demo/dashboard.tsx\">仪表盘</code>\n<code src=\"./demo/segment.tsx\">分段进度条</code>\n<code src=\"./demo/linecap.tsx\">边缘形状</code>\n<code src=\"./demo/gradient-line.tsx\">自定义进度条渐变色</code>\n<code src=\"./demo/steps.tsx\">步骤进度条</code>\n<code src=\"./demo/size.tsx\">尺寸</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n各类型共用的属性。\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 内容的模板函数 | function(percent, successPercent) | (percent) => percent + `%` | - |\n| percent | 百分比 | number | 0 | - |\n| showInfo | 是否显示进度数值或状态图标 | boolean | true | - |\n| status | 状态，可选：`success` `exception` `normal` `active`(仅限 line) | string | - | - |\n| strokeColor | 进度条的色彩 | string | - | - |\n| strokeLinecap | 进度条的样式 | `round` \\| `butt` \\| `square`，区别详见 [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) | `round` | - |\n| success | 成功进度条相关配置 | { percent: number, strokeColor: string } | - | - |\n| trailColor | 未完成的分段的颜色 | string | - | - |\n| type | 类型，可选 `line` `circle` `dashboard` | string | `line` | - |\n| size | 进度条的尺寸 | number \\| \\[number \\| string, number] \\| \"small\" \\| \"default\" | \"default\" | v5.3.0 |\n\n### `type=\"line\"`\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| steps | 进度条总共步数 | number | - | - |\n| strokeColor | 进度条的色彩，传入 object 时为渐变。当有 `steps` 时支持传入一个数组。 | string \\| string[] \\| { from: string; to: string; direction: string } | - | 4.21.0: `string[]` |\n\n### `type=\"circle\"`\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| strokeColor | 圆形进度条线的色彩，传入 object 时为渐变 | string \\| { number%: string } | - | - |\n| strokeWidth | 圆形进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 | - |\n\n### `type=\"dashboard\"`\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| gapDegree | 仪表盘进度条缺口角度，可取值 0 ~ 295 | number | 75 | - |\n| gapPosition | 仪表盘进度条缺口位置 | `top` \\| `bottom` \\| `left` \\| `right` | `bottom` | - |\n| strokeWidth | 仪表盘进度条线的宽度，单位是进度条画布宽度的百分比 | number | 6 | - |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Progress\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Feedback\ntitle: Progress\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*gK_4S6fDRfgAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*HJH8Tb1lcYAAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nDisplay the current progress of an operation flow.\n\n## When To Use\n\nIf it will take a long time to complete an operation, you can use `Progress` to show the current progress and status.\n\n- When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds.\n- When you need to display the completion percentage of an operation.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/line.tsx\">Progress bar</code>\n<code src=\"./demo/circle.tsx\">Circular progress bar</code>\n<code src=\"./demo/line-mini.tsx\">Mini size progress bar</code>\n<code src=\"./demo/circle-micro.tsx\">Responsive circular progress bar</code>\n<code src=\"./demo/circle-mini.tsx\">Mini size circular progress bar</code>\n<code src=\"./demo/dynamic.tsx\">Dynamic</code>\n<code src=\"./demo/format.tsx\">Custom text format</code>\n<code src=\"./demo/dashboard.tsx\">Dashboard</code>\n<code src=\"./demo/segment.tsx\">Progress bar with success segment</code>\n<code src=\"./demo/linecap.tsx\">Stroke Linecap</code>\n<code src=\"./demo/gradient-line.tsx\">Custom line gradient</code>\n<code src=\"./demo/steps.tsx\">Progress bar with steps</code>\n<code src=\"./demo/size.tsx\">Progress size</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\nProperties that shared by all types.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| format | The template function of the content | function(percent, successPercent) | (percent) => percent + `%` | - |\n| percent | To set the completion percentage | number | 0 | - |\n| showInfo | Whether to display the progress value and the status icon | boolean | true |\n| status | To set the status of the Progress, options: `success` `exception` `normal` `active`(line only) | string | - |\n| strokeColor | The color of progress bar | string | - | - |\n| strokeLinecap | To set the style of the progress linecap | `round` \\| `butt` \\| `square`, see [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) | `round` | - |\n| success | Configs of successfully progress bar | { percent: number, strokeColor: string } | - | - |\n| trailColor | The color of unfilled part | string | - | - |\n| type | To set the type, options: `line` `circle` `dashboard` | string | `line` |\n| size | Progress size | number \\| \\[number \\| string, number] \\| \"small\" \\| \"default\" | \"default\" | v5.3.0 |\n\n### `type=\"line\"`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| steps | The total step count | number | - | - |\n| strokeColor | The color of progress bar, render `linear-gradient` when passing an object, could accept `string[]` when has `steps`. | string \\| string[] \\| { from: string; to: string; direction: string } | - | 4.21.0: `string[]` |\n\n### `type=\"circle\"`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| strokeColor | The color of circular progress, render gradient when passing an object | string \\| { number%: string } | - | - |\n| strokeWidth | To set the width of the circular progress, unit: percentage of the canvas width | number | 6 | - |\n\n### `type=\"dashboard\"`\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| gapDegree | The gap degree of half circle, 0 ~ 295 | number | 75 |\n| gapPosition | The gap position, options: `top` `bottom` `left` `right` | string | `bottom` |\n| strokeWidth | To set the width of the dashboard progress, unit: percentage of the canvas width | number | 6 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Progress\"></ComponentTokenTable>\n"},"qr-code":{"zh-CN":"---\ncategory: Components\nsubtitle: 二维码\ntitle: QRCode\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*cJopQrf0ncwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*M4PBTZ_n9OgAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: 数据展示\n  order: 5\ntag: New\n---\n\n能够将文本转换生成二维码的组件，支持自定义配色和 Logo 配置，自 `antd@5.1.0` 版本开始提供该组件。\n\n<!-- prettier-ignore -->\n:::info\n若二维码无法扫码识别，可能是因为链接地址过长导致像素过于密集，可以通过 size 配置二维码更大，或者通过短链接服务等方式将链接变短。\n:::\n\n## 何时使用\n\n当需要将文本转换成为二维码时使用。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/base.tsx\">基本使用</code>\n<code src=\"./demo/icon.tsx\">带 Icon 的例子</code>\n<code src=\"./demo/status.tsx\">不同的状态</code>\n<code src=\"./demo/type.tsx\">自定义渲染类型</code>\n<code src=\"./demo/customSize.tsx\">自定义尺寸</code>\n<code src=\"./demo/customColor.tsx\">自定义颜色</code>\n<code src=\"./demo/download.tsx\">下载二维码</code>\n<code src=\"./demo/errorlevel.tsx\">纠错比例</code>\n<code src=\"./demo/Popover.tsx\">高级用法</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n> 自 `antd@5.1.0` 版本开始提供该组件。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| :-- | :-- | :-- | :-- | :-- |\n| value | 扫描后的文本 | string | - |\n| type | 渲染类型 | `canvas \\| svg ` | `canvas` | 5.6.0 |\n| icon | 二维码中图片的地址（目前只支持图片地址） | string | - |\n| size | 二维码大小 | number | 160 |\n| iconSize | 二维码中图片的大小 | number | 40 |\n| color | 二维码颜色 | string | `#000` |\n| bgColor | 二维码背景颜色 | string | `transparent` | 5.5.0 |\n| bordered | 是否有边框 | boolean | `true` |\n| errorLevel | 二维码纠错等级 | `'L' \\| 'M' \\| 'Q' \\| 'H' ` | `M` |\n| status | 二维码状态 | `active \\| expired \\| loading \\| scanned` | `active` | scanned: 5.13.0 |\n| onRefresh | 点击\"点击刷新\"的回调 | `() => void` | - |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"QRCode\"></ComponentTokenTable>\n\n## FAQ\n\n### 关于二维码纠错等级\n\n纠错等级也叫纠错率，就是指二维码可以被遮挡后还能正常扫描，而这个能被遮挡的最大面积就是纠错率。\n\n通常情况下二维码分为 4 个纠错级别：`L级` 可纠正约 `7%` 错误、`M级` 可纠正约 `15%` 错误、`Q级` 可纠正约 `25%` 错误、`H级` 可纠正约`30%` 错误。并不是所有位置都可以缺损，像最明显的三个角上的方框，直接影响初始定位。中间零散的部分是内容编码，可以容忍缺损。当二维码的内容编码携带信息比较少的时候，也就是链接比较短的时候，设置不同的纠错等级，生成的图片不会发生变化。\n\n> 有关更多信息，可参阅相关资料：[https://www.qrcode.com/zh/about/error_correction](https://www.qrcode.com/zh/about/error_correction.html)\n","en-US":"---\ncategory: Components\ntitle: QRCode\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*cJopQrf0ncwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*M4PBTZ_n9OgAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ngroup:\n  title: Data Display\n  order: 5\ntag: New\n---\n\nComponents that can convert text into QR codes, and support custom color and logo. Available since `antd@5.1.0`.\n\n<!-- prettier-ignore -->\n:::info\nIf the QR code cannot be scanned for identification, it may be because the link address is too long, which leads to too dense pixels.\nYou can configure the QR code to be larger through size, or shorten the link through short link services.\n:::\n\n## When To Use\n\nUsed when the text needs to be converted into a QR Code.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/base.tsx\">base</code>\n<code src=\"./demo/icon.tsx\">With Icon</code>\n<code src=\"./demo/status.tsx\">other status</code>\n<code src=\"./demo/type.tsx\">Custom Render Type</code>\n<code src=\"./demo/customSize.tsx\">Custom Size</code>\n<code src=\"./demo/customColor.tsx\">Custom Color</code>\n<code src=\"./demo/download.tsx\">Download QRCode</code>\n<code src=\"./demo/errorlevel.tsx\">Error Level</code>\n<code src=\"./demo/Popover.tsx\">Advanced Usage</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `antd@5.1.0`\n\n| Property | Description | Type | Default | Version |\n| :-- | :-- | :-- | :-- | :-- |\n| value | scanned text | string | - |\n| type | render type | `canvas \\| svg ` | `canvas` | 5.6.0 |\n| icon | include image url (only image link are supported) | string | - |\n| size | QRCode size | number | 160 |\n| iconSize | include image size | number | 32 |\n| color | QRCode Color | string | `#000` |\n| bgColor | QRCode Background Color | string | `transparent` | 5.5.0 |\n| bordered | Whether has border style | boolean | `true` |\n| errorLevel | Error Code Level | `'L' \\| 'M' \\| 'Q' \\| 'H' ` | `M` |\n| status | QRCode status | `active \\| expired \\| loading \\| scanned` | `active` | scanned: 5.13.0 |\n| onRefresh | callback | `() => void` | - |\n\n## Design Token\n\n<ComponentTokenTable component=\"QRCode\"></ComponentTokenTable>\n\n## FAQ\n\n### About QRCode ErrorLevel\n\nThe ErrorLevel means that the QR code can be scanned normally after being blocked, and the maximum area that can be blocked is the error correction rate.\n\nGenerally, the QR code is divided into 4 error correction levels: Level `L` can correct about `7%` errors, Level `M` can correct about `15%` errors, Level `Q` can correct about `25%` errors, and Level `H` can correct about `30%` errors. When the content encoding of the QR code carries less information, in other words, when the value link is short, set different error correction levels, and the generated image will not change.\n\n> For more information, see the: [https://www.qrcode.com/en/about/error_correction](https://www.qrcode.com/en/about/error_correction.html)\n"},"qrcode":{},"radio":{"zh-CN":"---\ncategory: Components\nsubtitle: 单选框\ngroup: 数据录入\ntitle: Radio\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*M-YKTJnWM2kAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a9roS6DHFIcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n单选框。\n\n## 何时使用\n\n- 用于在多个备选项中选中单个状态。\n- 和 Select 的区别是，Radio 所有选项默认可见，方便用户在比较中选择，因此选项不宜过多。\n\n## 代码演示\n\n<!-- prettier-ignore-start -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/disabled.tsx\">不可用</code>\n<code src=\"./demo/radiogroup.tsx\">单选组合</code>\n<code src=\"./demo/radiogroup-more.tsx\">Radio.Group 垂直</code>\n<code src=\"./demo/radiogroup-options.tsx\">Radio.Group 组合 - 配置方式</code>\n<code src=\"./demo/radiobutton.tsx\">按钮样式</code>\n<code src=\"./demo/radiogroup-with-name.tsx\">单选组合 - 配合 name 使用</code>\n<code src=\"./demo/size.tsx\">大小</code>\n<code src=\"./demo/radiobutton-solid.tsx\">填底的按钮样式</code>\n<code src=\"./demo/badge.tsx\" debug>测试 Badge 的样式</code>\n<code src=\"./demo/wireframe.tsx\" debug>线框风格</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n<!-- prettier-ignore-end -->\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Radio/Radio.Button\n\n<!-- prettier-ignore -->\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| autoFocus | 自动获取焦点 | boolean | false |\n| checked | 指定当前是否选中 | boolean | false |\n| defaultChecked | 初始是否选中 | boolean | false |\n| disabled | 禁用 Radio | boolean | false |\n| value | 根据 value 进行比较，判断是否选中 | any | - |\n\n### Radio.Group\n\n单选框组合，用于包裹一组 `Radio`。\n\n<!-- prettier-ignore -->\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| buttonStyle | RadioButton 的风格样式，目前有描边和填色两种风格 | `outline` \\| `solid` | `outline` |  |  |\n| defaultValue | 默认选中的值 | any | - |  |  |\n| disabled | 禁选所有子单选器 | boolean | false |  |  |\n| name | RadioGroup 下所有 `input[type=\"radio\"]` 的 `name` 属性 | string | - |  |  |\n| options | 以配置形式设置子元素 | string\\[] \\| number\\[] \\| Array&lt;{ label: ReactNode; value: string; disabled?: boolean; }> | - |  |  |\n| optionType | 用于设置 Radio `options` 类型 | `default` \\| `button` | `default` | 4.4.0 |  |\n| size | 大小，只对按钮样式生效 | `large` \\| `middle` \\| `small` | - |  |  |\n| value | 用于设置当前选中的值 | any | - |  |  |\n| onChange | 选项变化时的回调函数 | function(e:Event) | - |  |  |\n\n## 方法\n\n### Radio\n\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Radio\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Radio\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*M-YKTJnWM2kAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*a9roS6DHFIcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nRadio.\n\n## When To Use\n\n- Used to select a single state from multiple options.\n- The difference from Select is that Radio is visible to the user and can facilitate the comparison of choice, which means there shouldn't be too many of them.\n\n## Examples\n\n<!-- prettier-ignore-start -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/disabled.tsx\">disabled</code>\n<code src=\"./demo/radiogroup.tsx\">Radio Group</code>\n<code src=\"./demo/radiogroup-more.tsx\">Vertical Radio.Group</code>\n<code src=\"./demo/radiogroup-options.tsx\">Radio.Group group - optional</code>\n<code src=\"./demo/radiobutton.tsx\">radio style</code>\n<code src=\"./demo/radiogroup-with-name.tsx\">Radio.Group with name</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/radiobutton-solid.tsx\">Solid radio button</code>\n<code src=\"./demo/badge.tsx\" debug>Badge style</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n<!-- prettier-ignore-end -->\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Radio/Radio.Button\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| autoFocus | Whether get focus when component mounted | boolean | false |\n| checked | Specifies whether the radio is selected | boolean | false |\n| defaultChecked | Specifies the initial state: whether or not the radio is selected | boolean | false |\n| disabled | Disable radio | boolean | false |\n| value | According to value for comparison, to determine whether the selected | any | - |\n\n### RadioGroup\n\nRadio group can wrap a group of `Radio`。\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| buttonStyle | The style type of radio button | `outline` \\| `solid` | `outline` |  |\n| defaultValue | Default selected value | any | - |  |\n| disabled | Disable all radio buttons | boolean | false |  |\n| name | The `name` property of all `input[type=\"radio\"]` children | string | - |  |\n| options | Set children optional | string\\[] \\| number\\[] \\| Array&lt;{ label: ReactNode; value: string; disabled?: boolean; }> | - |  |\n| optionType | Set Radio optionType | `default` \\| `button` | `default` | 4.4.0 |\n| size | The size of radio button style | `large` \\| `middle` \\| `small` | - |  |\n| value | Used for setting the currently selected value | any | - |  |\n| onChange | The callback function that is triggered when the state changes | function(e:Event) | - |  |\n\n## Methods\n\n### Radio\n\n| Name    | Description  |\n| ------- | ------------ |\n| blur()  | Remove focus |\n| focus() | Get focus    |\n\n## Design Token\n\n<ComponentTokenTable component=\"Radio\"></ComponentTokenTable>\n"},"rate":{"zh-CN":"---\ncategory: Components\nsubtitle: 评分\ngroup: 数据录入\ntitle: Rate\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*oyOcTrB12_YAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*M7_ER7GJr6wAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n评分组件。\n\n## 何时使用\n\n- 对评价进行展示。\n- 对事物进行快速的评级操作。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/half.tsx\">半星</code>\n<code src=\"./demo/text.tsx\">文案展现</code>\n<code src=\"./demo/disabled.tsx\">只读</code>\n<code src=\"./demo/clear.tsx\">清除</code>\n<code src=\"./demo/character.tsx\">其他字符</code>\n<code src=\"./demo/character-function.tsx\">自定义字符</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 是否允许再次点击后清除 | boolean | true |  |\n| allowHalf | 是否允许半选 | boolean | false |  |\n| autoFocus | 自动获取焦点 | boolean | false |  |\n| character | 自定义字符 | ReactNode \\| (RateProps) => ReactNode | &lt;StarFilled /> | function(): 4.4.0 |\n| className | 自定义样式类名 | string | - |  |\n| count | star 总数 | number | 5 |  |\n| defaultValue | 默认值 | number | 0 |  |\n| disabled | 只读，无法进行交互 | boolean | false |  |\n| style | 自定义样式对象 | CSSProperties | - |  |\n| tooltips | 自定义每项的提示信息 | string\\[] | - |  |\n| value | 当前数，受控值 | number | - |  |\n| onBlur | 失去焦点时的回调 | function() | - |  |\n| onChange | 选择时的回调 | function(value: number) | - |  |\n| onFocus | 获取焦点时的回调 | function() | - |  |\n| onHoverChange | 鼠标经过时数值变化的回调 | function(value: number) | - |  |\n| onKeyDown | 按键回调 | function(event) | - |  |\n\n## 方法\n\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Rate\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Rate\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*oyOcTrB12_YAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*M7_ER7GJr6wAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nRate component.\n\n## When To Use\n\n- Show evaluation.\n- A quick rating operation on something.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/half.tsx\">Half star</code>\n<code src=\"./demo/text.tsx\">Show copywriting</code>\n<code src=\"./demo/disabled.tsx\">Read only</code>\n<code src=\"./demo/clear.tsx\">Clear star</code>\n<code src=\"./demo/character.tsx\">Other Character</code>\n<code src=\"./demo/character-function.tsx\">Customize character</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Whether to allow clear when click again | boolean | true |  |\n| allowHalf | Whether to allow semi selection | boolean | false |  |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| character | The custom character of rate | ReactNode \\| (RateProps) => ReactNode | &lt;StarFilled /> | function(): 4.4.0 |\n| className | The custom class name of rate | string | - |  |\n| count | Star count | number | 5 |  |\n| defaultValue | The default value | number | 0 |  |\n| disabled | If read only, unable to interact | boolean | false |  |\n| style | The custom style object of rate | CSSProperties | - |  |\n| tooltips | Customize tooltip by each character | string\\[] | - |  |\n| value | The current value | number | - |  |\n| onBlur | Callback when component lose focus | function() | - |  |\n| onChange | Callback when select value | function(value: number) | - |  |\n| onFocus | Callback when component get focus | function() | - |  |\n| onHoverChange | Callback when hover item | function(value: number) | - |  |\n| onKeyDown | Callback when keydown on component | function(event) | - |  |\n\n## Methods\n\n| Name    | Description  |\n| ------- | ------------ |\n| blur()  | Remove focus |\n| focus() | Get focus    |\n\n## Design Token\n\n<ComponentTokenTable component=\"Rate\"></ComponentTokenTable>\n"},"result":{"zh-CN":"---\ngroup: 反馈\ncategory: Components\ntitle: Result\nsubtitle: 结果\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-e2IRroDJyEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-0kxQrbHx2kAAAAAAAAAAAAADrJ8AQ/original\n---\n\n用于反馈一系列操作任务的处理结果。\n\n## 何时使用\n\n当有重要操作需告知用户处理结果，且反馈内容较为复杂时使用。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/success.tsx\">Success</code>\n<code src=\"./demo/info.tsx\">Info</code>\n<code src=\"./demo/warning.tsx\">Warning</code>\n<code src=\"./demo/403.tsx\">403</code>\n<code src=\"./demo/404.tsx\">404</code>\n<code src=\"./demo/500.tsx\">500</code>\n<code src=\"./demo/error.tsx\">Error</code>\n<code src=\"./demo/customIcon.tsx\">自定义 icon</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| extra | 操作区 | ReactNode | - |\n| icon | 自定义 icon | ReactNode | - |\n| status | 结果的状态，决定图标和颜色 | `success` \\| `error` \\| `info` \\| `warning` \\| `404` \\| `403` \\| `500` | `info` |\n| subTitle | subTitle 文字 | ReactNode | - |\n| title | title 文字 | ReactNode | - |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Result\"></ComponentTokenTable>\n","en-US":"---\ngroup: Feedback\ncategory: Components\ntitle: Result\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-e2IRroDJyEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*-0kxQrbHx2kAAAAAAAAAAAAADrJ8AQ/original\n---\n\nUsed to feed back the results of a series of operational tasks.\n\n## When To Use\n\nUse when important operations need to inform the user to process the results and the feedback is more complicated.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/success.tsx\">Success</code>\n<code src=\"./demo/info.tsx\">Info</code>\n<code src=\"./demo/warning.tsx\">Warning</code>\n<code src=\"./demo/403.tsx\">403</code>\n<code src=\"./demo/404.tsx\">404</code>\n<code src=\"./demo/500.tsx\">500</code>\n<code src=\"./demo/error.tsx\">Error</code>\n<code src=\"./demo/customIcon.tsx\">Custom icon</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| extra | Operating area | ReactNode | - |\n| icon | Custom back icon | ReactNode | - |\n| status | Result status, decide icons and colors | `success` \\| `error` \\| `info` \\| `warning` \\| `404` \\| `403` \\| `500` | `info` |\n| subTitle | The subTitle | ReactNode | - |\n| title | The title | ReactNode | - |\n\n## Design Token\n\n<ComponentTokenTable component=\"Result\"></ComponentTokenTable>\n"},"segmented":{"zh-CN":"---\ncategory: Components\nsubtitle: 分段控制器\ngroup: 数据展示\ntitle: Segmented\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*papwTpNscPIAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*tz7qSaWpi1kAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n分段控制器。自 `antd@4.20.0` 版本开始提供该组件。\n\n## 何时使用\n\n- 用于展示多个选项并允许用户选择其中单个选项；\n- 当切换选中选项时，关联区域的内容会发生变化。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/block.tsx\">Block 分段选择器</code>\n<code src=\"./demo/disabled.tsx\">不可用</code>\n<code src=\"./demo/controlled.tsx\">受控模式</code>\n<code src=\"./demo/custom.tsx\">自定义渲染</code>\n<code src=\"./demo/dynamic.tsx\">动态数据</code>\n<code src=\"./demo/size.tsx\">三种大小</code>\n<code src=\"./demo/with-icon.tsx\">设置图标</code>\n<code src=\"./demo/icon-only.tsx\">只设置图标</code>\n<code src=\"./demo/controlled-two.tsx\" debug>受控同步模式</code>\n<code src=\"./demo/size-consistent.tsx\" debug>统一高度</code>\n<code src=\"./demo/componentToken.tsx\" debug>自定义组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n> 自 `antd@4.20.0` 版本开始提供该组件。\n\n### Segmented\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将宽度调整为父元素宽度的选项 | boolean | false |  |\n| defaultValue | 默认选中的值 | string \\| number |  |  |\n| disabled | 是否禁用 | boolean | false |  |\n| onChange | 选项变化时的回调函数 | function(value: string \\| number) |  |  |\n| options | 数据化配置选项内容 | string\\[] \\| number\\[] \\| Array<{ label: ReactNode value: string icon? ReactNode disabled?: boolean className?: string }> | [] |  |\n| size | 控件尺寸 | `large` \\| `middle` \\| `small` | `middle` |  |\n| value | 当前选中的值 | string \\| number |  |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Segmented\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Segmented\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*papwTpNscPIAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*tz7qSaWpi1kAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nSegmented Controls. This component is available since `antd@4.20.0`.\n\n## When To Use\n\n- When displaying multiple options and user can select a single option;\n- When switching the selected option, the content of the associated area changes.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/block.tsx\">Block Segmented</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/controlled.tsx\">Controlled mode</code>\n<code src=\"./demo/custom.tsx\">Custom Render</code>\n<code src=\"./demo/dynamic.tsx\">Dynamic</code>\n<code src=\"./demo/size.tsx\">Three sizes of Segmented</code>\n<code src=\"./demo/with-icon.tsx\">With Icon</code>\n<code src=\"./demo/icon-only.tsx\">With Icon only</code>\n<code src=\"./demo/controlled-two.tsx\" debug>Controlled Synced mode</code>\n<code src=\"./demo/size-consistent.tsx\" debug>Consistent height</code>\n<code src=\"./demo/componentToken.tsx\" debug>Custom component token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `antd@4.20.0`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| block | Option to fit width to its parent\\'s width | boolean | false |  |\n| defaultValue | Default selected value | string \\| number |  |  |\n| disabled | Disable all segments | boolean | false |  |\n| onChange | The callback function that is triggered when the state changes | function(value: string \\| number) |  |  |\n| options | Set children optional | string\\[] \\| number\\[] \\| Array<{ label: ReactNode value: string icon? ReactNode disabled?: boolean className?: string }> | [] |  |\n| size | The size of the Segmented. | `large` \\| `middle` \\| `small` | `middle` |  |\n| value | Currently selected value | string \\| number |  |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Segmented\"></ComponentTokenTable>\n"},"select":{"zh-CN":"---\ncategory: Components\nsubtitle: 选择器\ngroup: 数据录入\ntitle: Select\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*zo76T7KQx2UAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5oPiTqPxGAUAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n下拉选择器。\n\n## 何时使用\n\n- 弹出一个下拉菜单给用户选择操作，用于代替原生的选择器，或者需要一个更优雅的多选器时。\n- 当选项少时（少于 5 项），建议直接将选项平铺，使用 [Radio](/components/radio-cn/) 是更好的选择。\n- 如果你在寻找一个可输可选的输入框，那你可能需要 [AutoComplete](/components/auto-complete-cn/)。\n\n### 5.11.0 用法升级\n\n<!-- prettier-ignore -->\n:::info\n在 5.11.0 版本后，我们提供了 `<Select options={[...]} />` 的简写方式，有更好的性能和更方便的数据组织方式，开发者不再需要自行拼接 JSX。\n同时我们废弃了原先的写法，你还是可以在 5.x 继续使用，但会在控制台看到警告，并会在 6.0 后移除。\n:::\n\n```jsx\n// >=5.11.0 可用，推荐的写法 ✅\nreturn <Select options={[{ value: 'sample', label: <span>sample</span> }]} />;\n\n// 5.x 都可用，>=5.11.0 时不推荐 🙅🏻‍♀️\nreturn (\n  <Select onChange={onChange}>\n    <Select.Option value=\"sample\">Sample</Select.Option>\n  </Select>\n);\n```\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本使用</code>\n<code src=\"./demo/search.tsx\">带搜索框</code>\n<code src=\"./demo/multiple.tsx\">多选</code>\n<code src=\"./demo/size.tsx\">三种大小</code>\n<code src=\"./demo/option-label-prop.tsx\">定制回填内容</code>\n<code src=\"./demo/search-sort.tsx\">带排序的搜索</code>\n<code src=\"./demo/tags.tsx\">标签</code>\n<code src=\"./demo/optgroup.tsx\">分组</code>\n<code src=\"./demo/coordinate.tsx\">联动</code>\n<code src=\"./demo/search-box.tsx\">搜索框</code>\n<code src=\"./demo/label-in-value.tsx\">获得选项的文本</code>\n<code src=\"./demo/automatic-tokenization.tsx\">自动分词</code>\n<code src=\"./demo/select-users.tsx\">搜索用户</code>\n<code src=\"./demo/suffix.tsx\" debug>后缀图标</code>\n<code src=\"./demo/custom-dropdown-menu.tsx\">扩展菜单</code>\n<code src=\"./demo/hide-selected.tsx\">隐藏已选择选项</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">多种形态</code>\n<code src=\"./demo/filled-debug.tsx\" debug>Filled debug</code>\n<code src=\"./demo/custom-tag-render.tsx\">自定义选择标签</code>\n<code src=\"./demo/responsive.tsx\">响应式 maxTagCount</code>\n<code src=\"./demo/big-data.tsx\">大数据</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/placement.tsx\">弹出位置</code>\n<code src=\"./demo/placement-debug.tsx\" debug>动态高度</code>\n<code src=\"./demo/debug.tsx\" debug>4.0 Debug</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/option-label-center.tsx\" debug>选项文本居中</code>\n<code src=\"./demo/debug-flip-shift.tsx\" iframe=\"200\" debug>翻转+偏移</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n<code src=\"./demo/maxCount.tsx\" version=\"5.13.0\">最大选中数量</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Select props\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: 支持对象类型 |\n| autoClearSearchValue | 是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效 | boolean | true |  |\n| autoFocus | 默认获取焦点 | boolean | false |  |\n| defaultActiveFirstOption | 是否默认高亮第一个选项 | boolean | true |  |\n| defaultOpen | 是否默认展开下拉菜单 | boolean | - |  |\n| defaultValue | 指定默认选中的条目 | string \\| string\\[] \\|<br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[] | - |  |\n| disabled | 是否禁用 | boolean | false |  |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean \\| number | true | 5.5.0 |\n| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode) => ReactNode | - |  |\n| dropdownStyle | 下拉菜单的 style 属性 | CSSProperties | - |  |\n| fieldNames | 自定义节点 label、value、options、groupLabel 的字段 | object | { label: `label`, value: `value`, options: `options`, groupLabel: `label` } | 4.17.0（`groupLabel` 在 5.6.0 新增） |\n| filterOption | 是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false。[示例](#select-demo-search) | boolean \\| function(inputValue, option) | true |  |\n| filterSort | 搜索时对筛选结果项的排序函数, 类似[Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)里的 compareFunction | (optionA: Option, optionB: Option) => number | - | 4.9.0 |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body |  |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 { value: string, label: ReactNode } 的格式 | boolean | false |  |\n| listHeight | 设置弹窗滚动高度 | number | 256 |  |\n| loading | 加载中状态 | boolean | false |  |\n| maxCount | 指定可选中的最多 items 数量，仅在 `mode` 为 `multiple` 或 `tags` 时生效 | number | - | 5.13.0 |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number \\| `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode \\| function(omittedValues) | - |  |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - |  |\n| menuItemSelectedIcon | 自定义多选时当前选中的条目图标 | ReactNode | - |  |\n| mode | 设置 Select 的模式为多选或标签 | `multiple` \\| `tags` | - |  |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` |  |\n| open | 是否展开下拉菜单 | boolean | - |  |\n| optionFilterProp | 搜索时过滤对应的 `option` 属性，如设置为 `children` 表示对内嵌内容进行搜索。若通过 `options` 属性配置选项内容，建议设置 `optionFilterProp=\"label\"` 来对内容进行搜索。 | string | `value` |  |\n| optionLabelProp | 回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。[示例](https://codesandbox.io/s/antd-reproduction-template-tk678) | string | `children` |  |\n| options | 数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能 | { label, value }\\[] | - |  |\n| optionRender | 自定义渲染下拉选项 | (option: FlattenOptionData\\<BaseOptionType\\> , info: { index: number }) => React.ReactNode | - | 5.11.0 |\n| placeholder | 选择框默认文本 | string | - |  |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| removeIcon | 自定义的多选框清除图标 | ReactNode | - |  |\n| searchValue | 控制搜索文本 | string | - |  |\n| showSearch | 配置是否可搜索 | boolean | 单选为 false，多选为 true |  |\n| size | 选择框大小 | `large` \\| `middle` \\| `small` | `middle` |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标。以防止图标被用于其他交互，替换的图标默认不会响应展开、收缩事件，可以通过添加 `pointer-events: none` 样式透传。 | ReactNode | `<DownOutlined />` |  |\n| tagRender | 自定义 tag 内容 render，仅在 `mode` 为 `multiple` 或 `tags` 时生效 | (props) => ReactNode | - |  |\n| tokenSeparators | 自动分词的分隔符，仅在 `mode=\"tags\"` 时生效 | string\\[] | - |  |\n| value | 指定当前选中的条目，多选时为一个数组。（value 数组引用未变化时，Select 不会更新） | string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[] | - |  |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onBlur | 失去焦点时回调 | function | - |  |\n| onChange | 选中 option，或 input 的 value 变化时，调用此函数 | function(value, option:Option \\| Array&lt;Option>) | - |  |\n| onClear | 清除内容时回调 | function | - | 4.6.0 |\n| onDeselect | 取消选中时调用，参数为选中项的 value (或 key) 值，仅在 `multiple` 或 `tags` 模式下生效 | function(value: string \\| number \\| LabeledValue) | - |  |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - |  |\n| onFocus | 获得焦点时回调 | function | - |  |\n| onInputKeyDown | 按键按下时回调 | function | - |  |\n| onMouseEnter | 鼠标移入时回调 | function | - |  |\n| onMouseLeave | 鼠标移出时回调 | function | - |  |\n| onPopupScroll | 下拉列表滚动时的回调 | function | - |  |\n| onSearch | 文本框值变化时回调 | function(value: string) | - |  |\n| onSelect | 被选中时调用，参数为选中项的 value (或 key) 值 | function(value: string \\| number \\| LabeledValue, option: Option) | - |  |\n\n> 注意，如果发现下拉菜单跟随页面滚动，或者需要在其他弹层中触发 Select，请尝试使用 `getPopupContainer={triggerNode => triggerNode.parentElement}` 将下拉弹层渲染节点固定在触发器的父元素中。\n\n### Select Methods\n\n| 名称    | 说明     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 取消焦点 |      |\n| focus() | 获取焦点 |      |\n\n### Option props\n\n| 参数      | 说明                     | 类型             | 默认值 | 版本 |\n| --------- | ------------------------ | ---------------- | ------ | ---- |\n| className | Option 器类名            | string           | -      |      |\n| disabled  | 是否禁用                 | boolean          | false  |      |\n| title     | 选项上的原生 title 提示  | string           | -      |      |\n| value     | 默认根据此属性值进行筛选 | string \\| number | -      |      |\n\n### OptGroup props\n\n| 参数  | 说明 | 类型                    | 默认值 | 版本 |\n| ----- | ---- | ----------------------- | ------ | ---- |\n| key   | Key  | string                  | -      |      |\n| label | 组名 | string \\| React.Element | -      |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Select\"></ComponentTokenTable>\n\n## FAQ\n\n### `mode=\"tags\"` 模式下为何搜索有时会出现两个相同选项？\n\n这一般是 `options` 中的 `label` 和 `value` 不同导致的，你可以通过 `optionFilterProp=\"label\"` 将过滤设置为展示值以避免这种情况。\n\n### 点击 `dropdownRender` 里的元素，下拉菜单不会自动消失？\n\n你可以使用受控模式，手动设置 `open` 属性：[codesandbox](https://codesandbox.io/s/ji-ben-shi-yong-antd-4-21-7-forked-gnp4cy?file=/demo.js)。\n\n### 反过来希望点击 `dropdownRender` 里元素不消失该怎么办？\n\nSelect 当失去焦点时会关闭下拉框，如果你可以通过阻止默认行为避免丢失焦点导致的关闭：\n\n```tsx\n<Select\n  dropdownRender={() => (\n    <div\n      onMouseDown={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n    >\n      Some Content\n    </div>\n  )}\n/>\n```\n\n### 自定义 Option 样式导致滚动异常怎么办？\n\n这是由于虚拟滚动默认选项高度为 `24px`，如果你的选项高度小于该值则需要通过 `listItemHeight` 属性调整，而 `listHeight` 用于设置滚动容器高度：\n\n```tsx\n<Select listItemHeight={10} listHeight={250} />\n```\n\n注意：`listItemHeight` 和 `listHeight` 为内部属性，如无必要，请勿修改该值。\n\n### 为何无障碍测试会报缺失 `aria-` 属性？\n\nSelect 无障碍辅助元素仅在弹窗展开时创建，因而当你在进行无障碍检测时请先打开下拉后再进行测试。对于 `aria-label` 与 `aria-labelledby` 属性缺失警告，请自行为 Select 组件添加相应无障碍属性。\n\nSelect 虚拟滚动会模拟无障碍绑定元素。如果需要读屏器完整获取全部列表，你可以设置 `virtual={false}` 关闭虚拟滚动，无障碍选项将会绑定到真实元素上。\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Select\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*zo76T7KQx2UAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5oPiTqPxGAUAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nSelect component to select value from options.\n\n## When To Use\n\n- A dropdown menu for displaying choices - an elegant alternative to the native `<select>` element.\n- Utilizing [Radio](/components/radio/) is recommended when there are fewer total options (less than 5).\n- You probably need [AutoComplete](/components/auto-complete/) if you're looking for an input box that can be typed or selected.\n\n### Usage upgrade after 5.11.0\n\n<!-- prettier-ignore -->\n:::info\nAfter version 5.11.0, we provide a simpler usage `<Select options={[...]} />` with better performance and potential of writing simpler code style in your applications.\nMeanwhile, we deprecated the old usage in browser console, we will remove it in antd 6.0.\n:::\n\n```jsx\n// works when >=5.11.0, recommended ✅\nreturn <Select options={[{ value: 'sample', label: <span>sample</span> }]} />;\n\n// works when <5.11.0, deprecated when >=5.11.0 🙅🏻‍♀️\nreturn (\n  <Select onChange={onChange}>\n    <Select.Option value=\"sample\">Sample</Select.Option>\n  </Select>\n);\n```\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/search.tsx\">Select with search field</code>\n<code src=\"./demo/multiple.tsx\">multiple selection</code>\n<code src=\"./demo/size.tsx\">Sizes</code>\n<code src=\"./demo/option-label-prop.tsx\">Custom selection render</code>\n<code src=\"./demo/search-sort.tsx\">Search with sort</code>\n<code src=\"./demo/tags.tsx\">Tags</code>\n<code src=\"./demo/optgroup.tsx\">Option Group</code>\n<code src=\"./demo/coordinate.tsx\">coordinate</code>\n<code src=\"./demo/search-box.tsx\">Search Box</code>\n<code src=\"./demo/label-in-value.tsx\">Get value of selected item</code>\n<code src=\"./demo/automatic-tokenization.tsx\">Automatic tokenization</code>\n<code src=\"./demo/select-users.tsx\">Search and Select Users</code>\n<code src=\"./demo/suffix.tsx\" debug>Suffix</code>\n<code src=\"./demo/custom-dropdown-menu.tsx\">Custom dropdown</code>\n<code src=\"./demo/hide-selected.tsx\">Hide Already Selected</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n<code src=\"./demo/filled-debug.tsx\" debug>Filled debug</code>\n<code src=\"./demo/custom-tag-render.tsx\">Custom Tag Render</code>\n<code src=\"./demo/responsive.tsx\">Responsive maxTagCount</code>\n<code src=\"./demo/big-data.tsx\">Big Data</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/placement-debug.tsx\" debug>Dynamic Height</code>\n<code src=\"./demo/debug.tsx\" debug>4.0 Debug</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/option-label-center.tsx\" debug>Options label Centered</code>\n<code src=\"./demo/debug-flip-shift.tsx\" iframe=\"200\" debug>Flip + Shift</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n<code src=\"./demo/maxCount.tsx\" version=\"5.13.0\">Max Count</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Select props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear icon | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support object type |\n| autoClearSearchValue | Whether the current search will be cleared on selecting an item. Only applies when `mode` is set to `multiple` or `tags` | boolean | true |  |\n| autoFocus | Get focus by default | boolean | false |  |\n| defaultActiveFirstOption | Whether active first option by default | boolean | true |  |\n| defaultOpen | Initial open state of dropdown | boolean | - |  |\n| defaultValue | Initial selected option | string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[] | - |  |\n| disabled | Whether disabled select | boolean | false |  |\n| popupClassName | The className of dropdown menu | string | - | 4.23.0 |\n| popupMatchSelectWidth | Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll | boolean \\| number | true | 5.5.0 |\n| dropdownRender | Customize dropdown content | (originNode: ReactNode) => ReactNode | - |  |\n| dropdownStyle | The style of dropdown menu | CSSProperties | - |  |\n| fieldNames | Customize node label, value, options，groupLabel field name | object | { label: `label`, value: `value`, options: `options`, groupLabel: `label` } | 4.17.0 (`groupLabel` added in 5.6.0) |\n| filterOption | If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded | boolean \\| function(inputValue, option) | true |  |\n| filterSort | Sort function for search options sorting, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction | (optionA: Option, optionB: Option) => number | - | 4.9.0 |\n| getPopupContainer | Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [Example](https://codesandbox.io/s/4j168r7jw0) | function(triggerNode) | () => document.body |  |\n| labelInValue | Whether to embed label in value, turn the format of value from `string` to { value: string, label: ReactNode } | boolean | false |  |\n| listHeight | Config popup height | number | 256 |  |\n| loading | Indicate loading state | boolean | false |  |\n| maxCount | The max number of items can be selected, only applies when `mode` is `multiple` or `tags` | number | - | 5.13.0 |\n| maxTagCount | Max tag count to show. `responsive` will cost render performance | number \\| `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | Placeholder for not showing tags | ReactNode \\| function(omittedValues) | - |  |\n| maxTagTextLength | Max tag text length to show | number | - |  |\n| menuItemSelectedIcon | The custom menuItemSelected icon with multiple options | ReactNode | - |  |\n| mode | Set mode of Select | `multiple` \\| `tags` | - |  |\n| notFoundContent | Specify content to show when no result matches | ReactNode | `Not Found` |  |\n| open | Controlled open state of dropdown | boolean | - |  |\n| optionFilterProp | Which prop value of option will be used for filter if filterOption is true. If `options` is set, it should be set to `label` | string | `value` |  |\n| optionLabelProp | Which prop value of option will render as content of select. [Example](https://codesandbox.io/s/antd-reproduction-template-tk678) | string | `children` |  |\n| options | Select options. Will get better perf than jsx definition | { label, value }\\[] | - |  |\n| optionRender | Customize the rendering dropdown options | (option: FlattenOptionData\\<BaseOptionType\\> , info: { index: number }) => React.ReactNode | - | 5.11.0 |\n| placeholder | Placeholder of select | ReactNode | - |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| removeIcon | The custom remove icon | ReactNode | - |  |\n| searchValue | The current input \"search\" text | string | - |  |\n| showSearch | Whether select is searchable | boolean | single: false, multiple: true |  |\n| size | Size of Select input | `large` \\| `middle` \\| `small` | `middle` |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| suffixIcon | The custom suffix icon. Customize icon will not response click open to avoid icon designed to do other interactive. You can use `pointer-events: none` style to bypass | ReactNode | `<DownOutlined />` |  |\n| tagRender | Customize tag render, only applies when `mode` is set to `multiple` or `tags` | (props) => ReactNode | - |  |\n| tokenSeparators | Separator used to tokenize, only applies when `mode=\"tags\"` | string\\[] | - |  |\n| value | Current selected option (considered as a immutable array) | string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[] | - |  |\n| variant | Variants of selector | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| virtual | Disable virtual scroll when set to false | boolean | true | 4.1.0 |\n| onBlur | Called when blur | function | - |  |\n| onChange | Called when select an option or input value change | function(value, option:Option \\| Array&lt;Option>) | - |  |\n| onClear | Called when clear | function | - | 4.6.0 |\n| onDeselect | Called when an option is deselected, param is the selected option's value. Only called for `multiple` or `tags`, effective in multiple or tags mode only | function(value: string \\| number \\| LabeledValue) | - |  |\n| onDropdownVisibleChange | Called when dropdown open | function(open) | - |  |\n| onFocus | Called when focus | function | - |  |\n| onInputKeyDown | Called when key pressed | function | - |  |\n| onMouseEnter | Called when mouse enter | function | - |  |\n| onMouseLeave | Called when mouse leave | function | - |  |\n| onPopupScroll | Called when dropdown scrolls | function | - |  |\n| onSearch | Callback function that is fired when input changed | function(value: string) | - |  |\n| onSelect | Called when an option is selected, the params are option's value (or key) and option instance | function(value: string \\| number \\| LabeledValue, option: Option) | - |  |\n\n> Note, if you find that the drop-down menu scrolls with the page, or you need to trigger Select in other popup layers, please try to use `getPopupContainer={triggerNode => triggerNode.parentElement}` to fix the drop-down popup rendering node in the parent element of the trigger .\n\n### Select Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n### Option props\n\n| Property  | Description                          | Type             | Default | Version |\n| --------- | ------------------------------------ | ---------------- | ------- | ------- |\n| className | The additional class to option       | string           | -       |         |\n| disabled  | Disable this option                  | boolean          | false   |         |\n| title     | `title` attribute of Select Option   | string           | -       |         |\n| value     | Default to filter with this property | string \\| number | -       |         |\n\n### OptGroup props\n\n| Property | Description | Type                    | Default | Version |\n| -------- | ----------- | ----------------------- | ------- | ------- |\n| key      | Group key   | string                  | -       |         |\n| label    | Group label | string \\| React.Element | -       |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Select\"></ComponentTokenTable>\n\n## FAQ\n\n### Why sometime search will show 2 same option when in `tags` mode?\n\nIt's caused by option with different `label` and `value`. You can use `optionFilterProp=\"label\"` to change filter logic instead.\n\n### When I click elements in dropdownRender, the select dropdown will not be closed?\n\nYou can control it by `open` prop: [codesandbox](https://codesandbox.io/s/ji-ben-shi-yong-antd-4-21-7-forked-gnp4cy?file=/demo.js).\n\n### I don't want dropdown close when click inside `dropdownRender`?\n\nSelect will close when it lose focus. You can prevent event to handle this:\n\n```tsx\n<Select\n  dropdownRender={() => (\n    <div\n      onMouseDown={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n    >\n      Some Content\n    </div>\n  )}\n/>\n```\n\n### Why sometime customize Option cause scroll break?\n\nVirtual scroll internal set item height as `24px`. You need to adjust `listItemHeight` when your option height is less and `listHeight` config list container height:\n\n```tsx\n<Select listItemHeight={10} listHeight={250} />\n```\n\nNote: `listItemHeight` and `listHeight` are internal props. Please only modify when necessary.\n\n### Why a11y test report missing `aria-` props?\n\nSelect only create a11y auxiliary node when operating on. Please open Select and retry. For `aria-label` & `aria-labelledby` miss warning, please add related prop to Select with your own requirement.\n\nDefault virtual scrolling will create a mock element to simulate an accessible binding. If a screen reader needs to fully access the entire list, you can set `virtual={false}` to disable virtual scrolling and the accessibility option will be bound to the actual element.\n"},"skeleton":{"zh-CN":"---\ncategory: Components\nsubtitle: 骨架屏\ngroup: 反馈\ntitle: Skeleton\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*uae3QbkNCm8AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*VcjGQLSrYdcAAAAAAAAAAAAADrJ8AQ/original\n---\n\n在需要等待加载内容的位置提供一个占位图形组合。\n\n## 何时使用\n\n- 网络较慢，需要长时间等待加载处理的情况下。\n- 图文信息内容较多的列表/卡片中。\n- 只在第一次加载数据的时候使用。\n- 可以被 Spin 完全代替，但是在可用的场景下可以比 Spin 提供更好的视觉效果和用户体验。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/complex.tsx\">复杂的组合</code>\n<code src=\"./demo/active.tsx\">动画效果</code>\n<code src=\"./demo/element.tsx\">按钮/头像/输入框/图像/自定义节点</code>\n<code src=\"./demo/children.tsx\">包含子组件</code>\n<code src=\"./demo/list.tsx\">列表</code>\n<code src=\"./demo/componentToken.tsx\" debug>自定义组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Skeleton\n\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| active | 是否展示动画效果 | boolean | false |\n| avatar | 是否显示头像占位图 | boolean \\| [SkeletonAvatarProps](#skeletonavatarprops) | false |\n| loading | 为 true 时，显示占位图。反之则直接展示子组件 | boolean | - |\n| paragraph | 是否显示段落占位图 | boolean \\| [SkeletonParagraphProps](#skeletonparagraphprops) | true |\n| round | 为 true 时，段落和标题显示圆角 | boolean | false |\n| title | 是否显示标题占位图 | boolean \\| [SkeletonTitleProps](#skeletontitleprops) | true |\n\n### SkeletonAvatarProps\n\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| active | 是否展示动画效果，仅在单独使用头像骨架时生效 | boolean | false |\n| shape | 指定头像的形状 | `circle` \\| `square` | - |\n| size | 设置头像占位图的大小 | number \\| `large` \\| `small` \\| `default` | - |\n\n### SkeletonTitleProps\n\n| 属性  | 说明                 | 类型             | 默认值 |\n| ----- | -------------------- | ---------------- | ------ |\n| width | 设置标题占位图的宽度 | number \\| string | -      |\n\n### SkeletonParagraphProps\n\n| 属性 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| rows | 设置段落占位图的行数 | number | - |\n| width | 设置段落占位图的宽度，若为数组时则为对应的每行宽度，反之则是最后一行的宽度 | number \\| string \\| Array&lt;number \\| string> | - |\n\n### SkeletonButtonProps\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| active | 是否展示动画效果 | boolean | false |  |\n| block | 将按钮宽度调整为其父宽度的选项 | boolean | false | 4.17.0 |\n| shape | 指定按钮的形状 | `circle` \\| `round` \\| `square` \\| `default` | - |  |\n| size | 设置按钮的大小 | `large` \\| `small` \\| `default` | - |  |\n\n### SkeletonInputProps\n\n| 属性   | 说明             | 类型                            | 默认值 |\n| ------ | ---------------- | ------------------------------- | ------ |\n| active | 是否展示动画效果 | boolean                         | false  |\n| size   | 设置输入框的大小 | `large` \\| `small` \\| `default` | -      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Skeleton\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Feedback\ntitle: Skeleton\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*uae3QbkNCm8AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*VcjGQLSrYdcAAAAAAAAAAAAADrJ8AQ/original\n---\n\nProvide a placeholder while you wait for content to load, or to visualize content that doesn't exist yet.\n\n## When To Use\n\n- When a resource needs long time to load.\n- When the component contains lots of information, such as List or Card.\n- Only works when loading data for the first time.\n- Could be replaced by Spin in any situation, but can provide a better user experience.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/complex.tsx\">Complex combination</code>\n<code src=\"./demo/active.tsx\">Active Animation</code>\n<code src=\"./demo/element.tsx\">Button/Avatar/Input/Image/Node</code>\n<code src=\"./demo/children.tsx\">Contains sub component</code>\n<code src=\"./demo/list.tsx\">List</code>\n<code src=\"./demo/componentToken.tsx\" debug>Custom component token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Skeleton\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| active | Show animation effect | boolean | false |\n| avatar | Show avatar placeholder | boolean \\| [SkeletonAvatarProps](#skeletonavatarprops) | false |\n| loading | Display the skeleton when true | boolean | - |\n| paragraph | Show paragraph placeholder | boolean \\| [SkeletonParagraphProps](#skeletonparagraphprops) | true |\n| round | Show paragraph and title radius when true | boolean | false |\n| title | Show title placeholder | boolean \\| [SkeletonTitleProps](#skeletontitleprops) | true |\n\n### SkeletonAvatarProps\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| active | Show animation effect, only valid when used avatar independently | boolean | false |\n| shape | Set the shape of avatar | `circle` \\| `square` | - |\n| size | Set the size of avatar | number \\| `large` \\| `small` \\| `default` | - |\n\n### SkeletonTitleProps\n\n| Property | Description            | Type             | Default |\n| -------- | ---------------------- | ---------------- | ------- |\n| width    | Set the width of title | number \\| string | -       |\n\n### SkeletonParagraphProps\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| rows | Set the row count of paragraph | number | - |\n| width | Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width | number \\| string \\| Array&lt;number \\| string> | - |\n\n### SkeletonButtonProps\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| active | Show animation effect | boolean | false |  |\n| block | Option to fit button width to its parent width | boolean | false | 4.17.0 |\n| shape | Set the shape of button | `circle` \\| `round` \\| `square` \\| `default` | - |  |\n| size | Set the size of button | `large` \\| `small` \\| `default` | - |  |\n\n### SkeletonInputProps\n\n| Property | Description           | Type                            | Default |\n| -------- | --------------------- | ------------------------------- | ------- |\n| active   | Show animation effect | boolean                         | false   |\n| size     | Set the size of input | `large` \\| `small` \\| `default` | -       |\n\n## Design Token\n\n<ComponentTokenTable component=\"Skeleton\"></ComponentTokenTable>\n"},"slider":{"zh-CN":"---\ncategory: Components\nsubtitle: 滑动输入条\ngroup: 数据录入\ntitle: Slider\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*_4heQaUrFn4AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*XkgXTaudeosAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n滑动型输入器，展示当前值和可选范围。\n\n## 何时使用\n\n当用户需要在数值区间/自定义区间内进行选择时，可为连续或离散值。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/input-number.tsx\">带输入框的滑块</code>\n<code src=\"./demo/icon-slider.tsx\">带 icon 的滑块</code>\n<code src=\"./demo/tip-formatter.tsx\">自定义提示</code>\n<code src=\"./demo/event.tsx\">事件</code>\n<code src=\"./demo/mark.tsx\">带标签的滑块</code>\n<code src=\"./demo/vertical.tsx\">垂直</code>\n<code src=\"./demo/show-tooltip.tsx\">控制 ToolTip 的显示</code>\n<code src=\"./demo/reverse.tsx\">反向</code>\n<code src=\"./demo/draggableTrack.tsx\">范围可拖拽</code>\n<code src=\"./demo/multiple.tsx\">多点组合</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 自动获取焦点 | boolean | false |  |\n| classNames | 语义化结构 className | Record<SemanticDOM, string> | - | 5.10.0 |\n| defaultValue | 设置初始取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number] | number \\| \\[number, number] | 0 \\| \\[0, 0] |  |\n| disabled | 值为 true 时，滑块为禁用状态 | boolean | false |  |\n| keyboard | 支持使用键盘操作 handler | boolean | true | 5.2.0+ |\n| dots | 是否只能拖拽到刻度上 | boolean | false |  |\n| included | `marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列 | boolean | true |  |\n| marks | 刻度标记，key 的类型必须为 `number` 且取值在闭区间 \\[min, max] 内，每个标签可以单独设置样式 | object | { number: ReactNode } or { number: { style: CSSProperties, label: ReactNode } } |  |\n| max | 最大值 | number | 100 |  |\n| min | 最小值 | number | 0 |  |\n| range | 双滑块模式 | boolean \\| [range](#range) | false |  |\n| reverse | 反向坐标轴 | boolean | false |  |\n| step | 步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 null，此时 Slider 的可选值仅有 marks 标出来的部分 | number \\| null | 1 |  |\n| styles | 语义化结构 className | Record<SemanticDOM, React.CSSProperties> | - | 5.10.0 |\n| tooltip | 设置 Tooltip 相关属性 | [tooltip](#tooltip) | - | 4.23.0 |\n| value | 设置当前取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number] | number \\| \\[number, number] | - |  |\n| vertical | 值为 true 时，Slider 为垂直方向 | boolean | false |  |\n| onChangeComplete | 与 `mouseup` 和 `keyup` 触发时机一致，把当前值作为参数传入 | (value) => void | - |  |\n| onChange | 当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入 | (value) => void | - |  |\n\n### `styles` 和 `classNames` 属性\n\n| 名称   | 说明                             | 版本   |\n| ------ | -------------------------------- | ------ |\n| track  | 范围选择下，点和点之间单个选取条 | 5.10.0 |\n| tracks | 范围选择下，整个范围选取条       | 5.10.0 |\n| rail   | 背景条                           | 5.10.0 |\n| handle | 抓取点                           | 5.10.0 |\n\n### range\n\n| 参数           | 说明                 | 类型    | 默认值 | 版本   |\n| -------------- | -------------------- | ------- | ------ | ------ |\n| draggableTrack | 范围刻度是否可被拖拽 | boolean | false  | 4.10.0 |\n\n### tooltip\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoAdjustOverflow | 是否自动调整弹出位置 | boolean | true | 5.8.0 |\n| open | 值为 true 时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时 | boolean | - | 4.23.0 |\n| placement | 设置 Tooltip 展示位置。参考 [Tooltip](/components/tooltip-cn) | string | - | 4.23.0 |\n| getPopupContainer | Tooltip 渲染父节点，默认渲染到 body 上 | (triggerNode) => HTMLElement | () => document.body | 4.23.0 |\n| formatter | Slider 会把当前值传给 `formatter`，并在 Tooltip 中显示 `formatter` 的返回值，若为 null，则隐藏 Tooltip | value => ReactNode \\| null | IDENTITY | 4.23.0 |\n\n## 方法\n\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Slider\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Slider\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*_4heQaUrFn4AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*XkgXTaudeosAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA Slider component for displaying current value and intervals in range.\n\n## When To Use\n\nTo input a value in a range.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/input-number.tsx\">Slider with InputNumber</code>\n<code src=\"./demo/icon-slider.tsx\">Slider with icon</code>\n<code src=\"./demo/tip-formatter.tsx\">Customize tooltip</code>\n<code src=\"./demo/event.tsx\">Event</code>\n<code src=\"./demo/mark.tsx\">Graduated slider</code>\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n<code src=\"./demo/show-tooltip.tsx\">Control visible of ToolTip</code>\n<code src=\"./demo/reverse.tsx\">Reverse</code>\n<code src=\"./demo/draggableTrack.tsx\">Draggable track</code>\n<code src=\"./demo/multiple.tsx\">Multiple handles</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoAdjustOverflow | Whether to automatically adjust the popup position | boolean | true | 5.8.0 |\n| autoFocus | Whether get focus when component mounted | boolean | false |  |\n| defaultValue | The default value of slider. When `range` is false, use number, otherwise, use \\[number, number] | number \\| \\[number, number] | 0 \\| \\[0, 0] |  |\n| disabled | If true, the slider will not be intractable | boolean | false |  |\n| keyboard | Support using keyboard to move handlers | boolean | true | 5.2.0+ |\n| dots | Whether the thumb can drag over tick only | boolean | false |  |\n| included | Make effect when `marks` not null, true means containment and false means coordinative | boolean | true |  |\n| marks | Tick mark of Slider, type of key must be `number`, and must in closed interval \\[min, max], each mark can declare its own style | object | { number: ReactNode } \\| { number: { style: CSSProperties, label: ReactNode } } |  |\n| max | The maximum value the slider can slide to | number | 100 |  |\n| min | The minimum value the slider can slide to | number | 0 |  |\n| range | Dual thumb mode | boolean | false |  |\n| reverse | Reverse the component | boolean | false |  |\n| step | The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When `marks` no null, `step` can be null | number \\| null | 1 |  |\n| tooltip | The tooltip relate props | [tooltip](#tooltip) | - | 4.23.0 |\n| value | The value of slider. When `range` is false, use number, otherwise, use \\[number, number] | number \\| \\[number, number] | - |  |\n| vertical | If true, the slider will be vertical | boolean | false |  |\n| onChangeComplete | Fire when `mouseup` or `keyup` is fired | (value) => void | - |  |\n| onChange | Callback function that is fired when the user changes the slider's value | (value) => void | - |  |\n\n### `styles` 和 `classNames` 属性\n\n| Property | Description                                 | Version |\n| -------- | ------------------------------------------- | ------- |\n| track    | The track between handle to handle in range | 5.10.0  |\n| tracks   | Who track in range                          | 5.10.0  |\n| rail     | Background rail                             | 5.10.0  |\n| handle   | The handle pointer                          | 5.10.0  |\n\n### range\n\n| Property       | Description                     | Type    | Default | Version |\n| -------------- | ------------------------------- | ------- | ------- | ------- |\n| draggableTrack | Whether range track can be drag | boolean | false   | 4.10.0  |\n\n### tooltip\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| open | If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering | boolean | - | 4.23.0 |\n| placement | Set Tooltip display position. Ref [Tooltip](/components/tooltip/) | string | - | 4.23.0 |\n| getPopupContainer | The DOM container of the Tooltip, the default behavior is to create a div element in body | (triggerNode) => HTMLElement | () => document.body | 4.23.0 |\n| formatter | Slider will pass its value to `formatter`, and display its value in Tooltip, and hide Tooltip when return value is null | value => ReactNode \\| null | IDENTITY | 4.23.0 |\n\n## Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n## Design Token\n\n<ComponentTokenTable component=\"Slider\"></ComponentTokenTable>\n"},"space":{"zh-CN":"---\ncategory: Components\ngroup: 布局\nsubtitle: 间距\ntitle: Space\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ZiJ3SbOH9SUAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*37T2R6O9oi0AAAAAAAAAAAAADrJ8AQ/original\n---\n\n设置组件之间的间距。\n\n## 何时使用\n\n避免组件紧贴在一起，拉开统一的空间。\n\n- 适合行内元素的水平间距。\n- 可以设置各种水平对齐方式。\n- 需要表单组件之间紧凑连接且合并边框时，使用 Space.Compact（自 `antd@4.24.0` 版本开始提供该组件）。\n\n### 与 Flex 组件的区别\n\n- Space 为内联元素提供间距，其本身会为每一个子元素添加包裹元素用于内联对齐。适用于行、列中多个子元素的等距排列。\n- Flex 为块级元素提供间距，其本身不会添加包裹元素。适用于垂直或水平方向上的子元素布局，并提供了更多的灵活性和控制能力。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/base.tsx\">基本用法</code>\n<code src=\"./demo/vertical.tsx\">垂直间距</code>\n<code src=\"./demo/size.tsx\">间距大小</code>\n<code src=\"./demo/align.tsx\">对齐</code>\n<code src=\"./demo/wrap.tsx\">自动换行</code>\n<code src=\"./demo/split.tsx\">分隔符</code>\n<code src=\"./demo/compact.tsx\">紧凑布局组合</code>\n<code src=\"./demo/compact-buttons.tsx\">Button 紧凑布局</code>\n<code src=\"./demo/compact-button-vertical.tsx\">垂直方向紧凑布局</code>\n<code src=\"./demo/compact-debug.tsx\" debug>调试 Input 前置/后置标签</code>\n<code src=\"./demo/compact-nested.tsx\" debug>紧凑布局嵌套</code>\n<code src=\"./demo/debug.tsx\" debug>多样的 Child</code>\n<code src=\"./demo/gap-in-line.tsx\" debug>Flex gap 样式</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Space\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 对齐方式 | `start` \\| `end` \\|`center` \\|`baseline` | - | 4.2.0 |\n| direction | 间距方向 | `vertical` \\| `horizontal` | `horizontal` | 4.1.0 |\n| size | 间距大小 | [Size](#size) \\| [Size\\[\\]](#size) | `small` | 4.1.0 \\| Array: 4.9.0 |\n| split | 设置拆分 | ReactNode | - | 4.7.0 |\n| wrap | 是否自动换行，仅在 `horizontal` 时有效 | boolean | false | 4.9.0 |\n\n### Size\n\n`'small' | 'middle' | 'large' | number`\n\n### Space.Compact\n\n> 自 antd@4.24.0 版本开始提供该组件。\n\n需要表单组件之间紧凑连接且合并边框时，使用 Space.Compact。支持的组件有：\n\n- Button\n- AutoComplete\n- Cascader\n- DatePicker\n- Input/Input.Search\n- InputNumber\n- Select\n- TimePicker\n- TreeSelect\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| block | 将宽度调整为父元素宽度的选项 | boolean | false | 4.24.0 |\n| direction | 指定排列方向 | `vertical` \\| `horizontal` | `horizontal` | 4.24.0 |\n| size | 子组件大小 | `large` \\| `middle` \\| `small` | `middle` | 4.24.0 |\n\n### `styles` 和 `classNames` 属性\n\n<!-- prettier-ignore -->\n| 名称 | 说明  | 版本  |\n| ---- | --------------------- | ----- |\n| item | 设置 `Space` 包裹的子组件 | 5.6.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Space\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Layout\ntitle: Space\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*ZiJ3SbOH9SUAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*37T2R6O9oi0AAAAAAAAAAAAADrJ8AQ/original\n---\n\nSet components spacing.\n\n## When To Use\n\n- Avoid components clinging together and set a unified space.\n- Use Space.Compact when child form components are compactly connected and the border is collapsed (After version `antd@4.24.0` Supported).\n\n### Difference with Flex component\n\n- Space is used to set the spacing between inline elements. It will add a wrapper element for each child element for inline alignment. Suitable for equidistant arrangement of multiple child elements in rows and columns.\n- Flex is used to set the layout of block-level elements. It does not add a wrapper element. Suitable for layout of child elements in vertical or horizontal direction, and provides more flexibility and control.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/base.tsx\">Basic Usage</code>\n<code src=\"./demo/vertical.tsx\">Vertical Space</code>\n<code src=\"./demo/size.tsx\">Space Size</code>\n<code src=\"./demo/align.tsx\">Align</code>\n<code src=\"./demo/wrap.tsx\">Wrap</code>\n<code src=\"./demo/split.tsx\">Split</code>\n<code src=\"./demo/compact.tsx\">Compact Mode for form component</code>\n<code src=\"./demo/compact-buttons.tsx\">Button Compact Mode</code>\n<code src=\"./demo/compact-button-vertical.tsx\">Vertical Compact Mode</code>\n<code src=\"./demo/compact-debug.tsx\" debug>Input addon debug</code>\n<code src=\"./demo/compact-nested.tsx\" debug>Nested Space Compact</code>\n<code src=\"./demo/debug.tsx\" debug>Diverse Child</code>\n<code src=\"./demo/gap-in-line.tsx\" debug>Flex gap style</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | Align items | `start` \\| `end` \\|`center` \\|`baseline` | - | 4.2.0 |\n| direction | The space direction | `vertical` \\| `horizontal` | `horizontal` | 4.1.0 |\n| size | The space size | [Size](#size) \\| [Size\\[\\]](#size) | `small` | 4.1.0 \\| Array: 4.9.0 |\n| split | Set split | ReactNode | - | 4.7.0 |\n| wrap | Auto wrap line, when `horizontal` effective | boolean | false | 4.9.0 |\n\n### Size\n\n`'small' | 'middle' | 'large' | number`\n\n### Space.Compact\n\nUse Space.Compact when child form components are compactly connected and the border is collapsed. The supported components are：\n\n- Button\n- AutoComplete\n- Cascader\n- DatePicker\n- Input/Input.Search\n- InputNumber\n- Select\n- TimePicker\n- TreeSelect\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| block | Option to fit width to its parent\\'s width | boolean | false | 4.24.0 |\n| direction | Set direction of layout | `vertical` \\| `horizontal` | `horizontal` | 4.24.0 |\n| size | Set child component size | `large` \\| `middle` \\| `small` | `middle` | 4.24.0 |\n\n### `styles` and `classNames` attribute\n\n<!-- prettier-ignore -->\n| Property | Description | Version |\n| -------- | ------------------------- | ------- |\n| item     | set `Space` child element | 5.6.0   |\n\n## Design Token\n\n<ComponentTokenTable component=\"Space\"></ComponentTokenTable>\n"},"spin":{"zh-CN":"---\ncategory: Components\ngroup: 反馈\ntitle: Spin\nsubtitle: 加载中\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5mC5TomY4B0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*i43_ToFrL8YAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n用于页面和区块的加载中状态。\n\n## 何时使用\n\n页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/size.tsx\">各种大小</code>\n<code src=\"./demo/inside.tsx\">容器</code>\n<code src=\"./demo/nested.tsx\">卡片加载中</code>\n<code src=\"./demo/tip.tsx\">自定义描述文案</code>\n<code src=\"./demo/delayAndDebounce.tsx\">延迟</code>\n<code src=\"./demo/custom-indicator.tsx\">自定义指示符</code>\n<code src=\"./demo/fullscreen.tsx\">全屏</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| delay | 延迟显示加载效果的时间（防止闪烁） | number (毫秒) | - |\n| indicator | 加载指示符 | ReactNode | - |\n| size | 组件大小，可选值为 `small` `default` `large` | string | `default` |\n| spinning | 是否为加载中状态 | boolean | true |\n| tip | 当作为包裹元素时，可以自定义描述文案 | ReactNode | - |\n| wrapperClassName | 包装器的类属性 | string | - |\n| fullscreen | 显示带有 `Spin` 组件的背景 | boolean | false | 5.11.0 |\n\n### 静态方法\n\n- `Spin.setDefaultIndicator(indicator: ReactNode)`\n\n  你可以自定义全局默认 Spin 的元素。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Spin\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Feedback\ntitle: Spin\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*5mC5TomY4B0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*i43_ToFrL8YAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA spinner for displaying loading state of a page or a section.\n\n## When To Use\n\nWhen part of the page is waiting for asynchronous data or during a rendering process, an appropriate loading animation can effectively alleviate users' inquietude.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/inside.tsx\">Inside a container</code>\n<code src=\"./demo/nested.tsx\">Embedded mode</code>\n<code src=\"./demo/tip.tsx\">Customized description</code>\n<code src=\"./demo/delayAndDebounce.tsx\">Delay</code>\n<code src=\"./demo/custom-indicator.tsx\">Custom spinning indicator</code>\n<code src=\"./demo/fullscreen.tsx\">Fullscreen</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| delay | Specifies a delay in milliseconds for loading state (prevent flush) | number (milliseconds) | - |\n| indicator | React node of the spinning indicator | ReactNode | - |\n| size | The size of Spin, options: `small`, `default` and `large` | string | `default` |\n| spinning | Whether Spin is visible | boolean | true |\n| tip | Customize description content when Spin has children | ReactNode | - |\n| wrapperClassName | The className of wrapper when Spin has children | string | - |\n| fullscreen | Display a backdrop with the `Spin` component | boolean | false | 5.11.0 |\n\n### Static Method\n\n- `Spin.setDefaultIndicator(indicator: ReactNode)`\n\n  You can define default spin element globally.\n\n## Design Token\n\n<ComponentTokenTable component=\"Spin\"></ComponentTokenTable>\n"},"statistic":{"zh-CN":"---\ncategory: Components\nsubtitle: 统计数值\ngroup: 数据展示\ntitle: Statistic\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YL7PRYNtH-4AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*BPWDRbSYxJ4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n展示统计数值。\n\n## 何时使用\n\n- 当需要突出某个或某组数字时。\n- 当需要展示带描述的统计类数据时使用。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/unit.tsx\">单位</code>\n<code src=\"./demo/animated.tsx\">动画效果</code>\n<code src=\"./demo/card.tsx\" background=\"grey\">在卡片中使用</code>\n<code src=\"./demo/countdown.tsx\">倒计时</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n#### Statistic\n\n| 参数             | 说明               | 类型                 | 默认值 | 版本  |\n| ---------------- | ------------------ | -------------------- | ------ | ----- |\n| decimalSeparator | 设置小数点         | string               | `.`    |       |\n| formatter        | 自定义数值展示     | (value) => ReactNode | -      |       |\n| groupSeparator   | 设置千分位标识符   | string               | `,`    |       |\n| loading          | 数值是否加载中     | boolean              | false  | 4.8.0 |\n| precision        | 数值精度           | number               | -      |       |\n| prefix           | 设置数值的前缀     | ReactNode            | -      |       |\n| suffix           | 设置数值的后缀     | ReactNode            | -      |       |\n| title            | 数值的标题         | ReactNode            | -      |       |\n| value            | 数值内容           | string \\| number     | -      |       |\n| valueStyle       | 设置数值区域的样式 | CSSProperties        | -      |       |\n\n#### Statistic.Countdown\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 格式化倒计时展示，参考 [dayjs](https://day.js.org/) | string | `HH:mm:ss` |  |\n| prefix | 设置数值的前缀 | ReactNode | - |  |\n| suffix | 设置数值的后缀 | ReactNode | - |  |\n| title | 数值的标题 | ReactNode | - |  |\n| value | 数值内容 | number \\| dayjs | - |  |\n| valueStyle | 设置数值区域的样式 | CSSProperties | - |  |\n| onFinish | 倒计时完成时触发 | () => void | - |  |\n| onChange | 倒计时时间变化时触发 | (value: number) => void | - | 4.16.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Statistic\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Statistic\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*YL7PRYNtH-4AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*BPWDRbSYxJ4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nDisplay statistic number.\n\n## When To Use\n\n- When want to highlight some data.\n- When want to display statistic data with description.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/unit.tsx\">Unit</code>\n<code src=\"./demo/animated.tsx\">Animated number</code>\n<code src=\"./demo/card.tsx\" background=\"grey\">In Card</code>\n<code src=\"./demo/countdown.tsx\">Countdown</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n#### Statistic\n\n| Property         | Description                   | Type                 | Default | Version |\n| ---------------- | ----------------------------- | -------------------- | ------- | ------- |\n| decimalSeparator | The decimal separator         | string               | `.`     |         |\n| formatter        | Customize value display logic | (value) => ReactNode | -       |         |\n| groupSeparator   | Group separator               | string               | `,`     |         |\n| loading          | Loading status of Statistic   | boolean              | false   | 4.8.0   |\n| precision        | The precision of input value  | number               | -       |         |\n| prefix           | The prefix node of value      | ReactNode            | -       |         |\n| suffix           | The suffix node of value      | ReactNode            | -       |         |\n| title            | Display title                 | ReactNode            | -       |         |\n| value            | Display value                 | string \\| number     | -       |         |\n| valueStyle       | Set value section style       | CSSProperties        | -       |         |\n\n#### Statistic.Countdown\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| format | Format as [dayjs](https://day.js.org/) | string | `HH:mm:ss` |  |\n| prefix | The prefix node of value | ReactNode | - |  |\n| suffix | The suffix node of value | ReactNode | - |  |\n| title | Display title | ReactNode | - |  |\n| value | Set target countdown time | number \\| dayjs | - |  |\n| valueStyle | Set value section style | CSSProperties | - |  |\n| onFinish | Trigger when time's up | () => void | - |  |\n| onChange | Trigger when time's changing | (value: number) => void | - | 4.16.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Statistic\"></ComponentTokenTable>\n"},"steps":{"zh-CN":"---\ncategory: Components\nsubtitle: 步骤条\ngroup: 导航\ntitle: Steps\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*677sTqCpE3wAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*cFsBQLA0b7UAAAAAAAAAAAAADrJ8AQ/original\n---\n\n引导用户按照流程完成任务的导航条。\n\n## 何时使用\n\n当任务复杂或者存在先后关系时，将其分解成一系列步骤，从而简化任务。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/simple.tsx\">基本用法</code>\n<code src=\"./demo/small-size.tsx\">迷你版</code>\n<code src=\"./demo/icon.tsx\">带图标的步骤条</code>\n<code src=\"./demo/step-next.tsx\">步骤切换</code>\n<code src=\"./demo/vertical.tsx\">竖直方向的步骤条</code>\n<code src=\"./demo/vertical-small.tsx\">竖直方向的小型步骤条</code>\n<code src=\"./demo/error.tsx\">步骤运行错误</code>\n<code src=\"./demo/progress-dot.tsx\">点状步骤条</code>\n<code src=\"./demo/customized-progress-dot.tsx\">自定义点状步骤条</code>\n<code src=\"./demo/progress-dot-small.tsx\" debug>迷你版点状步骤条</code>\n<code src=\"./demo/clickable.tsx\">可点击</code>\n<code src=\"./demo/nav.tsx\">导航步骤</code>\n<code src=\"./demo/progress.tsx\">带有进度的步骤</code>\n<code src=\"./demo/label-placement.tsx\">标签放置位置</code>\n<code src=\"./demo/progress-debug.tsx\" debug>Progress Debug</code>\n<code src=\"./demo/steps-in-steps.tsx\" debug>Steps 嵌套 Steps</code>\n<code src=\"./demo/inline.tsx\">内联步骤</code>\n<code src=\"./demo/wireframe.tsx\" debug>线框风格</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Steps\n\n整体步骤条。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 步骤条类名 | string | - |  |\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 |  |\n| direction | 指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向 | string | `horizontal` |  |\n| initial | 起始序号，从 0 开始记数 | number | 0 |  |\n| labelPlacement | 指定标签放置位置，默认水平放图标右侧，可选 `vertical` 放图标下方 | string | `horizontal` |  |\n| percent | 当前 `process` 步骤显示的进度条进度（只对基本类型的 Steps 生效） | number | - | 4.5.0 |\n| progressDot | 点状步骤条，可以设置为一个 function，labelPlacement 将强制为 `vertical` | boolean \\| (iconDot, {index, status, title, description}) => ReactNode | false |  |\n| responsive | 当屏幕宽度小于 `532px` 时自动变为垂直模式 | boolean | true |  |\n| size | 指定大小，目前支持普通（`default`）和迷你（`small`） | string | `default` |  |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | `process` |  |\n| type | 步骤条类型，可选 `default` `navigation` `inline` | string | `default` | inline: 5.0 |\n| onChange | 点击切换步骤时触发 | (current) => void | - |  |\n| items | 配置选项卡内容 | [StepItem](#stepitem) | [] | 4.24.0 |\n\n### `type=\"inline\"`\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| className | 步骤条类名 | string | - |  |\n| current | 指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态 | number | 0 |  |\n| initial | 起始序号，从 0 开始记数 | number | 0 |  |\n| status | 指定当前步骤的状态，可选 `wait` `process` `finish` `error` | string | `process` |  |\n| onChange | 点击切换步骤时触发 | (current) => void | - |  |\n| items | 配置选项卡内容，不支持 `icon` `subtitle` | [StepItem](#stepitem) | [] | 4.24.0 |\n\n### StepItem\n\n步骤条内的每一个步骤。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| description | 步骤的详情描述，可选 | ReactNode | - |  |\n| disabled | 禁用点击 | boolean | false |  |\n| icon | 步骤图标的类型，可选 | ReactNode | - |  |\n| status | 指定状态。当不配置该属性时，会使用 Steps 的 `current` 来自动指定状态。可选：`wait` `process` `finish` `error` | string | `wait` |  |\n| subTitle | 子标题 | ReactNode | - |  |\n| title | 标题 | ReactNode | - |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Steps\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Navigation\ntitle: Steps\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*677sTqCpE3wAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*cFsBQLA0b7UAAAAAAAAAAAAADrJ8AQ/original\n---\n\n`Steps` is a navigation bar that guides users through the steps of a task.\n\n## When To Use\n\nWhen a given task is complicated or has a certain sequence in the series of subtasks, we can decompose it into several steps to make things easier.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/simple.tsx\">Basic</code>\n<code src=\"./demo/small-size.tsx\">Mini version</code>\n<code src=\"./demo/icon.tsx\">With icon</code>\n<code src=\"./demo/step-next.tsx\">Switch Step</code>\n<code src=\"./demo/vertical.tsx\">Vertical</code>\n<code src=\"./demo/vertical-small.tsx\">Vertical mini version</code>\n<code src=\"./demo/error.tsx\">Error status</code>\n<code src=\"./demo/progress-dot.tsx\">Dot Style</code>\n<code src=\"./demo/customized-progress-dot.tsx\">Customized Dot Style</code>\n<code src=\"./demo/progress-dot-small.tsx\" debug>Dot Style Size Small</code>\n<code src=\"./demo/clickable.tsx\">Clickable</code>\n<code src=\"./demo/nav.tsx\">Navigation Steps</code>\n<code src=\"./demo/progress.tsx\">Steps with progress</code>\n<code src=\"./demo/label-placement.tsx\">Label Placement</code>\n<code src=\"./demo/progress-debug.tsx\" debug>Progress Debug</code>\n<code src=\"./demo/steps-in-steps.tsx\" debug>Steps inside Steps</code>\n<code src=\"./demo/inline.tsx\">Inline Steps</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Steps\n\nThe whole of the step bar.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | Additional class to Steps | string | - |  |\n| current | To set the current step, counting from 0. You can overwrite this state by using `status` of `Step` | number | 0 |  |\n| direction | To specify the direction of the step bar, `horizontal` or `vertical` | string | `horizontal` |  |\n| initial | Set the initial step, counting from 0 | number | 0 |  |\n| labelPlacement | Place title and description with `horizontal` or `vertical` direction | string | `horizontal` |  |\n| percent | Progress circle percentage of current step in `process` status (only works on basic Steps) | number | - | 4.5.0 |\n| progressDot | Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be `vertical` | boolean \\| (iconDot, {index, status, title, description}) => ReactNode | false |  |\n| responsive | Change to vertical direction when screen width smaller than `532px` | boolean | true |  |\n| size | To specify the size of the step bar, `default` and `small` are currently supported | string | `default` |  |\n| status | To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error` | string | `process` |  |\n| type | Type of steps, can be set to one of the following values: `default` `navigation` `inline` | string | `default` | inline: 5.0 |\n| onChange | Trigger when Step is changed | (current) => void | - |  |\n| items | StepItem content | [StepItem](#stepitem) | [] | 4.24.0 |\n\n### `type=\"inline\"`\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| className | Additional class to Steps | string | - |  |\n| current | To set the current step, counting from 0. You can overwrite this state by using `status` of `Step` | number | 0 |  |\n| initial | Set the initial step, counting from 0 | number | 0 |  |\n| status | To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error` | string | `process` |  |\n| onChange | Trigger when Step is changed | (current) => void | - |  |\n| items | StepItem content. not supported: `icon` `subtitle` | [StepItem](#stepitem) | [] | 4.24.0 |\n\n### StepItem\n\nA single step in the step bar.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| description | Description of the step, optional property | ReactNode | - |  |\n| disabled | Disable click | boolean | false |  |\n| icon | Icon of the step, optional property | ReactNode | - |  |\n| status | To specify the status. It will be automatically set by `current` of `Steps` if not configured. Optional values are: `wait` `process` `finish` `error` | string | `wait` |  |\n| subTitle | Subtitle of the step | ReactNode | - |  |\n| title | Title of the step | ReactNode | - |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Steps\"></ComponentTokenTable>\n"},"switch":{"zh-CN":"---\ncategory: Components\nsubtitle: 开关\ngroup: 数据录入\ntitle: Switch\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*rtArRpBNDZcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*al07RK8SGf4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n开关选择器。\n\n## 何时使用\n\n- 需要表示开关状态/两种状态之间的切换时；\n- 和 `checkbox` 的区别是，切换 `switch` 会直接触发状态改变，而 `checkbox` 一般用于状态标记，需要和提交操作配合。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/disabled.tsx\">不可用</code>\n<code src=\"./demo/text.tsx\">文字和图标</code>\n<code src=\"./demo/size.tsx\">两种大小</code>\n<code src=\"./demo/loading.tsx\">加载中</code>\n<code src=\"./demo/component-token.tsx\" debug>自定义组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoFocus | 组件自动获取焦点 | boolean | false |  |\n| checked | 指定当前是否选中 | boolean | false |  |\n| checkedChildren | 选中时的内容 | ReactNode | - |  |\n| className | Switch 器类名 | string | - |  |\n| defaultChecked | 初始是否选中 | boolean | false |  |\n| defaultValue | `defaultChecked` 的别名 | boolean | - | 5.12.0 |\n| disabled | 是否禁用 | boolean | false |  |\n| loading | 加载中的开关 | boolean | false |  |\n| size | 开关大小，可选值：`default` `small` | string | `default` |  |\n| unCheckedChildren | 非选中时的内容 | ReactNode | - |  |\n| value | `checked` 的别名 | boolean | - | 5.12.0 |\n| onChange | 变化时的回调函数 | function(checked: boolean, event: Event) | - |  |\n| onClick | 点击时的回调函数 | function(checked: boolean, event: Event) | - |  |\n\n## 方法\n\n| 名称    | 描述     |\n| ------- | -------- |\n| blur()  | 移除焦点 |\n| focus() | 获取焦点 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Switch\"></ComponentTokenTable>\n\n## FAQ\n\n### 为什么在 Form.Item 下不能绑定数据？\n\nForm.Item 默认绑定值属性到 `value` 上，而 Switch 的值属性为 `checked`。你可以通过 `valuePropName` 来修改绑定的值属性。\n\n```tsx | pure\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Switch />\n</Form.Item>\n```\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Switch\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*rtArRpBNDZcAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*al07RK8SGf4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nSwitching Selector.\n\n## When To Use\n\n- If you need to represent the switching between two states or on-off state.\n- The difference between `Switch` and `Checkbox` is that `Switch` will trigger a state change directly when you toggle it, while `Checkbox` is generally used for state marking, which should work in conjunction with submit operation.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/text.tsx\">Text & icon</code>\n<code src=\"./demo/size.tsx\">Two sizes</code>\n<code src=\"./demo/loading.tsx\">Loading</code>\n<code src=\"./demo/component-token.tsx\" debug>Custom component token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoFocus | Whether get focus when component mounted | boolean | false |  |\n| checked | Determine whether the Switch is checked | boolean | false |  |\n| checkedChildren | The content to be shown when the state is checked | ReactNode | - |  |\n| className | The additional class to Switch | string | - |  |\n| defaultChecked | Whether to set the initial state | boolean | false |  |\n| defaultValue | Alias for `defaultChecked` | boolean | - | 5.12.0 |\n| disabled | Disable switch | boolean | false |  |\n| loading | Loading state of switch | boolean | false |  |\n| size | The size of the Switch, options: `default` `small` | string | `default` |  |\n| unCheckedChildren | The content to be shown when the state is unchecked | ReactNode | - |  |\n| value | Alias for `checked` | boolean | - | 5.12.0 |\n| onChange | Trigger when the checked state is changing | function(checked: boolean, event: Event) | - |  |\n| onClick | Trigger when clicked | function(checked: boolean, event: Event) | - |  |\n\n## Methods\n\n| Name    | Description  |\n| ------- | ------------ |\n| blur()  | Remove focus |\n| focus() | Get focus    |\n\n## Design Token\n\n<ComponentTokenTable component=\"Switch\"></ComponentTokenTable>\n\n## FAQ\n\n### Why not work in Form.Item?\n\nForm.Item default bind value to `value` property, but Switch value property is `checked`. You can use `valuePropName` to change bind property.\n\n```tsx | pure\n<Form.Item name=\"fieldA\" valuePropName=\"checked\">\n  <Switch />\n</Form.Item>\n```\n"},"table":{"zh-CN":"---\ncategory: Components\ngroup: 数据展示\ntitle: Table\nsubtitle: 表格\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*3yz3QqMlShYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Sv8XQ50NB40AAAAAAAAAAAAADrJ8AQ/original\n---\n\n展示行列数据。\n\n## 何时使用\n\n- 当有大量结构化的数据需要展现时；\n- 当需要对数据进行排序、搜索、分页、自定义操作等复杂行为时。\n\n## 如何使用\n\n指定表格的数据源 `dataSource` 为一个数组。\n\n```jsx\nconst dataSource = [\n  {\n    key: '1',\n    name: '胡彦斌',\n    age: 32,\n    address: '西湖区湖底公园1号',\n  },\n  {\n    key: '2',\n    name: '胡彦祖',\n    age: 42,\n    address: '西湖区湖底公园1号',\n  },\n];\n\nconst columns = [\n  {\n    title: '姓名',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: '年龄',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: '住址',\n    dataIndex: 'address',\n    key: 'address',\n  },\n];\n\n<Table dataSource={dataSource} columns={columns} />;\n```\n\n## 相关推荐\n\n- [Kitchen Sketch 插件 💎](https://kitchen.alipay.com/)：设计师神器，两步自动生成 Ant Design 表格组件。\n- [ProTable](https://procomponents.ant.design/components/table) 高级表格：在 `antd` Table 之上扩展了更多便捷易用的功能，内置搜索、筛选、刷新等常用表格行为，并为多种类型数据展示提供了内置格式化。\n- [S2](https://s2.antv.vision/zh) 多维交叉分析表格：[AntV S2 和 Antd Table 有什么区别？](https://zhuanlan.zhihu.com/p/494995642)\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/jsx.tsx\">JSX 风格的 API</code>\n<code src=\"./demo/row-selection.tsx\">可选择</code>\n<code src=\"./demo/row-selection-and-operation.tsx\">选择和操作</code>\n<code src=\"./demo/row-selection-custom.tsx\">自定义选择项</code>\n<code src=\"./demo/row-selection-debug.tsx\" debug>选择性能</code>\n<code src=\"./demo/head.tsx\">筛选和排序</code>\n<code src=\"./demo/filter-in-tree.tsx\">树型筛选菜单</code>\n<code src=\"./demo/filter-search.tsx\">自定义筛选的搜索</code>\n<code src=\"./demo/multiple-sorter.tsx\">多列排序</code>\n<code src=\"./demo/reset-filter.tsx\">可控的筛选和排序</code>\n<code src=\"./demo/custom-filter-panel.tsx\">自定义筛选菜单</code>\n<code src=\"./demo/ajax.tsx\">远程加载数据</code>\n<code src=\"./demo/size.tsx\">紧凑型</code>\n<code src=\"./demo/narrow.tsx\" debug>紧凑型</code>\n<code src=\"./demo/bordered.tsx\">带边框</code>\n<code src=\"./demo/expand.tsx\">可展开</code>\n<code src=\"./demo/order-column.tsx\">特殊列排序</code>\n<code src=\"./demo/colspan-rowspan.tsx\">表格行/列合并</code>\n<code src=\"./demo/tree-data.tsx\">树形数据展示</code>\n<code src=\"./demo/tree-table-ellipsis.tsx\" debug>树形数据省略情况测试</code>\n<code src=\"./demo/fixed-header.tsx\">固定表头</code>\n<code src=\"./demo/fixed-columns.tsx\">固定列</code>\n<code src=\"./demo/fixed-columns-header.tsx\">固定头和列</code>\n<code src=\"./demo/hidden-columns.tsx\">隐藏列</code>\n<code src=\"./demo/grouping-columns.tsx\">表头分组</code>\n<code src=\"./demo/edit-cell.tsx\">可编辑单元格</code>\n<code src=\"./demo/edit-row.tsx\">可编辑行</code>\n<code src=\"./demo/nested-table.tsx\">嵌套子表格</code>\n<code src=\"./demo/drag-sorting.tsx\">拖拽排序</code>\n<code src=\"./demo/drag-sorting-handler.tsx\">拖拽手柄列</code>\n<code src=\"./demo/resizable-column.tsx\" debug>可伸缩列</code>\n<code src=\"./demo/ellipsis.tsx\">单元格自动省略</code>\n<code src=\"./demo/ellipsis-custom-tooltip.tsx\">自定义单元格省略提示</code>\n<code src=\"./demo/summary.tsx\">总结栏</code>\n<code src=\"./demo/virtual-list.tsx\" version=\">= 5.9.0\">虚拟列表</code>\n<code src=\"./demo/responsive.tsx\">响应式</code>\n<code src=\"./demo/nest-table-border-debug.tsx\" debug>嵌套带边框的表格 Debug</code>\n<code src=\"./demo/pagination.tsx\">分页设置</code>\n<code src=\"./demo/row-selection-custom-debug.tsx\" debug>自定义选择项组</code>\n<code src=\"./demo/sticky.tsx\">随页面滚动的固定表头和滚动条</code>\n<code src=\"./demo/dynamic-settings.tsx\">动态控制表格属性</code>\n<code src=\"./demo/selections-debug.tsx\" debug>带下拉箭头的表头</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Table\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| bordered | 是否展示外边框和列边框 | boolean | false |  |\n| columns | 表格列的配置描述，具体项见下表 | [ColumnsType](#column)\\[] | - |  |\n| components | 覆盖默认的 table 元素，`virtual` 下不支持 `components.body` | [TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129) | - |  |\n| dataSource | 数据数组 | object\\[] | - |  |\n| expandable | 配置展开属性 | [expandable](#expandable) | - |  |\n| footer | 表格尾部 | function(currentPageData) | - |  |\n| getPopupContainer | 设置表格内各类浮层的渲染节点，如筛选菜单 | (triggerNode) => HTMLElement | () => TableHtmlElement |  |\n| loading | 页面是否加载中 | boolean \\| [Spin Props](/components/spin-cn#api) | false |  |\n| locale | 默认文案设置，目前包括排序、过滤、空数据文案 | object | [默认值](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/zh_CN.tsx#L20-L37) |  |\n| pagination | 分页器，参考[配置项](#pagination)或 [pagination](/components/pagination-cn) 文档，设为 false 时不展示和进行分页 | object \\| `false` | - |  |\n| rowClassName | 表格行的类名 | function(record, index): string | - |  |\n| rowKey | 表格行 key 的取值，可以是字符串或一个函数 | string \\| function(record): string | `key` |  |\n| rowSelection | 表格行是否可选择，[配置项](#rowselection) | object | - |  |\n| scroll | 表格是否可滚动，也可以指定滚动区域的宽、高，[配置项](#scroll) | object | - |  |\n| showHeader | 是否显示表头 | boolean | true |  |\n| showSorterTooltip | 表头是否显示下一次排序的 tooltip 提示。当参数类型为对象时，将被设置为 Tooltip 的属性 | boolean \\| [Tooltip props](/components/tooltip-cn) | true |  |\n| size | 表格大小 | `large` \\| `middle` \\| `small` | `large` |  |\n| sortDirections | 支持的排序方式，取值为 `ascend` `descend` | Array | \\[`ascend`, `descend`] |  |\n| sticky | 设置粘性头部和滚动条 | boolean \\| `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}` | - | 4.6.0 (getContainer: 4.7.0) |\n| summary | 总结栏 | (currentData) => ReactNode | - |  |\n| tableLayout | 表格元素的 [table-layout](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout) 属性，设为 `fixed` 表示内容不会影响列的布局 | - \\| `auto` \\| `fixed` | 无<hr />固定表头/列或使用了 `column.ellipsis` 时，默认值为 `fixed` |  |\n| title | 表格标题 | function(currentPageData) | - |  |\n| onChange | 分页、排序、筛选变化时触发 | function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` \\| `sort` \\| `filter` }) | - |  |\n| onHeaderRow | 设置头部行属性 | function(columns, index) | - |  |\n| onRow | 设置行属性 | function(record, index) | - |  |\n| virtual | 支持虚拟列表，开启后不支持 `components.body` 自定义 | boolean | - | 5.9.0 |\n\n### Table ref\n\n| 参数 | 说明 | 类型 | 版本 |\n| --- | --- | --- | --- |\n| nativeElement | 最外层 div 元素 | HTMLDivElement | 5.11.0 |\n| scrollTo | 滚动到目标位置（设置 `key` 时为 Record 对应的 `rowKey`） | (config: { index?: number, key?: React.Key, top?: number }) => void | 5.11.0 |\n\n#### onRow 用法\n\n适用于 `onRow` `onHeaderRow` `onCell` `onHeaderCell`。\n\n```jsx\n<Table\n  onRow={(record) => {\n    return {\n      onClick: (event) => {}, // 点击行\n      onDoubleClick: (event) => {},\n      onContextMenu: (event) => {},\n      onMouseEnter: (event) => {}, // 鼠标移入行\n      onMouseLeave: (event) => {},\n    };\n  }}\n  onHeaderRow={(columns, index) => {\n    return {\n      onClick: () => {}, // 点击表头行\n    };\n  }}\n/>\n```\n\n### Column\n\n列描述数据对象，是 columns 中的一项，Column 使用相同的 API。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 设置列的对齐方式 | `left` \\| `right` \\| `center` | `left` |  |\n| className | 列样式类名 | string | - |  |\n| colSpan | 表头列合并，设置为 0 时，不渲染 | number | - |  |\n| dataIndex | 列数据在数据项中对应的路径，支持通过数组查询嵌套路径 | string \\| string\\[] | - |  |\n| defaultFilteredValue | 默认筛选值 | string\\[] | - |  |\n| filterResetToDefaultFilteredValue | 点击重置按钮的时候，是否恢复默认筛选值 | boolean | false |  |\n| defaultSortOrder | 默认排序顺序 | `ascend` \\| `descend` | - |  |\n| ellipsis | 超过宽度将自动省略，暂不支持和排序筛选一起使用。<br />设置为 `true` 或 `{ showTitle?: boolean }` 时，表格布局将变成 `tableLayout=\"fixed\"`。 | boolean \\| { showTitle?: boolean } | false | showTitle: 4.3.0 |\n| filterDropdown | 可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互 | ReactNode \\| (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode | - |  |\n| filterDropdownOpen | 用于控制自定义筛选菜单是否可见 | boolean | - |  |\n| filtered | 标识数据是否经过过滤，筛选图标会高亮 | boolean | false |  |\n| filteredValue | 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组 | string\\[] | - |  |\n| filterIcon | 自定义 filter 图标。 | ReactNode \\| (filtered: boolean) => ReactNode | false |  |\n| filterMultiple | 是否多选 | boolean | true |  |\n| filterMode | 指定筛选菜单的用户界面 | 'menu' \\| 'tree' | 'menu' | 4.17.0 |\n| filterSearch | 筛选菜单项是否可搜索 | boolean \\| function(input, record):boolean | false | boolean:4.17.0 function:4.19.0 |\n| filters | 表头的筛选菜单项 | object\\[] | - |  |\n| fixed | （IE 下无效）列是否固定，可选 `true` (等效于 `left`) `left` `right` | boolean \\| string | false |  |\n| key | React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性 | string | - |  |\n| render | 生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引 | function(text, record, index) {} | - |  |\n| responsive | 响应式 breakpoint 配置列表。未设置则始终可见。 | [Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[] | - | 4.2.0 |\n| rowScope | 设置列范围 | `row` \\| `rowgroup` | - | 5.1.0 |\n| shouldCellUpdate | 自定义单元格渲染时机 | (record, prevRecord) => boolean | - | 4.3.0 |\n| showSorterTooltip | 表头显示下一次排序的 tooltip 提示, 覆盖 table 中 `showSorterTooltip` | boolean \\| [Tooltip props](/components/tooltip-cn/#api) | true |  |\n| sortDirections | 支持的排序方式，覆盖 `Table` 中 `sortDirections`， 取值为 `ascend` `descend` | Array | \\[`ascend`, `descend`] |  |\n| sorter | 排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)。需要服务端排序可设为 `true`（单列排序） 或 `{ multiple: number }`（多列排序） | function \\| boolean \\| { compare: function, multiple: number } | - |  |\n| sortOrder | 排序的受控属性，外界可用此控制列的排序，可设置为 `ascend` `descend` `null` | `ascend` \\| `descend` \\| null | - |  |\n| sortIcon | 自定义 sort 图标 | (props: { sortOrder }) => ReactNode | - | 5.6.0 |\n| title | 列头显示文字（函数用法 `3.10.0` 后支持） | ReactNode \\| ({ sortOrder, sortColumn, filters }) => ReactNode | - |  |\n| width | 列宽度（[指定了也不生效？](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)） | string \\| number | - |  |\n| hidden | 隐藏列 | boolean | false | 5.13.0 |\n| onCell | 设置单元格属性 | function(record, rowIndex) | - |  |\n| onFilter | 本地模式下，确定筛选的运行函数 | function | - |  |\n| onFilterDropdownOpenChange | 自定义筛选菜单可见变化时调用 | function(visible) {} | - |  |\n| onHeaderCell | 设置头部单元格属性 | function(column) | - |  |\n\n### ColumnGroup\n\n| 参数  | 说明         | 类型      | 默认值 |\n| ----- | ------------ | --------- | ------ |\n| title | 列头显示文字 | ReactNode | -      |\n\n### pagination\n\n分页的配置项。\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| position | 指定分页显示的位置， 取值为`topLeft` \\| `topCenter` \\| `topRight` \\|`bottomLeft` \\| `bottomCenter` \\| `bottomRight` | Array | \\[`bottomRight`] |\n\n更多配置项，请查看 [`Pagination`](/components/pagination-cn)。\n\n### expandable\n\n展开功能的配置。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| childrenColumnName | 指定树形结构的列名 | string | children |  |\n| columnTitle | 自定义展开列表头 | ReactNode | - | 4.23.0 |\n| columnWidth | 自定义展开列宽度 | string \\| number | - |  |\n| defaultExpandAllRows | 初始时，是否展开所有行 | boolean | false |  |\n| defaultExpandedRowKeys | 默认展开的行 | string\\[] | - |  |\n| expandedRowClassName | 展开行的 className | function(record, index, indent): string | - |  |\n| expandedRowKeys | 展开的行，控制属性 | string\\[] | - |  |\n| expandedRowRender | 额外的展开行 | function(record, index, indent, expanded): ReactNode | - |  |\n| expandIcon | 自定义展开图标，参考[示例](https://codesandbox.io/s/fervent-bird-nuzpr) | function(props): ReactNode | - |  |\n| expandRowByClick | 通过点击行来展开子行 | boolean | false |  |\n| fixed | 控制展开图标是否固定，可选 `true` `'left'` `'right'` | boolean \\| string | false | 4.16.0 |\n| indentSize | 展示树形数据时，每层缩进的宽度，以 px 为单位 | number | 15 |  |\n| rowExpandable | 设置是否允许行展开 | (record) => boolean | - |  |\n| showExpandColumn | 设置是否展示行展开列 | boolean | true | 4.18.0 |\n| onExpand | 点击展开图标时触发 | function(record, event) | - |  |\n| onExpandedRowsChange | 展开的行变化时触发 | function(expandedRows) | - |  |\n\n### rowSelection\n\n选择功能的配置。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| checkStrictly | checkable 状态下节点选择完全受控（父子数据选中状态不再关联） | boolean | true | 4.4.0 |\n| columnTitle | 自定义列表选择框标题 | ReactNode \\| (originalNode: ReactNode) => ReactNode | - |  |\n| columnWidth | 自定义列表选择框宽度 | string \\| number | `32px` |  |\n| fixed | 把选择框列固定在左边 | boolean | - |  |\n| getCheckboxProps | 选择框的默认属性配置 | function(record) | - |  |\n| hideSelectAll | 隐藏全选勾选框与自定义选择项 | boolean | false | 4.3.0 |\n| preserveSelectedRowKeys | 当数据被删除时仍然保留选项的 `key` | boolean | - | 4.4.0 |\n| renderCell | 渲染勾选框，用法与 Column 的 `render` 相同 | function(checked, record, index, originNode) {} | - | 4.1.0 |\n| selectedRowKeys | 指定选中项的 key 数组，需要和 onChange 进行配合 | string\\[] \\| number\\[] | \\[] |  |\n| defaultSelectedRowKeys | 默认选中项的 key 数组 | string\\[] \\| number\\[] | \\[] |  |\n| selections | 自定义选择项 [配置项](#selection), 设为 `true` 时使用默认选择项 | object\\[] \\| boolean | true |  |\n| type | 多选/单选 | `checkbox` \\| `radio` | `checkbox` |  |\n| onCell | 设置单元格属性，用法与 Column 的 `onCell` 相同 | function(record, rowIndex) | - | 5.5.0 |\n| onChange | 选中项发生变化时的回调 | function(selectedRowKeys, selectedRows, info: { type }) | - | `info.type`: 4.21.0 |\n| onSelect | 用户手动选择/取消选择某行的回调 | function(record, selected, selectedRows, nativeEvent) | - |  |\n| onSelectAll | 用户手动选择/取消选择所有行的回调 | function(selected, selectedRows, changeRows) | - |  |\n| onSelectInvert | 用户手动选择反选的回调 | function(selectedRowKeys) | - |  |\n| onSelectNone | 用户清空选择的回调 | function() | - |  |\n| onSelectMultiple | 用户使用键盘 shift 选择多行的回调 | function(selected, selectedRows, changeRows) | - |  |\n\n### scroll\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| scrollToFirstRowOnChange | 当分页、排序、筛选变化后是否滚动到表格顶部 | boolean | - |\n| x | 设置横向滚动，也可用于指定滚动区域的宽，可以设置为像素值，百分比，`true` 和 ['max-content'](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content) | string \\| number \\| true | - |\n| y | 设置纵向滚动，也可用于指定滚动区域的高，可以设置为像素值 | string \\| number | - |\n\n### selection\n\n| 参数     | 说明                       | 类型                        | 默认值 |\n| -------- | -------------------------- | --------------------------- | ------ |\n| key      | React 需要的 key，建议设置 | string                      | -      |\n| text     | 选择项显示的文字           | ReactNode                   | -      |\n| onSelect | 选择项点击回调             | function(changeableRowKeys) | -      |\n\n## 在 TypeScript 中使用\n\n```tsx\nimport React from 'react';\nimport { Table } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\n\ninterface User {\n  key: number;\n  name: string;\n}\n\nconst columns: ColumnsType<User> = [\n  {\n    key: 'name',\n    title: 'Name',\n    dataIndex: 'name',\n  },\n];\n\nconst data: User[] = [\n  {\n    key: 0,\n    name: 'Jack',\n  },\n];\n\nconst Demo: React.FC = () => (\n  <>\n    <Table<User> columns={columns} dataSource={data} />\n    {/* 使用 JSX 风格的 API */}\n    <Table<User> dataSource={data}>\n      <Table.Column<User> key=\"name\" title=\"Name\" dataIndex=\"name\" />\n    </Table>\n  </>\n);\n\nexport default Demo;\n```\n\nTypeScript 里使用 Table 的 [CodeSandbox 实例](https://codesandbox.io/s/serene-platform-0jo5t)。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Table\"></ComponentTokenTable>\n\n## 注意\n\n按照 [React 的规范](https://zh-hans.reactjs.org/docs/lists-and-keys.html#keys)，所有的数组组件必须绑定 `key`。在 Table 中，`dataSource` 和 `columns` 里的数据值都需要指定 `key` 值。对于 `dataSource` 默认将每列数据的 `key` 属性作为唯一的标识。\n\n![控制台警告](https://os.alipayobjects.com/rmsportal/luLdLvhPOiRpyss.png)\n\n如果 `dataSource[i].key` 没有提供，你应该使用 `rowKey` 来指定 `dataSource` 的主键，如下所示。若没有指定，控制台会出现以上的提示，表格组件也会出现各类奇怪的错误。\n\n```jsx\n// 比如你的数据主键是 uid\nreturn <Table rowKey=\"uid\" />;\n// 或\nreturn <Table rowKey={(record) => record.uid} />;\n```\n\n## FAQ\n\n### 如何在没有数据或只有一页数据时隐藏分页栏\n\n你可以设置 `pagination` 的 `hideOnSinglePage` 属性为 `true`。\n\n### 表格过滤时会回到第一页？\n\n前端过滤时通常条目总数会减少，从而导致总页数小于筛选前的当前页数，为了防止当前页面没有数据，我们默认会返回第一页。\n\n如果你在使用远程分页，很可能需要保持当前页面，你可以参照这个 [受控例子](https://codesandbox.io/s/yuanchengjiazaishuju-ant-design-demo-7y2uf) 控制当前页面不变。\n\n### 表格分页为何会出现 size 切换器？\n\n自 `4.1.0` 起，Pagination 在 `total` 大于 50 条时会默认显示 size 切换器以提升用户交互体验。如果你不需要该功能，可以通过设置 `showSizeChanger` 为 `false` 来关闭。\n\n### 为什么 更新 state 会导致全表渲染？\n\n由于 `columns` 支持 `render` 方法，因而 Table 无法知道哪些单元会受到影响。你可以通过 `column.shouldCellUpdate` 来控制单元格的渲染。\n\n### 固定列穿透到最上层该怎么办？\n\n固定列通过 `z-index` 属性将其悬浮于非固定列之上，这使得有时候你会发现在 Table 上放置遮罩层时固定列会被透过的情况。为遮罩层设置更高的 `z-index` 覆盖住固定列即可。\n\n### 如何自定义渲染可选列的勾选框（比如增加 Tooltip）？\n\n自 `4.1.0` 起，可以通过 [rowSelection](https://ant.design/components/table-cn/#rowselection) 的 `renderCell` 属性控制，可以参考此处 [Demo](https://codesandbox.io/s/table-row-tooltip-v79j2v) 实现展示 Tooltip 需求或其他自定义的需求。\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Table\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*3yz3QqMlShYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Sv8XQ50NB40AAAAAAAAAAAAADrJ8AQ/original\n---\n\nA table displays rows of data.\n\n## When To Use\n\n- To display a collection of structured data.\n- To sort, search, paginate, filter data.\n\n## How To Use\n\nSpecify `dataSource` of Table as an array of data.\n\n```jsx\nconst dataSource = [\n  {\n    key: '1',\n    name: 'Mike',\n    age: 32,\n    address: '10 Downing Street',\n  },\n  {\n    key: '2',\n    name: 'John',\n    age: 42,\n    address: '10 Downing Street',\n  },\n];\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n];\n\n<Table dataSource={dataSource} columns={columns} />;\n```\n\n## Promotion\n\n- [Kitchen Sketch Plugin 💎](https://kitchen.alipay.com)\n- [ProTable - Advanced Tables](https://procomponents.ant.design/en-US/components/table)\n- [S2 - Analytical Tables](https://github.com/antvis/s2/)\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic Usage</code>\n<code src=\"./demo/jsx.tsx\">JSX style API</code>\n<code src=\"./demo/row-selection.tsx\">selection</code>\n<code src=\"./demo/row-selection-and-operation.tsx\">Selection and operation</code>\n<code src=\"./demo/row-selection-custom.tsx\">Custom selection</code>\n<code src=\"./demo/row-selection-debug.tsx\" debug>Selection Perf</code>\n<code src=\"./demo/head.tsx\">Filter and sorter</code>\n<code src=\"./demo/filter-in-tree.tsx\">Filter in Tree</code>\n<code src=\"./demo/filter-search.tsx\">Filter search</code>\n<code src=\"./demo/multiple-sorter.tsx\">Multiple sorter</code>\n<code src=\"./demo/reset-filter.tsx\">Reset filters and sorters</code>\n<code src=\"./demo/custom-filter-panel.tsx\">Customized filter panel</code>\n<code src=\"./demo/ajax.tsx\">Ajax</code>\n<code src=\"./demo/size.tsx\">size</code>\n<code src=\"./demo/narrow.tsx\" debug>size</code>\n<code src=\"./demo/bordered.tsx\">border, title and footer</code>\n<code src=\"./demo/expand.tsx\">Expandable Row</code>\n<code src=\"./demo/order-column.tsx\">Order Specific Column</code>\n<code src=\"./demo/colspan-rowspan.tsx\">colSpan and rowSpan</code>\n<code src=\"./demo/tree-data.tsx\">Tree data</code>\n<code src=\"./demo/tree-table-ellipsis.tsx\" debug>Tree data ellipsis debug demo</code>\n<code src=\"./demo/fixed-header.tsx\">Fixed Header</code>\n<code src=\"./demo/fixed-columns.tsx\">Fixed Columns</code>\n<code src=\"./demo/fixed-columns-header.tsx\">Fixed Columns and Header</code>\n<code src=\"./demo/hidden-columns.tsx\">Hidden Columns</code>\n<code src=\"./demo/grouping-columns.tsx\">Grouping table head</code>\n<code src=\"./demo/edit-cell.tsx\">Editable Cells</code>\n<code src=\"./demo/edit-row.tsx\">Editable Rows</code>\n<code src=\"./demo/nested-table.tsx\">Nested tables</code>\n<code src=\"./demo/drag-sorting.tsx\">Drag sorting</code>\n<code src=\"./demo/drag-sorting-handler.tsx\">Drag sorting with handler</code>\n<code src=\"./demo/resizable-column.tsx\" debug>Resizable column</code>\n<code src=\"./demo/ellipsis.tsx\">ellipsis column</code>\n<code src=\"./demo/ellipsis-custom-tooltip.tsx\">ellipsis column custom tooltip</code>\n<code src=\"./demo/summary.tsx\">Summary</code>\n<code src=\"./demo/virtual-list.tsx\" version=\">= 5.9.0\">Virtual list</code>\n<code src=\"./demo/responsive.tsx\">Responsive</code>\n<code src=\"./demo/nest-table-border-debug.tsx\" debug>Nested Bordered Table Debug</code>\n<code src=\"./demo/pagination.tsx\">Pagination Settings</code>\n<code src=\"./demo/row-selection-custom-debug.tsx\" debug>Custom selection group</code>\n<code src=\"./demo/sticky.tsx\">Fixed header and scroll bar with the page</code>\n<code src=\"./demo/dynamic-settings.tsx\">Dynamic Settings</code>\n<code src=\"./demo/selections-debug.tsx\" debug>selections with icon</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Table\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| bordered | Whether to show all table borders | boolean | false |  |\n| columns | Columns of table | [ColumnsType](#column)\\[] | - |  |\n| components | Override default table elements. Not support `components.body` when in `virtual` | [TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129) | - |  |\n| dataSource | Data record array to be displayed | object\\[] | - |  |\n| expandable | Config expandable content | [expandable](#expandable) | - |  |\n| footer | Table footer renderer | function(currentPageData) | - |  |\n| getPopupContainer | The render container of dropdowns in table | (triggerNode) => HTMLElement | () => TableHtmlElement |  |\n| loading | Loading status of table | boolean \\| [Spin Props](/components/spin/#api) | false |  |\n| locale | The i18n text including filter, sort, empty text, etc | object | [Default Value](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/en_US.tsx#L19-L37) |  |\n| pagination | Config of pagination. You can ref table pagination [config](#pagination) or full [`pagination`](/components/pagination/) document, hide it by setting it to `false` | object \\| `false` | - |  |\n| rowClassName | Row's className | function(record, index): string | - |  |\n| rowKey | Row's unique key, could be a string or function that returns a string | string \\| function(record): string | `key` |  |\n| rowSelection | Row selection [config](#rowselection) | object | - |  |\n| scroll | Whether the table can be scrollable, [config](#scroll) | object | - |  |\n| showHeader | Whether to show table header | boolean | true |  |\n| showSorterTooltip | The header show next sorter direction tooltip. It will be set as the property of Tooltip if its type is object | boolean \\| [Tooltip props](/components/tooltip/#api) | true |  |\n| size | Size of table | `large` \\| `middle` \\| `small` | `large` |  |\n| sortDirections | Supported sort way, could be `ascend`, `descend` | Array | \\[`ascend`, `descend`] |  |\n| sticky | Set sticky header and scroll bar | boolean \\| `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}` | - | 4.6.0 (getContainer: 4.7.0) |\n| summary | Summary content | (currentData) => ReactNode | - |  |\n| tableLayout | The [table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) attribute of table element | - \\| `auto` \\| `fixed` | -<hr />`fixed` when header/columns are fixed, or using `column.ellipsis` |  |\n| title | Table title renderer | function(currentPageData) | - |  |\n| onChange | Callback executed when pagination, filters or sorter is changed | function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` \\| `sort` \\| `filter` }) | - |  |\n| onHeaderRow | Set props on per header row | function(columns, index) | - |  |\n| onRow | Set props on per row | function(record, index) | - |  |\n| virtual | Support virtual list. Not support `components.body` when enabled | boolean | - | 5.9.0 |\n\n### Table ref\n\n| Property | Description | Type | Version |\n| --- | --- | --- | --- |\n| nativeElement | The wrap element | HTMLDivElement | 5.11.0 |\n| scrollTo | Trigger to scroll to target position. `key` match with record `rowKey` | (config: { index?: number, key?: React.Key, top?: number }) => void | 5.11.0 |\n\n#### onRow usage\n\nSame as `onRow` `onHeaderRow` `onCell` `onHeaderCell`\n\n```jsx\n<Table\n  onRow={(record, rowIndex) => {\n    return {\n      onClick: (event) => {}, // click row\n      onDoubleClick: (event) => {}, // double click row\n      onContextMenu: (event) => {}, // right button click row\n      onMouseEnter: (event) => {}, // mouse enter row\n      onMouseLeave: (event) => {}, // mouse leave row\n    };\n  }}\n  onHeaderRow={(columns, index) => {\n    return {\n      onClick: () => {}, // click header row\n    };\n  }}\n/>\n```\n\n### Column\n\nOne of the Table `columns` prop for describing the table's columns, Column has the same API.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | The specify which way that column is aligned | `left` \\| `right` \\| `center` | `left` |  |\n| className | The className of this column | string | - |  |\n| colSpan | Span of this column's title | number | - |  |\n| dataIndex | Display field of the data record, support nest path by string array | string \\| string\\[] | - |  |\n| defaultFilteredValue | Default filtered values | string\\[] | - |  |\n| filterResetToDefaultFilteredValue | click the reset button, whether to restore the default filter | boolean | false |  |\n| defaultSortOrder | Default order of sorted values | `ascend` \\| `descend` | - |  |\n| ellipsis | The ellipsis cell content, not working with sorter and filters for now.<br />tableLayout would be `fixed` when `ellipsis` is `true` or `{ showTitle?: boolean }` | boolean \\| {showTitle?: boolean } | false | showTitle: 4.3.0 |\n| filterDropdown | Customized filter overlay | ReactNode \\| (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode | - |  |\n| filterDropdownOpen | Whether `filterDropdown` is visible | boolean | - |  |\n| filtered | Whether the `dataSource` is filtered | boolean | false |  |\n| filteredValue | Controlled filtered value, filter icon will highlight | string\\[] | - |  |\n| filterIcon | Customized filter icon | ReactNode \\| (filtered: boolean) => ReactNode | - |  |\n| filterMultiple | Whether multiple filters can be selected | boolean | true |  |\n| filterMode | To specify the filter interface | 'menu' \\| 'tree' | 'menu' | 4.17.0 |\n| filterSearch | Whether to be searchable for filter menu | boolean \\| function(input, record):boolean | false | boolean:4.17.0 function:4.19.0 |\n| filters | Filter menu config | object\\[] | - |  |\n| fixed | (IE not support) Set column to be fixed: `true`(same as left) `'left'` `'right'` | boolean \\| string | false |  |\n| key | Unique key of this column, you can ignore this prop if you've set a unique `dataIndex` | string | - |  |\n| render | Renderer of the table cell. The return value should be a ReactNode | function(text, record, index) {} | - |  |\n| responsive | The list of breakpoints at which to display this column. Always visible if not set | [Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[] | - | 4.2.0 |\n| rowScope | Set scope attribute for all cells in this column | `row` \\| `rowgroup` | - | 5.1.0 |\n| shouldCellUpdate | Control cell render logic | (record, prevRecord) => boolean | - | 4.3.0 |\n| showSorterTooltip | If header show next sorter direction tooltip, override `showSorterTooltip` in table | boolean \\| [Tooltip props](/components/tooltip/) | true |  |\n| sortDirections | Supported sort way, override `sortDirections` in `Table`, could be `ascend`, `descend` | Array | \\[`ascend`, `descend`] |  |\n| sorter | Sort function for local sort, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction. If it is server-side sorting, set to `true`, but if you want to support multi-column sorting, you can set it to `{ multiple: number }` | function \\| boolean \\| { compare: function, multiple: number } | - |  |\n| sortOrder | Order of sorted values: `ascend` `descend` `null` | `ascend` \\| `descend` \\| null | - |  |\n| sortIcon | Customized sort icon | (props: { sortOrder }) => ReactNode | - | 5.6.0 |\n| title | Title of this column | ReactNode \\| ({ sortOrder, sortColumn, filters }) => ReactNode | - |  |\n| width | Width of this column ([width not working?](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)) | string \\| number | - |  |\n| hidden | Hidden this column | boolean | false | 5.13.0 |\n| onCell | Set props on per cell | function(record, rowIndex) | - |  |\n| onFilter | Function that determines if the row is displayed when filtered | function(value, record) => boolean | - |  |\n| onFilterDropdownOpenChange | Callback executed when `filterDropdownOpen` is changed | function(visible) {} | - |  |\n| onHeaderCell | Set props on per header cell | function(column) | - |  |\n\n### ColumnGroup\n\n| Property | Description               | Type      | Default |\n| -------- | ------------------------- | --------- | ------- |\n| title    | Title of the column group | ReactNode | -       |\n\n### pagination\n\nProperties for pagination.\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| position | Specify the position of `Pagination`, could be`topLeft` \\| `topCenter` \\| `topRight` \\|`bottomLeft` \\| `bottomCenter` \\| `bottomRight` | Array | \\[`bottomRight`] |\n\nMore about pagination, please check [`Pagination`](/components/pagination/).\n\n### expandable\n\nProperties for expandable.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| childrenColumnName | The column contains children to display | string | children |  |\n| columnTitle | Set the title of the expand column | ReactNode | - | 4.23.0 |\n| columnWidth | Set the width of the expand column | string \\| number | - |  |\n| defaultExpandAllRows | Expand all rows initially | boolean | false |  |\n| defaultExpandedRowKeys | Initial expanded row keys | string\\[] | - |  |\n| expandedRowClassName | Expanded row's className | function(record, index, indent): string | - |  |\n| expandedRowKeys | Current expanded row keys | string\\[] | - |  |\n| expandedRowRender | Expanded container render for each row | function(record, index, indent, expanded): ReactNode | - |  |\n| expandIcon | Customize row expand Icon. Ref [example](https://codesandbox.io/s/fervent-bird-nuzpr) | function(props): ReactNode | - |  |\n| expandRowByClick | Whether to expand row by clicking anywhere in the whole row | boolean | false |  |\n| fixed | Whether the expansion icon is fixed. Optional true `left` `right` | boolean \\| string | false | 4.16.0 |\n| indentSize | Indent size in pixels of tree data | number | 15 |  |\n| rowExpandable | Enable row can be expandable | (record) => boolean | - |  |\n| showExpandColumn | Show expand column | boolean | true | 4.18.0 |\n| onExpand | Callback executed when the row expand icon is clicked | function(record, event) | - |  |\n| onExpandedRowsChange | Callback executed when the expanded rows change | function(expandedRows) | - |  |\n\n### rowSelection\n\nProperties for row selection.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| checkStrictly | Check table row precisely; parent row and children rows are not associated | boolean | true | 4.4.0 |\n| columnTitle | Set the title of the selection column | ReactNode \\| (originalNode: ReactNode) => ReactNode | - |  |\n| columnWidth | Set the width of the selection column | string \\| number | `32px` |  |\n| fixed | Fixed selection column on the left | boolean | - |  |\n| getCheckboxProps | Get Checkbox or Radio props | function(record) | - |  |\n| hideSelectAll | Hide the selectAll checkbox and custom selection | boolean | false | 4.3.0 |\n| preserveSelectedRowKeys | Keep selection `key` even when it removed from `dataSource` | boolean | - | 4.4.0 |\n| renderCell | Renderer of the table cell. Same as `render` in column | function(checked, record, index, originNode) {} | - | 4.1.0 |\n| selectedRowKeys | Controlled selected row keys | string\\[] \\| number\\[] | \\[] |  |\n| selections | Custom selection [config](#selection), only displays default selections when set to `true` | object\\[] \\| boolean | - |  |\n| type | `checkbox` or `radio` | `checkbox` \\| `radio` | `checkbox` |  |\n| onCell | Set props on per cell. Same as `onCell` in column | function(record, rowIndex) | - | 5.5.0 |\n| onChange | Callback executed when selected rows change | function(selectedRowKeys, selectedRows, info: { type }) | - | `info.type`: 4.21.0 |\n| onSelect | Callback executed when select/deselect one row | function(record, selected, selectedRows, nativeEvent) | - |  |\n| onSelectAll | Callback executed when select/deselect all rows | function(selected, selectedRows, changeRows) | - |  |\n| onSelectInvert | Callback executed when row selection is inverted | function(selectedRowKeys) | - |  |\n| onSelectNone | Callback executed when row selection is cleared | function() | - |  |\n| onSelectMultiple | Callback executed when row selection is changed by pressing shift | function(selected, selectedRows, changeRows) | - |  |\n\n### scroll\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| scrollToFirstRowOnChange | Whether to scroll to the top of the table when paging, sorting, filtering changes | boolean | - |\n| x | Set horizontal scrolling, can also be used to specify the width of the scroll area, could be number, percent value, true and ['max-content'](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content) | string \\| number \\| true | - |\n| y | Set vertical scrolling, can also be used to specify the height of the scroll area, could be string or number | string \\| number | - |\n\n### selection\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| key | Unique key of this selection | string | - |\n| text | Display text of this selection | ReactNode | - |\n| onSelect | Callback executed when this selection is clicked | function(changeableRowKeys) | - |\n\n## Using in TypeScript\n\n```tsx\nimport React from 'react';\nimport { Table } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\n\ninterface User {\n  key: number;\n  name: string;\n}\n\nconst columns: ColumnsType<User> = [\n  {\n    key: 'name',\n    title: 'Name',\n    dataIndex: 'name',\n  },\n];\n\nconst data: User[] = [\n  {\n    key: 0,\n    name: 'Jack',\n  },\n];\n\nconst Demo: React.FC = () => (\n  <>\n    <Table<User> columns={columns} dataSource={data} />\n    {/* JSX style usage */}\n    <Table<User> dataSource={data}>\n      <Table.Column<User> key=\"name\" title=\"Name\" dataIndex=\"name\" />\n    </Table>\n  </>\n);\n\nexport default Demo;\n```\n\nHere is the [CodeSandbox for TypeScript](https://codesandbox.io/s/serene-platform-0jo5t).\n\n## Design Token\n\n<ComponentTokenTable component=\"Table\"></ComponentTokenTable>\n\n## Note\n\nAccording to the [React documentation](https://facebook.github.io/react/docs/lists-and-keys.html#keys), every child in an array should be assigned a unique key. The values inside the Table's `dataSource` and `columns` should follow this rule. By default, `dataSource[i].key` will be treated as the key value for `dataSource`.\n\n![console warning](https://os.alipayobjects.com/rmsportal/luLdLvhPOiRpyss.png)\n\nIf `dataSource[i].key` is not provided, then you should specify the primary key of dataSource value via `rowKey`, as shown below. If not, warnings like the one above will show in browser console.\n\n```jsx\n// primary key is uid\nreturn <Table rowKey=\"uid\" />;\n// or\nreturn <Table rowKey={(record) => record.uid} />;\n```\n\n## FAQ\n\n### How to hide pagination when single page or no data?\n\nYou can set `hideOnSinglePage` with `pagination` prop.\n\n### Table will return to first page when filter data.\n\nTable total page count usually reduce after filter data, we by default return to first page in case of current page is out of filtered results.\n\nYou may need to keep current page after filtering when fetch data from remote service, please check [this demo](https://codesandbox.io/s/yuanchengjiazaishuju-ant-design-demo-7y2uf) as workaround.\n\nAlso you can use the action from extra param to determine when return to first page.\n\n### Why Table pagination show size changer?\n\nIn order to improve user experience, Pagination show size changer by default when `total > 50` since `4.1.0`. You can set `showSizeChanger=false` to disable this feature.\n\n### Why Table fully render when state change?\n\nTable can not tell what state used in `columns.render`, so it always need fully render to avoid sync issue. You can use `column.shouldCellUpdate` to control render.\n\n### How to handle fixed column display over the mask layout?\n\nFixed column use `z-index` to make it over other columns. You will find sometime fixed columns also over your mask layout. You can set `z-index` on your mask layout to resolve.\n\n### How to custom render Table Checkbox（For example, adding Tooltip）?\n\nSince `4.1.0`, You can use [`rowSelection.renderCell`](https://ant.design/components/table/#rowselection) to custom render Table Checkbox. If you want to add Tooltip, please refer to this [demo](https://codesandbox.io/s/table-row-tooltip-v79j2v).\n"},"tabs":{"zh-CN":"---\ncategory: Components\nsubtitle: 标签页\ngroup: 数据展示\ntitle: Tabs\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*72NDQqXkyOEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8HMoTZUoSGoAAAAAAAAAAAAADrJ8AQ/original\n---\n\n选项卡切换组件。\n\n## 何时使用\n\n提供平级的区域将大块内容进行收纳和展现，保持界面整洁。\n\nAnt Design 依次提供了三级选项卡，分别用于不同的场景。\n\n- 卡片式的页签，提供可关闭的样式，常用于容器顶部。\n- 既可用于容器顶部，也可用于容器内部，是最通用的 Tabs。\n- [Radio.Button](/components/radio-cn/#components-radio-demo-radiobutton) 可作为更次级的页签来使用。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/disabled.tsx\">禁用</code>\n<code src=\"./demo/centered.tsx\">居中</code>\n<code src=\"./demo/icon.tsx\">图标</code>\n<code src=\"./demo/custom-indicator.tsx\">指示条</code>\n<code src=\"./demo/slide.tsx\">滑动</code>\n<code src=\"./demo/extra.tsx\">附加内容</code>\n<code src=\"./demo/size.tsx\">大小</code>\n<code src=\"./demo/position.tsx\">位置</code>\n<code src=\"./demo/card.tsx\">卡片式页签</code>\n<code src=\"./demo/editable-card.tsx\">新增和关闭页签</code>\n<code src=\"./demo/card-top.tsx\" compact background=\"grey\" debug>卡片式页签容器</code>\n<code src=\"./demo/custom-add-trigger.tsx\">自定义新增页签触发器</code>\n<code src=\"./demo/custom-tab-bar.tsx\">自定义页签头</code>\n<code src=\"./demo/custom-tab-bar-node.tsx\">可拖拽标签</code>\n<code src=\"./demo/animated.tsx\" debug>动画</code>\n<code src=\"./demo/nest.tsx\" debug>嵌套</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Tabs\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| activeKey | 当前激活 tab 面板的 key | string | - |  |\n| addIcon | 自定义添加按钮 | ReactNode | - | 4.4.0 |\n| animated | 是否使用动画切换 Tabs | boolean\\| { inkBar: boolean, tabPane: boolean } | { inkBar: true, tabPane: false } |  |\n| centered | 标签居中展示 | boolean | false | 4.4.0 |\n| defaultActiveKey | 初始化选中面板的 key，如果没有设置 activeKey | string | `第一个面板` |  |\n| hideAdd | 是否隐藏加号图标，在 `type=\"editable-card\"` 时有效 | boolean | false |  |\n| indicator | 自定义指示条的长度和对齐方式 | { size?: number \\| (origin: number) => number; align: `start` \\| `center` \\| `end`; } | - | 5.13.0 |\n| items | 配置选项卡内容 | [TabItemType](#tabitemtype) | [] | 4.23.0 |\n| moreIcon | 自定义折叠 icon | ReactNode | &lt;EllipsisOutlined /> | 4.14.0 |\n| popupClassName | 更多菜单的 `className` | string | - | 4.21.0 |\n| renderTabBar | 替换 TabBar，用于二次封装标签头 | (props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement | - |  |\n| size | 大小，提供 `large` `middle` 和 `small` 三种大小 | string | `middle` |  |\n| tabBarExtraContent | tab bar 上额外的元素 | ReactNode \\| {left?: ReactNode, right?: ReactNode} | - | object: 4.6.0 |\n| tabBarGutter | tabs 之间的间隙 | number | - |  |\n| tabBarStyle | tab bar 的样式对象 | CSSProperties | - |  |\n| tabPosition | 页签位置，可选值有 `top` `right` `bottom` `left` | string | `top` |  |\n| destroyInactiveTabPane | 被隐藏时是否销毁 DOM 结构 | boolean | false |  |\n| type | 页签的基本样式，可选 `line`、`card` `editable-card` 类型 | string | `line` |  |\n| onChange | 切换面板的回调 | function(activeKey) {} | - |  |\n| onEdit | 新增和删除页签的回调，在 `type=\"editable-card\"` 时有效 | (action === 'add' ? event : targetKey, action): void | - |  |\n| onTabClick | tab 被点击的回调 | function(key: string, event: MouseEvent) | - |  |\n| onTabScroll | tab 滚动时触发 | function({ direction: `left` \\| `right` \\| `top` \\| `bottom` }) | - | 4.3.0 |\n\n> 更多属性查看 [rc-tabs tabs](https://github.com/react-component/tabs#tabs)\n\n### TabItemType\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| closeIcon | 自定义关闭图标，在 `type=\"editable-card\"` 时有效。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | boolean \\| ReactNode | - |  |\n| destroyInactiveTabPane | 被隐藏时是否销毁 DOM 结构 | boolean | false | 5.11.0 |\n| disabled | 禁用某一项 | boolean | false |  |\n| forceRender | 被隐藏时是否渲染 DOM 结构 | boolean | false |  |\n| key | 对应 activeKey | string | - |  |\n| label | 选项卡头显示文字 | ReactNode | - |  |\n| icon | 选项卡头显示图标 | ReactNode | - | 5.12.0 |\n| children | 选项卡头显示内容 | ReactNode | - |  |\n| closable | 是否显示选项卡的关闭按钮，在 `type=\"editable-card\"` 时有效 | boolean | true |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Tabs\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Tabs\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*72NDQqXkyOEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8HMoTZUoSGoAAAAAAAAAAAAADrJ8AQ/original\n---\n\nTabs make it easy to switch between different views.\n\n### When To Use\n\nAnt Design has 3 types of Tabs for different situations.\n\n- Card Tabs: for managing too many closeable views.\n- Normal Tabs: for functional aspects of a page.\n- [Radio.Button](/components/radio/#components-radio-demo-radiobutton): for secondary tabs.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/centered.tsx\">Centered</code>\n<code src=\"./demo/icon.tsx\">Icon</code>\n<code src=\"./demo/custom-indicator.tsx\">Indicator</code>\n<code src=\"./demo/slide.tsx\">Slide</code>\n<code src=\"./demo/extra.tsx\">Extra content</code>\n<code src=\"./demo/size.tsx\">Size</code>\n<code src=\"./demo/position.tsx\">Position</code>\n<code src=\"./demo/card.tsx\">Card type tab</code>\n<code src=\"./demo/editable-card.tsx\">Add & close tab</code>\n<code src=\"./demo/card-top.tsx\" compact background=\"grey\" debug>Container of card type Tab</code>\n<code src=\"./demo/custom-add-trigger.tsx\">Customized trigger of new tab</code>\n<code src=\"./demo/custom-tab-bar.tsx\">Customized bar of tab</code>\n<code src=\"./demo/custom-tab-bar-node.tsx\">Draggable Tabs</code>\n<code src=\"./demo/animated.tsx\" debug>Animated</code>\n<code src=\"./demo/nest.tsx\" debug>Nest</code>\n<code src=\"./demo/component-token.tsx\" debug>component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Tabs\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| activeKey | Current TabPane's key | string | - |  |\n| addIcon | Customize add icon | ReactNode | - | 4.4.0 |\n| animated | Whether to change tabs with animation. | boolean \\| { inkBar: boolean, tabPane: boolean } | { inkBar: true, tabPane: false } |  |\n| centered | Centers tabs | boolean | false | 4.4.0 |\n| defaultActiveKey | Initial active TabPane's key, if `activeKey` is not set | string | - |  |\n| hideAdd | Hide plus icon or not. Only works while `type=\"editable-card\"` | boolean | false |  |\n| indicator | Customize `size` and `align` of indicator | { size?: number \\| (origin: number) => number; align: `start` \\| `center` \\| `end`; } | - | 5.13.0 |\n| items | Configure tab content | [TabItemType](#tabitemtype) | [] | 4.23.0 |\n| moreIcon | The custom icon of ellipsis | ReactNode | &lt;EllipsisOutlined /> | 4.14.0 |\n| popupClassName | `className` for more dropdown. | string | - | 4.21.0 |\n| renderTabBar | Replace the TabBar | (props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement | - |  |\n| size | Preset tab bar size | `large` \\| `middle` \\| `small` | `middle` |  |\n| tabBarExtraContent | Extra content in tab bar | ReactNode \\| {left?: ReactNode, right?: ReactNode} | - | object: 4.6.0 |\n| tabBarGutter | The gap between tabs | number | - |  |\n| tabBarStyle | Tab bar style object | CSSProperties | - |  |\n| tabPosition | Position of tabs | `top` \\| `right` \\| `bottom` \\| `left` | `top` |  |\n| destroyInactiveTabPane | Whether destroy inactive TabPane when change tab | boolean | false |  |\n| type | Basic style of tabs | `line` \\| `card` \\| `editable-card` | `line` |  |\n| onChange | Callback executed when active tab is changed | function(activeKey) {} | - |  |\n| onEdit | Callback executed when tab is added or removed. Only works while `type=\"editable-card\"` | (action === 'add' ? event : targetKey, action): void | - |  |\n| onTabClick | Callback executed when tab is clicked | function(key: string, event: MouseEvent) | - |  |\n| onTabScroll | Trigger when tab scroll | function({ direction: `left` \\| `right` \\| `top` \\| `bottom` }) | - | 4.3.0 |\n\nMore option at [rc-tabs tabs](https://github.com/react-component/tabs#tabs)\n\n### TabItemType\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| closeIcon | Customize close icon in TabPane's head. Only works while `type=\"editable-card\"`. 5.7.0: close button will be hidden when setting to `null` or `false` | boolean \\| ReactNode | - |  |\n| destroyInactiveTabPane | Whether destroy inactive TabPane when change tab | boolean | false | 5.11.0 |\n| disabled | Set TabPane disabled | boolean | false |  |\n| forceRender | Forced render of content in tabs, not lazy render after clicking on tabs | boolean | false |  |\n| key | TabPane's key | string | - |  |\n| label | TabPane's head display text | ReactNode | - |  |\n| icon | TabPane's head display icon | ReactNode | - | 5.12.0 |\n| children | TabPane's head display content | ReactNode | - |  |\n| closable | Whether a close (x) button is visible, Only works while `type=\"editable-card\"` | boolean | true |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Tabs\"></ComponentTokenTable>\n"},"tag":{"zh-CN":"---\ncategory: Components\nsubtitle: 标签\ngroup: 数据展示\ntitle: Tag\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*_SBsSrKLg00AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JPNAQYrVkYkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n进行标记和分类的小标签。\n\n## 何时使用\n\n- 用于标记事物的属性和维度。\n- 进行分类。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/colorful.tsx\">多彩标签</code>\n<code src=\"./demo/colorful-inverse.tsx\" debug>反色多彩标签</code>\n<code src=\"./demo/control.tsx\">动态添加和删除</code>\n<code src=\"./demo/checkable.tsx\">可选择标签</code>\n<code src=\"./demo/animation.tsx\">添加动画</code>\n<code src=\"./demo/icon.tsx\">图标按钮</code>\n<code src=\"./demo/status.tsx\">预设状态的标签</code>\n<code src=\"./demo/borderless.tsx\">无边框</code>\n<code src=\"./demo/borderlessLayout.tsx\" debug>深色背景中无边框</code>\n<code src=\"./demo/customize.tsx\" debug>自定义关闭按钮</code>\n<code src=\"./demo/draggable.tsx\">可拖拽标签</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Tag\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| closeIcon | 自定义关闭按钮。5.7.0：设置为 `null` 或 `false` 时隐藏关闭按钮 | boolean \\| ReactNode | false | 4.4.0 |\n| color | 标签色 | string | - |  |\n| icon | 设置图标 | ReactNode | - |  |\n| bordered | 是否有边框 | boolean | true | 5.4.0 |\n| onClose | 关闭时的回调（可通过 `e.preventDefault()` 来阻止默认行为） | (e) => void | - |  |\n\n### Tag.CheckableTag\n\n| 参数     | 说明                 | 类型              | 默认值 |\n| -------- | -------------------- | ----------------- | ------ |\n| checked  | 设置标签的选中状态   | boolean           | false  |\n| onChange | 点击标签时触发的回调 | (checked) => void | -      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Tag\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Tag\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*_SBsSrKLg00AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*JPNAQYrVkYkAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nTag for categorizing or markup.\n\n## When To Use\n\n- It can be used to tag by dimension or property.\n\n- When categorizing.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/colorful.tsx\">Colorful Tag</code>\n<code src=\"./demo/colorful-inverse.tsx\" debug>Inverse Colorful Tag</code>\n<code src=\"./demo/control.tsx\">Add & Remove Dynamically</code>\n<code src=\"./demo/checkable.tsx\">Checkable</code>\n<code src=\"./demo/animation.tsx\">Animate</code>\n<code src=\"./demo/icon.tsx\">Icon</code>\n<code src=\"./demo/status.tsx\">Status Tag</code>\n<code src=\"./demo/borderless.tsx\">borderless</code>\n<code src=\"./demo/borderlessLayout.tsx\" debug>borderless in layout</code>\n<code src=\"./demo/customize.tsx\" debug>Customize close</code>\n<code src=\"./demo/draggable.tsx\">Draggable Tag</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Tag\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| closeIcon | Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false` | ReactNode | false | 4.4.0 |\n| color | Color of the Tag | string | - |  |\n| icon | Set the icon of tag | ReactNode | - |  |\n| bordered | Whether has border style | boolean | true | 5.4.0 |\n| onClose | Callback executed when tag is closed | (e) => void | - |  |\n\n### Tag.CheckableTag\n\n| Property | Description                                     | Type              | Default |\n| -------- | ----------------------------------------------- | ----------------- | ------- |\n| checked  | Checked status of Tag                           | boolean           | false   |\n| onChange | Callback executed when Tag is checked/unchecked | (checked) => void | -       |\n\n## Design Token\n\n<ComponentTokenTable component=\"Tag\"></ComponentTokenTable>\n"},"time-picker":{"zh-CN":"---\ncategory: Components\nsubtitle: 时间选择框\ngroup: 数据录入\ntitle: TimePicker\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*kGmGSLk_1fwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*1hDmQJIDFJQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n输入或选择时间的控件。\n\n## 何时使用\n\n当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/value.tsx\">受控组件</code>\n<code src=\"./demo/size.tsx\">三种大小</code>\n<code src=\"./demo/disabled.tsx\">禁用</code>\n<code src=\"./demo/hide-column.tsx\">选择时分</code>\n<code src=\"./demo/interval-options.tsx\">步长选项</code>\n<code src=\"./demo/addon.tsx\">附加内容</code>\n<code src=\"./demo/12hours.tsx\">12 小时制</code>\n<code src=\"./demo/colored-popup.tsx\" debug>色付きポップアップ</code>\n<code src=\"./demo/range-picker.tsx\">范围选择器</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">多种形态</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/suffix.tsx\" debug>后缀图标</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\n---\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n```jsx\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\ndayjs.extend(customParseFormat)\n<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;\n```\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: 支持对象类型 |\n| autoFocus | 自动获取焦点 | boolean | false |  |\n| cellRender | 自定义单元格的内容 | (current: number, info: { originNode: React.ReactNode, today: dayjs, range?: 'start' \\| 'end', subType: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| changeOnBlur | 失去焦点时触发 `change` 事件，例如 datetime 下不再需要点击确认按钮 | boolean | false | 5.5.0 |\n| className | 选择器类名 | string | - |  |\n| defaultValue | 默认时间 | [dayjs](http://day.js.org/) | - |  |\n| disabled | 禁用全部操作 | boolean | false |  |\n| disabledTime | 不可选择的时间 | [DisabledTime](#disabledtime) | - | 4.19.0 |\n| format | 展示的时间格式 | string | `HH:mm:ss` |  |\n| getPopupContainer | 定义浮层的容器，默认为 body 上新建 div | function(trigger) | - |  |\n| hideDisabledOptions | 隐藏禁止选择的选项 | boolean | false |  |\n| hourStep | 小时选项间隔 | number | 1 |  |\n| inputReadOnly | 设置输入框为只读（避免在移动设备上打开虚拟键盘） | boolean | false |  |\n| minuteStep | 分钟选项间隔 | number | 1 |  |\n| open | 面板是否打开 | boolean | false |  |\n| placeholder | 没有值的时候显示的内容 | string \\| \\[string, string] | `请选择时间` |  |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| popupClassName | 弹出层类名 | string | - |  |\n| popupStyle | 弹出层样式对象 | object | - |  |\n| renderExtraFooter | 选择框底部显示自定义的内容 | () => ReactNode | - |  |\n| secondStep | 秒选项间隔 | number | 1 |  |\n| showNow | 面板是否显示“此刻”按钮 | boolean | - | 4.4.0 |\n| size | 输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px | `large` \\| `middle` \\| `small` | - |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | - |  |\n| use12Hours | 使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a` | boolean | false |  |\n| value | 当前时间 | [dayjs](http://day.js.org/) | - |  |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onChange | 时间发生变化的回调 | function(time: dayjs, timeString: string): void | - |  |\n| onOpenChange | 面板打开/关闭时的回调 | (open: boolean) => void | - |  |\n\n#### DisabledTime\n\n```typescript\ntype DisabledTime = (now: Dayjs) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n};\n```\n\n## 方法\n\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n\n## RangePicker\n\n属性与 DatePicker 的 [RangePicker](/components/date-picker-cn#rangepicker) 相同。还包含以下属性：\n\n| 参数         | 说明                 | 类型                                    | 默认值 | 版本   |\n| ------------ | -------------------- | --------------------------------------- | ------ | ------ |\n| disabledTime | 不可选择的时间       | [RangeDisabledTime](#rangedisabledtime) | -      | 4.19.0 |\n| order        | 始末时间是否自动排序 | boolean                                 | true   | 4.1.0  |\n\n### RangeDisabledTime\n\n```typescript\ntype RangeDisabledTime = (\n  now: Dayjs,\n  type = 'start' | 'end',\n) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n};\n```\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"DatePicker\"></ComponentTokenTable>\n\n## FAQ\n\n- [如何在 TimePicker 中使用自定义日期库（如 Moment.js ）](/docs/react/use-custom-date-library#timepicker)\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: TimePicker\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*kGmGSLk_1fwAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*1hDmQJIDFJQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nTo select/input a time.\n\n## When To Use\n\nBy clicking the input box, you can select a time from a popup panel.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/value.tsx\">Under Control</code>\n<code src=\"./demo/size.tsx\">Three Sizes</code>\n<code src=\"./demo/disabled.tsx\">disabled</code>\n<code src=\"./demo/hide-column.tsx\">Hour and minute</code>\n<code src=\"./demo/interval-options.tsx\">interval option</code>\n<code src=\"./demo/addon.tsx\">Addon</code>\n<code src=\"./demo/12hours.tsx\">12 hours</code>\n<code src=\"./demo/colored-popup.tsx\" debug>Colored Popup</code>\n<code src=\"./demo/range-picker.tsx\">Time Range Picker</code>\n<code src=\"./demo/variant.tsx\" version=\"5.13.0\">Variants</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/suffix.tsx\" debug>Suffix</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\n---\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n```jsx\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\ndayjs.extend(customParseFormat)\n\n<TimePicker defaultValue={dayjs('13:30:56', 'HH:mm:ss')} />;\n```\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear icon | boolean \\| { clearIcon?: ReactNode } | true | 5.8.0: Support object type |\n| autoFocus | If get focus when component mounted | boolean | false |  |\n| cellRender | Custom rendering function for picker cells | (current: number, info: { originNode: React.ReactElement, today: dayjs, range?: 'start' \\| 'end', subType: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode | - | 5.4.0 |\n| changeOnBlur | Trigger `change` when blur. e.g. datetime picker no need click confirm button | boolean | false | 5.5.0 |\n| className | The className of picker | string | - |  |\n| defaultValue | To set default time | [dayjs](http://day.js.org/) | - |  |\n| disabled | Determine whether the TimePicker is disabled | boolean | false |  |\n| disabledTime | To specify the time that cannot be selected | [DisabledTime](#disabledtime) | - | 4.19.0 |\n| format | To set the time format | string | `HH:mm:ss` |  |\n| getPopupContainer | To set the container of the floating layer, while the default is to create a div element in body | function(trigger) | - |  |\n| hideDisabledOptions | Whether hide the options that can not be selected | boolean | false |  |\n| hourStep | Interval between hours in picker | number | 1 |  |\n| inputReadOnly | Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices) | boolean | false |  |\n| minuteStep | Interval between minutes in picker | number | 1 |  |\n| open | Whether to popup panel | boolean | false |  |\n| placeholder | Display when there's no value | string \\| \\[string, string] | `Select a time` |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| popupClassName | The className of panel | string | - |  |\n| popupStyle | The style of panel | CSSProperties | - |  |\n| renderExtraFooter | Called from time picker panel to render some addon to its bottom | () => ReactNode | - |  |\n| secondStep | Interval between seconds in picker | number | 1 |  |\n| showNow | Whether to show `Now` button on panel | boolean | - | 4.4.0 |\n| size | To determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' \\| 'success' \\| 'validating' | - | 4.19.0 |\n| suffixIcon | The custom suffix icon | ReactNode | - |  |\n| use12Hours | Display as 12 hours format, with default format `h:mm:ss a` | boolean | false |  |\n| value | To set time | [dayjs](http://day.js.org/) | - |  |\n| variant | Variants of picker | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| onChange | A callback function, can be executed when the selected time is changing | function(time: dayjs, timeString: string): void | - |  |\n| onOpenChange | A callback function which will be called while panel opening/closing | (open: boolean) => void | - |  |\n| onSelect | A callback function, executes when a value is selected | function(time: dayjs): void | - |  |\n\n#### DisabledTime\n\n```typescript\ntype DisabledTime = (now: Dayjs) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n};\n```\n\n## Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n### RangePicker\n\nSame props from [RangePicker](/components/date-picker/#rangepicker) of DatePicker. And includes additional props:\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| disabledTime | To specify the time that cannot be selected | [RangeDisabledTime](#rangedisabledtime) | - | 4.19.0 |\n| order | Order start and end time | boolean | true | 4.1.0 |\n\n### RangeDisabledTime\n\n```typescript\ntype RangeDisabledTime = (\n  now: Dayjs,\n  type = 'start' | 'end',\n) => {\n  disabledHours?: () => number[];\n  disabledMinutes?: (selectedHour: number) => number[];\n  disabledSeconds?: (selectedHour: number, selectedMinute: number) => number[];\n};\n```\n\n## Design Token\n\n<ComponentTokenTable component=\"DatePicker\"></ComponentTokenTable>\n\n## FAQ\n\n- [How to use TimePicker with customize date library like dayjs](/docs/react/use-custom-date-library#timepicker)\n"},"timeline":{"zh-CN":"---\ncategory: Components\nsubtitle: 时间轴\ngroup: 数据展示\ntitle: Timeline\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*FkTySqNt3sYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*yIl9S4hAIBcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n垂直展示的时间流信息。\n\n## 何时使用\n\n- 当有一系列信息需按时间排列时，可正序和倒序。\n- 需要有一条时间轴进行视觉上的串联时。\n\n<!-- prettier-ignore -->\n:::info\n5.2.0版本之后，我们提供了更简单的用法 `<Timeline items={[...]} />` 以获得更好的性能，使您能在应用中编写更简单的代码。\n与此同时，我们弃用了旧的用法，并且将在下一个 major 版本中删除它。\n:::\n\n```jsx\n// >=5.2.0 可用，推荐的写法 ✅\nconst items = [{ children: 'sample', label: 'sample' }];\nreturn <Timeline items={items} />;\n\n// <5.2.0 可用，>=5.2.0 时不推荐 🙅🏻‍♀️\nreturn (\n  <Timeline onChange={onChange}>\n    <Timeline.Item>Sample</Timeline.Item>\n  </Timeline>\n);\n```\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/color.tsx\">圆圈颜色</code>\n<code src=\"./demo/pending.tsx\">最后一个及排序</code>\n<code src=\"./demo/alternate.tsx\">交替展现</code>\n<code src=\"./demo/custom.tsx\">自定义时间轴点</code>\n<code src=\"./demo/right.tsx\">右侧时间轴点</code>\n<code src=\"./demo/label.tsx\">标签</code>\n<code src=\"./demo/wireframe.tsx\" debug>线框风格</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Timeline\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| mode | 通过设置 `mode` 可以改变时间轴和内容的相对位置 | `left` \\| `alternate` \\| `right` | - |\n| pending | 指定最后一个幽灵节点是否存在或内容 | boolean \\| ReactNode | false |\n| pendingDot | 当最后一个幽灵节点存在時，指定其时间图点 | ReactNode | &lt;LoadingOutlined /&gt; |\n| reverse | 节点排序 | boolean | false |\n| items | 选项配置 | [Items](#Items)[] | 5.2.0 |\n\n### Items\n\n时间轴的每一个节点。\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| color | 指定圆圈颜色 `blue`、`red`、`green`、`gray`，或自定义的色值 | string | `blue` |\n| dot | 自定义时间轴点 | ReactNode | - |\n| label | 设置标签 | ReactNode | - |\n| children | 设置内容 | ReactNode | - |\n| position | 自定义节点位置 | `left` \\| `right` | - |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Timeline\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Timeline\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*FkTySqNt3sYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*yIl9S4hAIBcAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nVertical display timeline.\n\n## When To Use\n\n- When a series of information needs to be ordered by time (ascending or descending).\n- When you need a timeline to make a visual connection.\n\n<!-- prettier-ignore -->\n:::info\nAfter version 5.2.0, we provide a simpler usage `<Timeline items={[...]} />` with better performance and potential of writing simpler code style in your applications.\nMeanwhile, we deprecated the old usage in browser console, we will remove it in antd 6.0.\n:::\n\n```jsx\n// works when >=5.2.0, recommended ✅\nconst items = [{ children: 'sample', label: 'sample' }];\nreturn <Timeline items={items} />;\n\n// works when <5.2.0, deprecated when >=5.2.0 🙅🏻‍♀️\nreturn (\n  <Timeline onChange={onChange}>\n    <Timeline.Item>Sample</Timeline.Item>\n  </Timeline>\n);\n```\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/color.tsx\">Color</code>\n<code src=\"./demo/pending.tsx\">Last node and Reversing</code>\n<code src=\"./demo/alternate.tsx\">Alternate</code>\n<code src=\"./demo/custom.tsx\">Custom</code>\n<code src=\"./demo/right.tsx\">Right alternate</code>\n<code src=\"./demo/label.tsx\">Label</code>\n<code src=\"./demo/wireframe.tsx\" debug>Wireframe</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Timeline\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| mode | By sending `alternate` the timeline will distribute the nodes to the left and right | `left` \\| `alternate` \\| `right` | - |\n| pending | Set the last ghost node's existence or its content | boolean \\| ReactNode | false |\n| pendingDot | Set the dot of the last ghost node when pending is true | ReactNode | &lt;LoadingOutlined /&gt; |\n| reverse | Whether reverse nodes or not | boolean | false |\n| items | Each node of timeline | [Items](#Items)[] | 5.2.0 |\n\n### Items\n\nNode of timeline.\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| color | Set the circle's color to `blue`, `red`, `green`, `gray` or other custom colors | string | `blue` |\n| dot | Customize timeline dot | ReactNode | - |\n| label | Set the label | ReactNode | - |\n| children | Set the content | ReactNode | - |\n| position | Customize node position | `left` \\| `right` | - |\n\n## Design Token\n\n<ComponentTokenTable component=\"Timeline\"></ComponentTokenTable>\n"},"tooltip":{"zh-CN":"---\ncategory: Components\nsubtitle: 文字提示\ngroup: 数据展示\ntitle: Tooltip\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*3u9eSZO_4c0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*gwrhTozoTC4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n简单的文字提示气泡框。\n\n## 何时使用\n\n鼠标移入则显示提示，移出消失，气泡浮层不承载复杂文本和操作。\n\n可用来代替系统默认的 `title` 提示，提供一个 `按钮/文字/操作` 的文案解释。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/placement.tsx\">位置</code>\n<code src=\"./demo/arrow.tsx\">箭头展示</code>\n<code src=\"./demo/shift.tsx\" iframe=\"200\">贴边偏移</code>\n<code src=\"./demo/auto-adjust-overflow.tsx\" debug>自动调整位置</code>\n<code src=\"./demo/destroy-tooltip-on-hide.tsx\" debug>隐藏后销毁</code>\n<code src=\"./demo/colorful.tsx\">多彩文字提示</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/debug.tsx\" debug>Debug</code>\n<code src=\"./demo/disabled.tsx\">禁用</code>\n<code src=\"./demo/disabled-children.tsx\" debug>禁用子元素</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数  | 说明     | 类型                         | 默认值 |\n| ----- | -------- | ---------------------------- | ------ |\n| title | 提示文字 | ReactNode \\| () => ReactNode | -      |\n\n### 共同的 API\n\n以下 API 为 Tooltip、Popconfirm、Popover 共享的 API。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| align | 该值将合并到 placement 的配置中，设置参考 [rc-tooltip](https://github.com/react-component/tooltip) | object | - |  |\n| arrow | 修改箭头的显示状态以及修改箭头是否指向目标元素中心 | boolean \\| { pointAtCenter: boolean } | true | 5.2.0 |\n| autoAdjustOverflow | 气泡被遮挡时自动调整位置 | boolean | true |  |\n| color | 背景颜色 | string | - | 4.3.0 |\n| defaultOpen | 默认是否显隐 | boolean | false | 4.23.0 |\n| destroyTooltipOnHide | 关闭后是否销毁 Tooltip | boolean | false |  |\n| fresh | 默认情况下，Tooltip 在关闭时会缓存内容。设置该属性后会始终保持更新 | boolean | false | 5.10.0 |\n| getPopupContainer | 浮层渲染父节点，默认渲染到 body 上 | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |\n| mouseEnterDelay | 鼠标移入后延时多少才显示 Tooltip，单位：秒 | number | 0.1 |  |\n| mouseLeaveDelay | 鼠标移出后延时多少才隐藏 Tooltip，单位：秒 | number | 0.1 |  |\n| overlayClassName | 卡片类名 | string | - |  |\n| overlayStyle | 卡片样式 | object | - |  |\n| overlayInnerStyle | 卡片内容区域的样式对象 | object | - |  |\n| placement | 气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` |  |\n| trigger | 触发行为，可选 `hover` \\| `focus` \\| `click` \\| `contextMenu`，可使用数组设置多个触发行为 | string \\| string\\[] | `hover` |  |\n| open | 用于手动控制浮层显隐，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)） | boolean | false | 4.23.0 |\n| zIndex | 设置 Tooltip 的 `z-index` | number | - |  |\n| onOpenChange | 显示隐藏的回调 | (open: boolean) => void | - | 4.23.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Tooltip\"></ComponentTokenTable>\n\n## FAQ\n\n### 为何有时候 HOC 组件无法生效？\n\n请确保 `Tooltip` 的子元素能接受 `onMouseEnter`、`onMouseLeave`、`onPointerEnter`、`onPointerLeave`、`onFocus`、`onClick` 事件。\n\n### placement 的行为逻辑是什么？\n\n当屏幕空间足够时，会按照 `placement` 的设置进行弹层。当空间不足时则会取反向位置进行弹层（例如 `top` 不够时，会改为 `bottom`，`topLeft` 不够时会改为 `bottomLeft`）。单一方向如 `top` `bottom` `left` `right` 当贴边时进行自动位移：\n\n<img alt=\"shift\" height=\"200\" src=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sxaTTJjLtIMAAAAAAAAAAAAADrJ8AQ/original\" />\n\n当设置为边缘对齐方向如 `topLeft` `bottomRight` 等，则会仅做翻转而不做位移。\n\n### 为何 Tooltip 的内容在关闭时不会更新？\n\nTooltip 默认在关闭时会缓存内容，以防止内容更新时出现闪烁：\n\n```jsx\n// `title` 不会因为 `user` 置空而闪烁置空\n<Tooltip open={user} title={user?.name} />\n```\n\n<div>\n<img alt=\"no blink\" height=\"50\" src=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*KVx7QLOYwVsAAAAAAAAAAAAADrJ8AQ/original\" />\n</div>\n\n如果需要在关闭时也更新内容，可以设置 `fresh` 属性（例如 [#44830](https://github.com/ant-design/ant-design/issues/44830) 中的场景）：\n\n```jsx\n<Tooltip open={user} title={user?.name} fresh />\n```\n\n<div>\n<img alt=\"no blink\" height=\"50\" src=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*rUbsR4xWpMsAAAAAAAAAAAAADrJ8AQ/original\" />\n</div>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Tooltip\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*3u9eSZO_4c0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*gwrhTozoTC4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA simple text popup tip.\n\n## When To Use\n\n- The tip is shown on mouse enter, and is hidden on mouse leave. The Tooltip doesn't support complex text or operations.\n- To provide an explanation of a `button/text/operation`. It's often used instead of the html `title` attribute.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/arrow.tsx\">Arrow</code>\n<code src=\"./demo/shift.tsx\" iframe=\"200\">Auto Shift</code>\n<code src=\"./demo/auto-adjust-overflow.tsx\" debug>Adjust placement automatically</code>\n<code src=\"./demo/destroy-tooltip-on-hide.tsx\" debug>Destroy tooltip when hidden</code>\n<code src=\"./demo/colorful.tsx\">Colorful Tooltip</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/debug.tsx\" debug>Debug</code>\n<code src=\"./demo/disabled.tsx\">Disabled</code>\n<code src=\"./demo/disabled-children.tsx\" debug>Disabled children</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description                   | Type                         | Default |\n| -------- | ----------------------------- | ---------------------------- | ------- |\n| title    | The text shown in the tooltip | ReactNode \\| () => ReactNode | -       |\n\n### Common API\n\nThe following APIs are shared by Tooltip, Popconfirm, Popover.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| align | This value will be merged into placement's config, please refer to the settings [rc-tooltip](https://github.com/react-component/tooltip) | object | - |  |\n| arrow | Change arrow's visible state and change whether the arrow is pointed at the center of target. | boolean \\| { pointAtCenter: boolean } | true | 5.2.0 |\n| autoAdjustOverflow | Whether to adjust popup placement automatically when popup is off screen | boolean | true |  |\n| color | The background color | string | - | 4.3.0 |\n| defaultOpen | Whether the floating tooltip card is open by default | boolean | false | 4.23.0 |\n| destroyTooltipOnHide | Whether destroy tooltip when hidden | boolean | false |  |\n| fresh | Tooltip will cache content when it is closed by default. Setting this property will always keep updating | boolean | false | 5.10.0 |\n| getPopupContainer | The DOM container of the tip, the default behavior is to create a `div` element in `body` | (triggerNode: HTMLElement) => HTMLElement | () => document.body |  |\n| mouseEnterDelay | Delay in seconds, before tooltip is shown on mouse enter | number | 0.1 |  |\n| mouseLeaveDelay | Delay in seconds, before tooltip is hidden on mouse leave | number | 0.1 |  |\n| overlayClassName | Class name of the tooltip card | string | - |  |\n| overlayStyle | Style of the tooltip card | object | - |  |\n| overlayInnerStyle | Style of the tooltip inner content | object | - |  |\n| placement | The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom` | string | `top` |  |\n| trigger | Tooltip trigger mode. Could be multiple by passing an array | `hover` \\| `focus` \\| `click` \\| `contextMenu` \\| Array&lt;string> | `hover` |  |\n| open | Whether the floating tooltip card is open or not. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open)) | boolean | false | 4.23.0 |\n| zIndex | Config `z-index` of Tooltip | number | - |  |\n| onOpenChange | Callback executed when visibility of the tooltip card is changed | (open: boolean) => void | - | 4.23.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Tooltip\"></ComponentTokenTable>\n\n## FAQ\n\n### Why sometime not work on HOC?\n\nPlease ensure that the child node of `Tooltip` accepts `onMouseEnter`, `onMouseLeave`, `onPointerEnter`, `onPointerLeave`, `onFocus`, `onClick` events.\n\n### What's the placement logic?\n\nIt will follow `placement` config when screen has enough space. And flip when space is not enough (Such as `top` to `bottom` or `topLeft` to `bottomLeft`). Single direction such as `top` `bottom` `left` `right` will auto shift on the view:\n\n<img alt=\"shift\" height=\"200\" src=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*sxaTTJjLtIMAAAAAAAAAAAAADrJ8AQ/original\" />\n\nWhen `placement` is set to edge align such as `topLeft` `bottomRight`, it will only do flip but not do shift.\n\n### Why Tooltip not update content when close?\n\nTooltip will cache content when it is closed to avoid flicker when content is updated:\n\n```jsx\n// `title` will not blink when `user` is empty\n<Tooltip open={user} title={user?.name} />\n```\n\n<div>\n<img alt=\"no blink\" height=\"50\" src=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*KVx7QLOYwVsAAAAAAAAAAAAADrJ8AQ/original\" />\n</div>\n\nIf need update content when close, you can set `fresh` property ([#44830](https://github.com/ant-design/ant-design/issues/44830)):\n\n```jsx\n<Tooltip open={user} title={user?.name} fresh />\n```\n\n<div>\n<img alt=\"no blink\" height=\"50\" src=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*rUbsR4xWpMsAAAAAAAAAAAAADrJ8AQ/original\" />\n</div>\n"},"tour":{"zh-CN":"---\ncategory: Components\nsubtitle: 漫游式引导\ngroup: 数据展示\ntitle: Tour\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8CC_Tbe3_e4AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*nF6hQpM0XtEAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ntag: New\n---\n\n用于分步引导用户了解产品功能的气泡组件。自 `5.0.0` 版本开始提供该组件。\n\n## 何时使用\n\n常用于引导用户了解产品功能。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/non-modal.tsx\">非模态</code>\n<code src=\"./demo/placement.tsx\">位置</code>\n<code src=\"./demo/mask.tsx\">自定义遮罩样式</code>\n<code src=\"./demo/indicator.tsx\">自定义指示器</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Tour\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| arrow | 是否显示箭头，包含是否指向元素中心的配置 | `boolean` \\| `{ pointAtCenter: boolean}` | `true` |  |\n| closeIcon | 自定义关闭按钮 | `React.ReactNode` | `true` | 5.9.0 |\n| disabledInteraction | 禁用高亮区域交互 | `boolean` | `false` | 5.13.0 |\n| placement | 引导卡片相对于目标元素的位置 | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | `bottom` |  |\n| onClose | 关闭引导时的回调函数 | `Function` | - |  |\n| onFinish | 引导完成时的回调 | `Function` | - |  |\n| mask | 是否启用蒙层，也可传入配置改变蒙层样式和填充色 | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` |  |\n| type | 类型，影响底色与文字颜色 | `default` \\| `primary` | `default` |  |\n| open | 打开引导 | `boolean` | - |  |\n| onChange | 步骤改变时的回调，current 为当前的步骤 | `(current: number) => void` | - |  |\n| current | 当前处于哪一步 | `number` | - |  |\n| scrollIntoViewOptions | 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数 | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n| indicatorsRender | 自定义指示器 | `(current: number, total: number) => ReactNode` | - | 5.2.0 |\n| zIndex | Tour 的层级 | number | 1001 | 5.3.0 |\n| getPopupContainer | 设置 Tour 浮层的渲染节点，默认是 body | `(node: HTMLElement) => HTMLElement` | body | 5.12.0 |\n\n### TourStep 引导步骤卡片\n\n| 属性 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| target | 获取引导卡片指向的元素，为空时居中于屏幕 | `() => HTMLElement` \\| `HTMLElement` | - |  |\n| arrow | 是否显示箭头，包含是否指向元素中心的配置 | `boolean` \\| `{ pointAtCenter: boolean}` | `true` |  |\n| closeIcon | 自定义关闭按钮 | `React.ReactNode` | `true` | 5.9.0 |\n| cover | 展示的图片或者视频 | `ReactNode` | - |  |\n| title | 标题 | `ReactNode` | - |  |\n| description | 主要描述部分 | `ReactNode` | - |  |\n| placement | 引导卡片相对于目标元素的位置 | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` `bottom` |  |  |\n| onClose | 关闭引导时的回调函数 | `Function` | - |  |\n| mask | 是否启用蒙层，也可传入配置改变蒙层样式和填充色，默认跟随 Tour 的 `mask` 属性 | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` |  |\n| type | 类型，影响底色与文字颜色 | `default` \\| `primary` | `default` |  |\n| nextButtonProps | 下一步按钮的属性 | `{ children: ReactNode; onClick: Function }` | - |  |\n| prevButtonProps | 上一步按钮的属性 | `{ children: ReactNode; onClick: Function }` | - |  |\n| scrollIntoViewOptions | 是否支持当前元素滚动到视窗内，也可传入配置指定滚动视窗的相关参数，默认跟随 Tour 的 `scrollIntoViewOptions` 属性 | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Tour\"></ComponentTokenTable>\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Tour\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*8CC_Tbe3_e4AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*nF6hQpM0XtEAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\ntag: New\n---\n\nA popup component for guiding users through a product. Available since `5.0.0`.\n\n## When To Use\n\nUse when you want to guide users through a product.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/non-modal.tsx\">Non-modal</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/mask.tsx\">Custom mask style</code>\n<code src=\"./demo/indicator.tsx\">Custom indicator</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Tour\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| arrow | Whether to show the arrow, including the configuration whether to point to the center of the element | `boolean`\\|`{ pointAtCenter: boolean}` | `true` |  |\n| closeIcon | Customize close icon | `React.ReactNode` | `true` | 5.9.0 |\n| disabledInteraction | Disable interaction on highlighted area. | `boolean` | `false` | 5.13.0 |\n| placement | Position of the guide card relative to the target element | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | `bottom` |  |\n| onClose | Callback function on shutdown | `Function` | - |  |\n| mask | Whether to enable masking, change mask style and fill color by pass custom props | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` |  |\n| type | Type, affects the background color and text color | `default` `primary` | `default` |  |\n| open | Open tour | `boolean` | - |  |\n| onChange | Callback when the step changes. Current is the previous step | `(current: number) => void` | - |  |\n| current | What is the current step | `number` | - |  |\n| scrollIntoViewOptions | support pass custom scrollIntoView options | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n| indicatorsRender | custom indicator | `(current: number, total: number) => ReactNode` | - | 5.2.0 |\n| zIndex | Tour's zIndex | number | 1001 | 5.3.0 |\n| getPopupContainer | Set the rendering node of Tour floating layer | `(node: HTMLElement) => HTMLElement` | body | 5.12.0 |\n\n### TourStep\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| target | Get the element the guide card points to. Empty makes it show in center of screen | `() => HTMLElement` `HTMLElement` | - |  |\n| arrow | Whether to show the arrow, including the configuration whether to point to the center of the element | `boolean` `{ pointAtCenter: boolean}` | `true` |  |\n| closeIcon | Customize close icon | `React.ReactNode` | `true` | 5.9.0 |\n| cover | Displayed pictures or videos | `ReactNode` | - |  |\n| title | title | `ReactNode` | - |  |\n| description | description | `ReactNode` | - |  |\n| placement | Position of the guide card relative to the target element | `center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight` | `bottom` |  |\n| onClose | Callback function on shutdown | `Function` | - |  |\n| mask | Whether to enable masking, change mask style and fill color by pass custom props, the default follows the `mask` property of Tour | `boolean \\| { style?: React.CSSProperties; color?: string; }` | `true` |  |\n| type | Type, affects the background color and text color | `default` `primary` | `default` |  |\n| nextButtonProps | Properties of the Next button | `{ children: ReactNode; onClick: Function }` | - |  |\n| prevButtonProps | Properties of the previous button | `{ children: ReactNode; onClick: Function }` | - |  |\n| scrollIntoViewOptions | support pass custom scrollIntoView options, the default follows the `scrollIntoViewOptions` property of Tour | `boolean \\| ScrollIntoViewOptions` | `true` | 5.2.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Tour\"></ComponentTokenTable>\n"},"transfer":{"zh-CN":"---\ncategory: Components\nsubtitle: 穿梭框\ngroup: 数据录入\ntitle: Transfer\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*EAApQ5ephigAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*yv12S4sSRAEAAAAAAAAAAAAADrJ8AQ/original\n---\n\n双栏穿梭选择框。\n\n## 何时使用\n\n- 需要在多个可选项中进行多选时。\n- 比起 Select 和 TreeSelect，穿梭框占据更大的空间，可以展示可选项的更多信息。\n\n穿梭选择框用直观的方式在两栏中移动元素，完成选择行为。\n\n选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。其中，左边一栏为 `source`，右边一栏为 `target`，API 的设计也反映了这两个概念。\n\n> 注意：穿梭框组件只支持受控使用，不支持非受控模式。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本用法</code>\n<code src=\"./demo/oneWay.tsx\">单向样式</code>\n<code src=\"./demo/search.tsx\">带搜索框</code>\n<code src=\"./demo/advanced.tsx\">高级用法</code>\n<code src=\"./demo/custom-item.tsx\">自定义渲染行数据</code>\n<code src=\"./demo/large-data.tsx\">分页</code>\n<code src=\"./demo/table-transfer.tsx\">表格穿梭框</code>\n<code src=\"./demo/tree-transfer.tsx\">树穿梭框</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/custom-select-all-labels.tsx\" debug>自定义全选文字</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Transfer\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| dataSource | 数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外 | [RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[] | \\[] |  |\n| disabled | 是否禁用 | boolean | false |  |\n| selectionsIcon | 自定义下拉菜单图标 | React.ReactNode |  | 5.8.0 |\n| filterOption | 根据搜索内容进行筛选，接收 `inputValue` `option` `direction` 三个参数，(`direction` 自5.9.0+支持)，当 `option` 符合筛选条件时，应返回 true，反之则返回 false | (inputValue, option, direction: `left` \\| `right`): boolean | - |  |\n| footer | 底部渲染函数 | (props, { direction }) => ReactNode | - | direction: 4.17.0 |\n| listStyle | 两个穿梭框的自定义样式 | object\\|({direction: `left` \\| `right`}) => object | - |  |\n| locale | 各种语言 | { itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode \\| ReactNode[]; } | { itemUnit: `项`, itemsUnit: `项`, searchPlaceholder: `请输入搜索内容` } |  |\n| oneWay | 展示为单向样式 | boolean | false | 4.3.0 |\n| operations | 操作文案集合，顺序从上至下 | string\\[] | \\[`>`, `<`] |  |\n| operationStyle | 操作栏的自定义样式 | CSSProperties | - |  |\n| pagination | 使用分页样式，自定义渲染列表下无效 | boolean \\| { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean } | false | 4.3.0 |\n| render | 每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 `label` 字段为 ReactElement，`value` 字段为 title | (record) => ReactNode | - |  |\n| selectAllLabels | 自定义顶部多选框标题的集合 | (ReactNode \\| (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[] | - |  |\n| selectedKeys | 设置哪些项应该被选中 | string\\[] | \\[] |  |\n| showSearch | 是否显示搜索框 | boolean | false |  |\n| showSelectAll | 是否展示全选勾选框 | boolean | true |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| targetKeys | 显示在右侧框数据的 key 集合 | string\\[] | \\[] |  |\n| titles | 标题集合，顺序从左至右 | ReactNode\\[] | - |  |\n| onChange | 选项在两栏之间转移时的回调函数 | (targetKeys, direction, moveKeys): void | - |  |\n| onScroll | 选项列表滚动时的回调函数 | (direction, event): void | - |  |\n| onSearch | 搜索框内容时改变时的回调函数 | (direction: `left` \\| `right`, value: string): void | - |  |\n| onSelectChange | 选中项发生改变时的回调函数 | (sourceSelectedKeys, targetSelectedKeys): void | - |  |\n\n### Render Props\n\nTransfer 支持接收 `children` 自定义渲染列表，并返回以下参数：\n\n| 参数            | 说明           | 类型                                 | 版本 |\n| --------------- | -------------- | ------------------------------------ | ---- |\n| direction       | 渲染列表的方向 | `left` \\| `right`                    |      |\n| disabled        | 是否禁用列表   | boolean                              |      |\n| filteredItems   | 过滤后的数据   | RecordType\\[]                        |      |\n| selectedKeys    | 选中的条目     | string\\[]                            |      |\n| onItemSelect    | 勾选条目       | (key: string, selected: boolean)     |      |\n| onItemSelectAll | 勾选一组条目   | (keys: string\\[], selected: boolean) |      |\n\n#### 参考示例\n\n```jsx\n<Transfer {...props}>{(listProps) => <YourComponent {...listProps} />}</Transfer>\n```\n\n## 注意\n\n按照 React 的[规范](http://facebook.github.io/react/docs/lists-and-keys.html#keys)，所有的组件数组必须绑定 key。在 Transfer 中，`dataSource` 里的数据值需要指定 `key` 值。对于 `dataSource` 默认将每列数据的 `key` 属性作为唯一的标识。\n\n如果你的数据没有这个属性，务必使用 `rowKey` 来指定数据列的主键。\n\n```jsx\n// 比如你的数据主键是 uid\nreturn <Transfer rowKey={(record) => record.uid} />;\n```\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Transfer\"></ComponentTokenTable>\n\n## FAQ\n\n### 怎样让 Transfer 穿梭框列表支持异步数据加载\n\n为了保持页码同步，在勾选时可以不移除选项而以禁用代替：<https://codesandbox.io/s/objective-wing-6iqbx>\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Transfer\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*EAApQ5ephigAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*yv12S4sSRAEAAAAAAAAAAAAADrJ8AQ/original\n---\n\nDouble column transfer choice box.\n\n## When To Use\n\n- It is a select control essentially which can be use for selecting multiple items.\n- Transfer can display more information for items and take up more space.\n\nTransfer the elements between two columns in an intuitive and efficient way.\n\nOne or more elements can be selected from either column, one click on the proper `direction` button, and the transfer is done. The left column is considered the `source` and the right column is considered the `target`. As you can see in the API description, these names are reflected in.\n\n> notice: Transfer is a controlled component, uncontrolled mode is not supported.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/oneWay.tsx\">One Way</code>\n<code src=\"./demo/search.tsx\">Search</code>\n<code src=\"./demo/advanced.tsx\">Advanced</code>\n<code src=\"./demo/custom-item.tsx\">Custom datasource</code>\n<code src=\"./demo/large-data.tsx\">Pagination</code>\n<code src=\"./demo/table-transfer.tsx\">Table Transfer</code>\n<code src=\"./demo/tree-transfer.tsx\">Tree Transfer</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/custom-select-all-labels.tsx\" debug>Custom Select All Labels</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| dataSource | Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in `targetKeys` prop | [RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[] | \\[] |  |\n| disabled | Whether disabled transfer | boolean | false |  |\n| selectionsIcon | custom dropdown icon | React.ReactNode |  | 5.8.0 |\n| filterOption | A function to determine whether an item should show in search result list, only works when searching, (add `direction` support since 5.9.0+) | (inputValue, option, direction: `left` \\| `right`): boolean | - |  |\n| footer | A function used for rendering the footer | (props, { direction }) => ReactNode | - | direction: 4.17.0 |\n| listStyle | A custom CSS style used for rendering the transfer columns | object \\| ({direction: `left` \\| `right`}) => object | - |  |\n| locale | The i18n text including filter, empty text, item unit, etc | { itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode \\| ReactNode[]; } | { itemUnit: `item`, itemsUnit: `items`, notFoundContent: `The list is empty`, searchPlaceholder: `Search here` } |  |\n| oneWay | Display as single direction style | boolean | false | 4.3.0 |\n| operations | A set of operations that are sorted from top to bottom | string\\[] | \\[`>`, `<`] |  |\n| operationStyle | A custom CSS style used for rendering the operations column | object | - |  |\n| pagination | Use pagination. Not work in render props | boolean \\| { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean } | false | 4.3.0 |\n| render | The function to generate the item shown on a column. Based on an record (element of the dataSource array), this function should return a React element which is generated from that record. Also, it can return a plain object with `value` and `label`, `label` is a React element and `value` is for title | (record) => ReactNode | - |  |\n| selectAllLabels | A set of customized labels for select all checkboxes on the header | (ReactNode \\| (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[] | - |  |\n| selectedKeys | A set of keys of selected items | string\\[] | \\[] |  |\n| showSearch | If included, a search box is shown on each column | boolean | false |  |\n| showSelectAll | Show select all checkbox on the header | boolean | true |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| targetKeys | A set of keys of elements that are listed on the right column | string\\[] | \\[] |  |\n| titles | A set of titles that are sorted from left to right | ReactNode\\[] | - |  |\n| onChange | A callback function that is executed when the transfer between columns is complete | (targetKeys, direction, moveKeys): void | - |  |\n| onScroll | A callback function which is executed when scroll options list | (direction, event): void | - |  |\n| onSearch | A callback function which is executed when search field are changed | (direction: `left` \\| `right`, value: string): void | - |  |\n| onSelectChange | A callback function which is executed when selected items are changed | (sourceSelectedKeys, targetSelectedKeys): void | - |  |\n\n### Render Props\n\nTransfer accept `children` to customize render list, using follow props:\n\n| Property        | Description             | Type                                 | Version |\n| --------------- | ----------------------- | ------------------------------------ | ------- |\n| direction       | List render direction   | `left` \\| `right`                    |         |\n| disabled        | Disable list or not     | boolean                              |         |\n| filteredItems   | Filtered items          | RecordType\\[]                        |         |\n| selectedKeys    | Selected items          | string\\[]                            |         |\n| onItemSelect    | Select item             | (key: string, selected: boolean)     |         |\n| onItemSelectAll | Select a group of items | (keys: string\\[], selected: boolean) |         |\n\n#### example\n\n```jsx\n<Transfer {...props}>{(listProps) => <YourComponent {...listProps} />}</Transfer>\n```\n\n## Warning\n\nAccording the [standard](http://facebook.github.io/react/docs/lists-and-keys.html#keys) of React, the key should always be supplied directly to the elements in the array. In Transfer, the keys should be set on the elements included in `dataSource` array. By default, `key` property is used as an unique identifier.\n\nIf there's no `key` in your data, you should use `rowKey` to specify the key that will be used for uniquely identify each element.\n\n```jsx\n// eg. your primary key is `uid`\nreturn <Transfer rowKey={(record) => record.uid} />;\n```\n\n## Design Token\n\n<ComponentTokenTable component=\"Transfer\"></ComponentTokenTable>\n\n## FAQ\n\n### How to support fetch and present data from a remote server in Transfer column.\n\nIn order to keep the page number synchronized, you can disable columns you checked without removing the option: <https://codesandbox.io/s/objective-wing-6iqbx>\n"},"tree-select":{"zh-CN":"---\ncategory: Components\nsubtitle: 树选择\ngroup: 数据录入\ntitle: TreeSelect\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*DfTMRYSDngEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Y5pcQLplFu4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n树型选择控件。\n\n## 何时使用\n\n类似 Select 的选择控件，可选择的数据结构是一个树形结构时，可以使用 TreeSelect，例如公司层级、学科系统、分类目录等等。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/multiple.tsx\">多选</code>\n<code src=\"./demo/treeData.tsx\">从数据直接生成</code>\n<code src=\"./demo/checkable.tsx\">可勾选</code>\n<code src=\"./demo/async.tsx\">异步加载</code>\n<code src=\"./demo/treeLine.tsx\">线性样式</code>\n<code src=\"./demo/placement.tsx\">弹出位置</code>\n<code src=\"./demo/status.tsx\">自定义状态</code>\n<code src=\"./demo/suffix.tsx\" debug>后缀图标</code>\n<code src=\"./demo/render-panel.tsx\" debug>\\_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Tree props\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowClear | 自定义清除按钮 | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: 支持对象形式 |\n| autoClearSearchValue | 当多选模式下值被选择，自动清空搜索框 | boolean | true |  |\n| defaultValue | 指定默认选中的条目 | string \\| string\\[] | - |  |\n| disabled | 是否禁用 | boolean | false |  |\n| popupClassName | 下拉菜单的 className 属性 | string | - | 4.23.0 |\n| popupMatchSelectWidth | 下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动 | boolean \\| number | true | 5.5.0 |\n| dropdownRender | 自定义下拉框内容 | (originNode: ReactNode, props) => ReactNode | - |  |\n| dropdownStyle | 下拉菜单的样式 | object | - |  |\n| fieldNames | 自定义节点 label、value、children 的字段 | object | { label: `label`, value: `value`, children: `children` } | 4.17.0 |\n| filterTreeNode | 是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值 | boolean \\| function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值) | function |  |\n| getPopupContainer | 菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body |  |\n| labelInValue | 是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 {value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string\\[] } 的格式 | boolean | false |  |\n| listHeight | 设置弹窗滚动高度 | number | 256 |  |\n| loadData | 异步加载数据。在过滤时不会调用以防止网络堵塞，可参考 FAQ 获得更多内容 | function(node) | - |  |\n| maxTagCount | 最多显示多少个 tag，响应式模式会对性能产生损耗 | number \\| `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | 隐藏 tag 时显示的内容 | ReactNode \\| function(omittedValues) | - |  |\n| maxTagTextLength | 最大显示的 tag 文本长度 | number | - |  |\n| multiple | 支持多选（当设置 treeCheckable 时自动变为 true） | boolean | false |  |\n| notFoundContent | 当下拉列表为空时显示的内容 | ReactNode | `Not Found` |  |\n| placeholder | 选择框默认文字 | string | - |  |\n| placement | 选择框弹出的位置 | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| searchValue | 搜索框的值，可以通过 `onSearch` 获取用户输入 | string | - |  |\n| showCheckedStrategy | 配置 `treeCheckable` 时，定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点)。`TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时)。 默认只显示子节点 | `TreeSelect.SHOW_ALL` \\| `TreeSelect.SHOW_PARENT` \\| `TreeSelect.SHOW_CHILD` | `TreeSelect.SHOW_CHILD` |  |\n| showSearch | 是否支持搜索框 | boolean | 单选：false \\| 多选：true |  |\n| size | 选择框大小 | `large` \\| `middle` \\| `small` | - |  |\n| status | 设置校验状态 | 'error' \\| 'warning' | - | 4.19.0 |\n| suffixIcon | 自定义的选择框后缀图标 | ReactNode | `<DownOutlined />` |  |\n| switcherIcon | 自定义树节点的展开/折叠图标 | ReactNode \\| ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| tagRender | 自定义 tag 内容，多选时生效 | (props) => ReactNode | - |  |\n| treeCheckable | 显示 Checkbox | boolean | false |  |\n| treeCheckStrictly | `checkable` 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true | boolean | false |  |\n| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一） | array&lt;{value, title, children, \\[disabled, disableCheckbox, selectable, checkable]}> | \\[] |  |\n| treeDataSimpleMode | 使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...]， `pId` 是父节点的 id) | boolean \\| object&lt;{ id: string, pId: string, rootPId: string }> | false |  |\n| treeDefaultExpandAll | 默认展开所有树节点 | boolean | false |  |\n| treeDefaultExpandedKeys | 默认展开的树节点 | string\\[] | - |  |\n| treeExpandAction | 点击节点 title 时的展开逻辑，可选：false \\| `click` \\| `doubleClick` | string \\| boolean | false | 4.21.0 |\n| treeExpandedKeys | 设置展开的树节点 | string\\[] | - |  |\n| treeIcon | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式 | boolean | false |  |\n| treeLine | 是否展示线条样式，请参考 [Tree - showLine](/components/tree-cn#components-tree-demo-line) | boolean \\| object | false | 4.17.0 |\n| treeLoadedKeys | （受控）已经加载的节点，需要配合 `loadData` 使用 | string[] | [] |  |\n| treeNodeFilterProp | 输入项过滤对应的 treeNode 属性 | string | `value` |  |\n| treeNodeLabelProp | 作为显示的 prop 设置 | string | `title` |  |\n| value | 指定当前选中的条目 | string \\| string\\[] | - |  |\n| variant | 形态变体 | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onChange | 选中树节点时调用此函数 | function(value, label, extra) | - |  |\n| onDropdownVisibleChange | 展开下拉菜单的回调 | function(open) | - |  |\n| onSearch | 文本框值变化时的回调 | function(value: string) | - |  |\n| onSelect | 被选中时调用 | function(value, node, extra) | - |  |\n| onTreeExpand | 展示节点时调用 | function(expandedKeys) | - |  |\n\n### Tree 方法\n\n| 名称    | 描述     | 版本 |\n| ------- | -------- | ---- |\n| blur()  | 移除焦点 |      |\n| focus() | 获取焦点 |      |\n\n### TreeNode props\n\n> 建议使用 treeData 来代替 TreeNode，免去手工构造麻烦\n\n| 参数            | 说明                                               | 类型      | 默认值 | 版本 |\n| --------------- | -------------------------------------------------- | --------- | ------ | ---- |\n| checkable       | 当树为 Checkbox 时，设置独立节点是否展示 Checkbox  | boolean   | -      |      |\n| disableCheckbox | 禁掉 Checkbox                                      | boolean   | false  |      |\n| disabled        | 是否禁用                                           | boolean   | false  |      |\n| isLeaf          | 是否是叶子节点                                     | boolean   | false  |      |\n| key             | 此项必须设置（其值在整个树范围内唯一）             | string    | -      |      |\n| selectable      | 是否可选                                           | boolean   | true   |      |\n| title           | 树节点显示的内容                                   | ReactNode | `---`  |      |\n| value           | 默认根据此属性值进行筛选（其值在整个树范围内唯一） | string    | -      |      |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"TreeSelect\"></ComponentTokenTable>\n\n## FAQ\n\n### onChange 时如何获得父节点信息？\n\n从性能角度考虑，我们默认不透出父节点信息。你可以这样获得：<https://codesandbox.io/s/get-parent-node-in-onchange-eb1608>\n\n### 自定义 Option 样式导致滚动异常怎么办？\n\n请参考 Select 的 [FAQ](/components/select-cn)。\n\n### 为何在搜索时 `loadData` 不会触发展开？\n\n在 v4 alpha 版本中，默认在搜索时亦会进行搜索。但是经反馈，在输入时会快速阻塞网络。因而改为搜索不触发 `loadData`。但是你仍然可以通过 `filterTreeNode` 处理异步加载逻辑：\n\n```tsx\n<TreeSelect\n  filterTreeNode={(input, treeNode) => {\n    const match = YOUR_LOGIC_HERE;\n\n    if (match && !treeNode.isLeaf && !treeNode.children) {\n      // Do some loading logic\n    }\n\n    return match;\n  }}\n/>\n```\n\n### 为何弹出框不能横向滚动？\n\n关闭虚拟滚动即可，因为开启虚拟滚动时无法准确的测量完整列表的 `scrollWidth`。\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: TreeSelect\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*DfTMRYSDngEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Y5pcQLplFu4AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nTree selection control.\n\n## When To Use\n\n`TreeSelect` is similar to `Select`, but the values are provided in a tree like structure. Any data whose entries are defined in a hierarchical manner is fit to use this control. Examples of such case may include a corporate hierarchy, a directory structure, and so on.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/multiple.tsx\">Multiple Selection</code>\n<code src=\"./demo/treeData.tsx\">Generate from tree data</code>\n<code src=\"./demo/checkable.tsx\">Checkable</code>\n<code src=\"./demo/async.tsx\">Asynchronous loading</code>\n<code src=\"./demo/treeLine.tsx\">Show Tree Line</code>\n<code src=\"./demo/placement.tsx\">Placement</code>\n<code src=\"./demo/status.tsx\">Status</code>\n<code src=\"./demo/suffix.tsx\" debug>Suffix</code>\n<code src=\"./demo/render-panel.tsx\" debug>_InternalPanelDoNotUseOrYouWillBeFired</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Tree props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowClear | Customize clear icon | boolean \\| { clearIcon?: ReactNode } | false | 5.8.0: Support object type |\n| autoClearSearchValue | If auto clear search input value when multiple select is selected/deselected | boolean | true |  |\n| defaultValue | To set the initial selected treeNode(s) | string \\| string\\[] | - |  |\n| disabled | Disabled or not | boolean | false |  |\n| popupClassName | The className of dropdown menu | string | - | 4.23.0 |\n| popupMatchSelectWidth | Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll | boolean \\| number | true | 5.5.0 |\n| dropdownRender | Customize dropdown content | (originNode: ReactNode, props) => ReactNode | - |  |\n| dropdownStyle | To set the style of the dropdown menu | CSSProperties | - |  |\n| fieldNames | Customize node label, value, children field name | object | { label: `label`, value: `value`, children: `children` } | 4.17.0 |\n| filterTreeNode | Whether to filter treeNodes by input value. The value of `treeNodeFilterProp` is used for filtering by default | boolean \\| function(inputValue: string, treeNode: TreeNode) (should return boolean) | function |  |\n| getPopupContainer | To set the container of the dropdown menu. The default is to create a `div` element in `body`, you can reset it to the scrolling area and make a relative reposition. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010) | function(triggerNode) | () => document.body |  |\n| labelInValue | Whether to embed label in value, turn the format of value from `string` to {value: string, label: ReactNode, halfChecked: string\\[]} | boolean | false |  |\n| listHeight | Config popup height | number | 256 |  |\n| loadData | Load data asynchronously. Will not load when filtering. Check FAQ for more info | function(node) | - |  |\n| maxTagCount | Max tag count to show. `responsive` will cost render performance | number \\| `responsive` | - | responsive: 4.10 |\n| maxTagPlaceholder | Placeholder for not showing tags | ReactNode \\| function(omittedValues) | - |  |\n| maxTagTextLength | Max tag text length to show | number | - |  |\n| multiple | Support multiple or not, will be `true` when enable `treeCheckable` | boolean | false |  |\n| notFoundContent | Specify content to show when no result matches | ReactNode | `Not Found` |  |\n| placeholder | Placeholder of the select input | string | - |  |\n| placement | The position where the selection box pops up | `bottomLeft` `bottomRight` `topLeft` `topRight` | bottomLeft |  |\n| searchValue | Work with `onSearch` to make search value controlled | string | - |  |\n| showCheckedStrategy | The way show selected item in box when `treeCheckable` set. **Default:** just show child nodes. **`TreeSelect.SHOW_ALL`:** show all checked treeNodes (include parent treeNode). **`TreeSelect.SHOW_PARENT`:** show checked treeNodes (just show parent treeNode) | `TreeSelect.SHOW_ALL` \\| `TreeSelect.SHOW_PARENT` \\| `TreeSelect.SHOW_CHILD` | `TreeSelect.SHOW_CHILD` |  |\n| showSearch | Support search or not | boolean | single: false \\| multiple: true |  |\n| size | To set the size of the select input | `large` \\| `middle` \\| `small` | - |  |\n| status | Set validation status | 'error' \\| 'warning' | - | 4.19.0 |\n| suffixIcon | The custom suffix icon | ReactNode | `<DownOutlined />` |  |\n| switcherIcon | Customize collapse/expand icon of tree node | ReactNode \\| ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| tagRender | Customize tag render when `multiple` | (props) => ReactNode | - |  |\n| treeCheckable | Whether to show checkbox on the treeNodes | boolean | false |  |\n| treeCheckStrictly | Whether to check nodes precisely (in the `checkable` mode), means parent and child nodes are not associated, and it will make `labelInValue` be true | boolean | false |  |\n| treeData | Data of the treeNodes, manual construction work is no longer needed if this property has been set(ensure the Uniqueness of each value) | array&lt;{ value, title, children, \\[disabled, disableCheckbox, selectable, checkable] }> | \\[] |  |\n| treeDataSimpleMode | Enable simple mode of treeData. Changes the `treeData` schema to: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...] where pId is parent node's id). It is possible to replace the default `id` and `pId` keys by providing object to `treeDataSimpleMode` | boolean \\| object&lt;{ id: string, pId: string, rootPId: string }> | false |  |\n| treeDefaultExpandAll | Whether to expand all treeNodes by default | boolean | false |  |\n| treeDefaultExpandedKeys | Default expanded treeNodes | string\\[] | - |  |\n| treeExpandAction | Tree title open logic when click, optional: false \\| `click` \\| `doubleClick` | string \\| boolean | false | 4.21.0 |\n| treeExpandedKeys | Set expanded keys | string\\[] | - |  |\n| treeIcon | Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true` | boolean | false |  |\n| treeLoadedKeys | (Controlled) Set loaded tree nodes, work with `loadData` only | string[] | [] |  |\n| treeLine | Show the line. Ref [Tree - showLine](/components/tree/#components-tree-demo-line) | boolean \\| object | false | 4.17.0 |\n| treeNodeFilterProp | Will be used for filtering if `filterTreeNode` returns true | string | `value` |  |\n| treeNodeLabelProp | Will render as content of select | string | `title` |  |\n| value | To set the current selected treeNode(s) | string \\| string\\[] | - |  |\n| variant | Variants of selector | `outlined` \\| `borderless` \\| `filled` | `outlined` | 5.13.0 |\n| virtual | Disable virtual scroll when set to false | boolean | true | 4.1.0 |\n| onChange | A callback function, can be executed when selected treeNodes or input value change | function(value, label, extra) | - |  |\n| onDropdownVisibleChange | Called when dropdown open | function(open) | - |  |\n| onSearch | A callback function, can be executed when the search input changes | function(value: string) | - |  |\n| onSelect | A callback function, can be executed when you select a treeNode | function(value, node, extra) | - |  |\n| onTreeExpand | A callback function, can be executed when treeNode expanded | function(expandedKeys) | - |  |\n\n### Tree Methods\n\n| Name    | Description  | Version |\n| ------- | ------------ | ------- |\n| blur()  | Remove focus |         |\n| focus() | Get focus    |         |\n\n### TreeNode props\n\n> We recommend you to use `treeData` rather than `TreeNode`, to avoid the trouble of manual construction.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| checkable | When Tree is checkable, set TreeNode display Checkbox or not | boolean | - |  |\n| disableCheckbox | Disables the checkbox of the treeNode | boolean | false |  |\n| disabled | Disabled or not | boolean | false |  |\n| isLeaf | Leaf node or not | boolean | false |  |\n| key | Required property (unless using `treeDataSimpleMode`), should be unique in the tree | string | - |  |\n| selectable | Whether can be selected | boolean | true |  |\n| title | Content showed on the treeNodes | ReactNode | `---` |  |\n| value | Will be treated as `treeNodeFilterProp` by default, should be unique in the tree | string | - |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"TreeSelect\"></ComponentTokenTable>\n\n## FAQ\n\n### How to get parent node in onChange?\n\nWe don't provide this since performance consideration. You can get by this way: <https://codesandbox.io/s/get-parent-node-in-onchange-eb1608>\n\n### Why sometime customize Option cause scroll break?\n\nYou can ref Select [FAQ](/components/select).\n\n### Why `loadData` not trigger when searching?\n\nIn earlier version, `loadData` will be triggered when searching. But we got feedback that it will block network when inputting. So we change it to not trigger `loadData` when searching. But you can still handle async logic by `filterTreeNode`:\n\n```tsx\n<TreeSelect\n  filterTreeNode={(input, treeNode) => {\n    const match = YOUR_LOGIC_HERE;\n\n    if (match && !treeNode.isLeaf && !treeNode.children) {\n      // Do some loading logic\n    }\n\n    return match;\n  }}\n/>\n```\n\n### Why can't popup scroll horizontally?\n\nJust turn off virtual scrolling, because the `scrollWidth` of the complete list cannot be accurately measured when virtual scrolling is turned on.\n"},"tree":{"zh-CN":"---\ncategory: Components\ngroup: 数据展示\ntitle: Tree\nsubtitle: 树形控件\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Ag9_Q6ArswEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*1GeUQJPTGUYAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n多层次的结构列表。\n\n## 何时使用\n\n文件夹、组织架构、生物分类、国家地区等等，世间万物的大多数结构都是树形结构。使用 `树控件` 可以完整展现其中的层级关系，并具有展开收起选择等交互功能。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/basic-controlled.tsx\">受控操作示例</code>\n<code src=\"./demo/draggable.tsx\">拖动示例</code>\n<code src=\"./demo/dynamic.tsx\">异步数据加载</code>\n<code src=\"./demo/search.tsx\">可搜索</code>\n<code src=\"./demo/line.tsx\">连接线</code>\n<code src=\"./demo/customized-icon.tsx\">自定义图标</code>\n<code src=\"./demo/directory.tsx\">目录</code>\n<code src=\"./demo/switcher-icon.tsx\">自定义展开/折叠图标</code>\n<code src=\"./demo/virtual-scroll.tsx\">虚拟滚动</code>\n<code src=\"./demo/drag-debug.tsx\" debug>Drag Debug</code>\n<code src=\"./demo/big-data.tsx\" debug>大数据</code>\n<code src=\"./demo/block-node.tsx\">占据整行</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n<code src=\"./demo/multiple-line.tsx\" debug>多行</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Tree props\n\n<!-- prettier-ignore -->\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| allowDrop | 是否允许拖拽时放置在该节点 | ({ dropNode, dropPosition }) => boolean | - |  |\n| autoExpandParent | 是否自动展开父节点 | boolean | false |  |\n| blockNode | 是否节点占据一行 | boolean | false |  |\n| checkable | 节点前添加 Checkbox 复选框 | boolean | false |  |\n| checkedKeys | （受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置 `checkable` 和 `checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联 | string\\[] \\| {checked: string\\[], halfChecked: string\\[]} | \\[] |  |\n| checkStrictly | checkable 状态下节点选择完全受控（父子节点选中状态不再关联） | boolean | false |  |\n| defaultCheckedKeys | 默认选中复选框的树节点 | string\\[] | \\[] |  |\n| defaultExpandAll | 默认展开所有树节点 | boolean | false |  |\n| defaultExpandedKeys | 默认展开指定的树节点 | string\\[] | \\[] |  |\n| defaultExpandParent | 默认展开父节点 | boolean | true |  |\n| defaultSelectedKeys | 默认选中的树节点 | string\\[] | \\[] |  |\n| disabled | 将树禁用 | boolean | false |  |\n| draggable | 设置节点可拖拽，可以通过 `icon: false` 关闭拖拽提示图标 | boolean \\| ((node: DataNode) => boolean) \\| { icon?: React.ReactNode \\| false, nodeDraggable?: (node: DataNode) => boolean } | false | `config`: 4.17.0 |\n| expandedKeys | （受控）展开指定的树节点 | string\\[] | \\[] |  |\n| fieldNames | 自定义节点 title、key、children 的字段 | object | { title: `title`, key: `key`, children: `children` } | 4.17.0 |\n| filterTreeNode | 按需筛选树节点（高亮），返回 true | function(node) | - |  |\n| height | 设置虚拟滚动容器高度，设置后内部节点不再支持横向滚动 | number | - |  |\n| icon | 自定义树节点图标。 | ReactNode \\| (props) => ReactNode | - |  |\n| loadData | 异步加载数据 | function(node) | - |  |\n| loadedKeys | （受控）已经加载的节点，需要配合 `loadData` 使用 | string\\[] | \\[] |  |\n| multiple | 支持点选多个节点（节点本身） | boolean | false |  |\n| rootStyle | 添加在 Tree 最外层的 style | CSSProperties | - | 4.20.0 |\n| selectable | 是否可选中 | boolean | true |  |\n| selectedKeys | （受控）设置选中的树节点，多选需设置 `multiple` 为 true | string\\[] | - |  |\n| showIcon | 是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式 | boolean | false |  |\n| showLine | 是否展示连接线 | boolean \\| {showLeafIcon: boolean \\| ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)} | false |  |\n| switcherIcon | 自定义树节点的展开/折叠图标 | ReactNode \\| ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| titleRender | 自定义渲染节点 | (nodeData) => ReactNode | - | 4.5.0 |\n| treeData | treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一） | array&lt;{key, title, children, \\[disabled, selectable]}> | - |  |\n| virtual | 设置 false 时关闭虚拟滚动 | boolean | true | 4.1.0 |\n| onCheck | 点击复选框触发 | function(checkedKeys, e:{checked: boolean, checkedNodes, node, event, halfCheckedKeys}) | - |  |\n| onDragEnd | dragend 触发时调用 | function({event, node}) | - |  |\n| onDragEnter | dragenter 触发时调用 | function({event, node, expandedKeys}) | - |  |\n| onDragLeave | dragleave 触发时调用 | function({event, node}) | - |  |\n| onDragOver | dragover 触发时调用 | function({event, node}) | - |  |\n| onDragStart | 开始拖拽时调用 | function({event, node}) | - |  |\n| onDrop | drop 触发时调用 | function({event, node, dragNode, dragNodesKeys}) | - |  |\n| onExpand | 展开/收起节点时触发 | function(expandedKeys, {expanded: boolean, node}) | - |  |\n| onLoad | 节点加载完毕时触发 | function(loadedKeys, {event, node}) | - |  |\n| onRightClick | 响应右键点击 | function({event, node}) | - |  |\n| onSelect | 点击树节点触发 | function(selectedKeys, e:{selected: boolean, selectedNodes, node, event}) | - |  |\n\n### TreeNode props\n\n| 参数 | 说明 | 类型 | 默认值 |  |\n| --- | --- | --- | --- | --- |\n| checkable | 当树为 checkable 时，设置独立节点是否展示 Checkbox | boolean | - |  |\n| disableCheckbox | 禁掉 checkbox | boolean | false |  |\n| disabled | 禁掉响应 | boolean | false |  |\n| icon | 自定义图标。可接收组件，props 为当前节点 props | ReactNode \\| (props) => ReactNode | - |  |\n| isLeaf | 设置为叶子节点 (设置了 `loadData` 时有效)。为 `false` 时会强制将其作为父节点 | boolean | - |  |\n| key | 被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！ | string | (内部计算出的节点位置) |  |\n| selectable | 设置节点是否可被选中 | boolean | true |  |\n| title | 标题 | ReactNode | `---` |  |\n\n### DirectoryTree props\n\n| 参数 | 说明 | 类型 | 默认值 |\n| --- | --- | --- | --- |\n| expandAction | 目录展开逻辑，可选：false \\| `click` \\| `doubleClick` | string \\| boolean | `click` |\n\n## 注意\n\n在 `3.4.0` 之前：树节点可以有很多，但在设置 `checkable` 时，将会花费更多的计算时间，因此我们缓存了一些计算结果（`this.treeNodesStates`）来复用，避免多次重复计算，以此提高性能。但这也带来了一些限制，当你异步加载树节点时，你需要这样渲染树：\n\n```jsx\n{\n  this.state.treeData.length ? (\n    <Tree>\n      {this.state.treeData.map((data) => (\n        <TreeNode />\n      ))}\n    </Tree>\n  ) : (\n    'loading tree'\n  );\n}\n```\n\n### Tree 方法\n\n| 名称 | 说明 |\n| --- | --- |\n| scrollTo({ key: string \\| number; align?: 'top' \\| 'bottom' \\| 'auto'; offset?: number }) | 虚拟滚动下，滚动到指定 key 条目 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Tree\"></ComponentTokenTable>\n\n## FAQ\n\n### 在 showLine 时，如何隐藏子节点图标？\n\n文件图标通过 switcherIcon 来实现，如果不需要你可以覆盖对应的样式：<https://codesandbox.io/s/883vo47xp8>\n\n### defaultExpandAll 在异步加载数据时为何不生效？\n\n`default` 前缀属性只有在初始化时生效，因而异步加载数据时 `defaultExpandAll` 已经执行完成。你可以通过受控 `expandedKeys` 或者在数据加载完成后渲染 Tree 来实现全部展开。\n\n### 虚拟滚动的限制\n\n虚拟滚动通过在仅渲染可视区域的元素来提升渲染性能。但是同时由于不会渲染所有节点，所以无法自动拓转横向宽度（比如超长 `title` 的横向滚动条）。\n\n### `disabled` 节点在树中的关系是什么？\n\nTree 通过传导方式进行数据变更。无论是展开还是勾选，它都会从变更的节点开始向上、向下传导变化，直到遍历的当前节点是 `disabled` 时停止。因而如果控制的节点本身为 `disabled` 时，那么它只会修改本身而不会影响其他节点。举例来说，一个父节点包含 3 个子节点，其中一个为 `disabled` 状态。那么勾选父节点，只会影响其余两个子节点变成勾选状态。勾选两个子节点后，无论 `disabled` 节点什么状态，父节点都会变成勾选状态。\n\n这种传导终止的方式是为了防止通过勾选子节点使得 `disabled` 父节点变成勾选状态，而用户无法直接勾选 `disabled` 父节点更改其状态导致的交互矛盾。如果你有着自己的传导需求，可以通过 `checkStrictly` 自定义勾选逻辑。\n","en-US":"---\ncategory: Components\ngroup: Data Display\ntitle: Tree\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*Ag9_Q6ArswEAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*1GeUQJPTGUYAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nA hierarchical list structure component.\n\n## When To Use\n\nAlmost anything can be represented in a tree structure. Examples include directories, organization hierarchies, biological classifications, countries, etc. The `Tree` component is a way of representing the hierarchical relationship between these things. You can also expand, collapse, and select a treeNode within a `Tree`.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/basic-controlled.tsx\">Controlled Tree</code>\n<code src=\"./demo/draggable.tsx\">draggable</code>\n<code src=\"./demo/dynamic.tsx\">load data asynchronously</code>\n<code src=\"./demo/search.tsx\">Searchable</code>\n<code src=\"./demo/line.tsx\">Tree with line</code>\n<code src=\"./demo/customized-icon.tsx\">Customize Icon</code>\n<code src=\"./demo/directory.tsx\">directory</code>\n<code src=\"./demo/switcher-icon.tsx\">Customize collapse/expand icon</code>\n<code src=\"./demo/virtual-scroll.tsx\">Virtual scroll</code>\n<code src=\"./demo/drag-debug.tsx\" debug>Drag Debug</code>\n<code src=\"./demo/big-data.tsx\" debug>Big data</code>\n<code src=\"./demo/block-node.tsx\">Block Node</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n<code src=\"./demo/multiple-line.tsx\" debug>Multiple lines</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Tree props\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| allowDrop | Whether to allow dropping on the node | ({ dropNode, dropPosition }) => boolean | - |  |\n| autoExpandParent | Whether to automatically expand a parent treeNode | boolean | false |  |\n| blockNode | Whether treeNode fill remaining horizontal space | boolean | false |  |\n| checkable | Add a Checkbox before the treeNodes | boolean | false |  |\n| checkedKeys | (Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When `checkable` and `checkStrictly` is true, its object has `checked` and `halfChecked` property. Regardless of whether the child or parent treeNode is checked, they won't impact each other | string\\[] \\| {checked: string\\[], halfChecked: string\\[]} | \\[] |  |\n| checkStrictly | Check treeNode precisely; parent treeNode and children treeNodes are not associated | boolean | false |  |\n| defaultCheckedKeys | Specifies the keys of the default checked treeNodes | string\\[] | \\[] |  |\n| defaultExpandAll | Whether to expand all treeNodes by default | boolean | false |  |\n| defaultExpandedKeys | Specify the keys of the default expanded treeNodes | string\\[] | \\[] |  |\n| defaultExpandParent | If auto expand parent treeNodes when init | boolean | true |  |\n| defaultSelectedKeys | Specifies the keys of the default selected treeNodes | string\\[] | \\[] |  |\n| disabled | Whether disabled the tree | boolean | false |  |\n| draggable | Specifies whether this Tree or the node is draggable. Use `icon: false` to disable drag handler icon | boolean \\| ((node: DataNode) => boolean) \\| { icon?: React.ReactNode \\| false, nodeDraggable?: (node: DataNode) => boolean } | false | `config`: 4.17.0 |\n| expandedKeys | (Controlled) Specifies the keys of the expanded treeNodes | string\\[] | \\[] |  |\n| fieldNames | Customize node title, key, children field name | object | { title: `title`, key: `key`, children: `children` } | 4.17.0 |\n| filterTreeNode | Defines a function to filter (highlight) treeNodes. When the function returns `true`, the corresponding treeNode will be highlighted | function(node) | - |  |\n| height | Config virtual scroll height. Will not support horizontal scroll when enable this | number | - |  |\n| icon | Customize treeNode icon | ReactNode \\| (props) => ReactNode | - |  |\n| loadData | Load data asynchronously | function(node) | - |  |\n| loadedKeys | (Controlled) Set loaded tree nodes. Need work with `loadData` | string\\[] | \\[] |  |\n| multiple | Allows selecting multiple treeNodes | boolean | false |  |\n| rootStyle | Style on the root element | CSSProperties | - | 4.20.0 |\n| selectable | Whether can be selected | boolean | true |  |\n| selectedKeys | (Controlled) Specifies the keys of the selected treeNodes, multiple selection needs to set `multiple` to true | string\\[] | - |  |\n| showIcon | Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to true | boolean | false |  |\n| showLine | Shows a connecting line | boolean \\| {showLeafIcon: boolean \\| ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)} | false |  |\n| switcherIcon | Customize collapse/expand icon of tree node | ReactNode \\| ((props: AntTreeNodeProps) => ReactNode) | - | renderProps: 4.20.0 |\n| titleRender | Customize tree node title render | (nodeData) => ReactNode | - | 4.5.0 |\n| treeData | The treeNodes data Array, if set it then you need not to construct children TreeNode. (key should be unique across the whole array) | array&lt;{ key, title, children, \\[disabled, selectable] }> | - |  |\n| virtual | Disable virtual scroll when set to false | boolean | true | 4.1.0 |\n| onCheck | Callback function for when the onCheck event occurs | function(checkedKeys, e:{checked: boolean, checkedNodes, node, event, halfCheckedKeys}) | - |  |\n| onDragEnd | Callback function for when the onDragEnd event occurs | function({event, node}) | - |  |\n| onDragEnter | Callback function for when the onDragEnter event occurs | function({event, node, expandedKeys}) | - |  |\n| onDragLeave | Callback function for when the onDragLeave event occurs | function({event, node}) | - |  |\n| onDragOver | Callback function for when the onDragOver event occurs | function({event, node}) | - |  |\n| onDragStart | Callback function for when the onDragStart event occurs | function({event, node}) | - |  |\n| onDrop | Callback function for when the onDrop event occurs | function({event, node, dragNode, dragNodesKeys}) | - |  |\n| onExpand | Callback function for when a treeNode is expanded or collapsed | function(expandedKeys, {expanded: boolean, node}) | - |  |\n| onLoad | Callback function for when a treeNode is loaded | function(loadedKeys, {event, node}) | - |  |\n| onRightClick | Callback function for when the user right clicks a treeNode | function({event, node}) | - |  |\n| onSelect | Callback function for when the user clicks a treeNode | function(selectedKeys, e:{selected: boolean, selectedNodes, node, event}) | - |  |\n\n### TreeNode props\n\n| Property | Description | Type | Default |  |\n| --- | --- | --- | --- | --- |\n| checkable | When Tree is checkable, set TreeNode display Checkbox or not | boolean | - |  |\n| disableCheckbox | Disables the checkbox of the treeNode | boolean | false |  |\n| disabled | Disables the treeNode | boolean | false |  |\n| icon | Customize icon. When you pass component, whose render will receive full TreeNode props as component props | ReactNode \\| (props) => ReactNode | - |  |\n| isLeaf | Determines if this is a leaf node(effective when `loadData` is specified). `false` will force trade TreeNode as a parent node | boolean | - |  |\n| key | Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree | string | (internal calculated position of treeNode) |  |\n| selectable | Set whether the treeNode can be selected | boolean | true |  |\n| title | Title | ReactNode | `---` |  |\n\n### DirectoryTree props\n\n| Property | Description | Type | Default |\n| --- | --- | --- | --- |\n| expandAction | Directory open logic, optional: false \\| `click` \\| `doubleClick` | string \\| boolean | `click` |\n\n## Note\n\nBefore `3.4.0`: The number of treeNodes can be very large, but when `checkable=true`, it will increase the compute time. So, we cache some calculations (e.g. `this.treeNodesStates`) to avoid double computing. But, this brings some restrictions. **When you load treeNodes asynchronously, you should render tree like this**:\n\n```jsx\n{\n  this.state.treeData.length ? (\n    <Tree>\n      {this.state.treeData.map((data) => (\n        <TreeNode />\n      ))}\n    </Tree>\n  ) : (\n    'loading tree'\n  );\n}\n```\n\n### Tree Methods\n\n| Name | Description |\n| --- | --- |\n| scrollTo({ key: string \\| number; align?: 'top' \\| 'bottom' \\| 'auto'; offset?: number }) | Scroll to key item in virtual scroll |\n\n## Design Token\n\n<ComponentTokenTable component=\"Tree\"></ComponentTokenTable>\n\n## FAQ\n\n### How to hide file icon when use showLine?\n\nFile icon realize by using switcherIcon. You can overwrite the style to hide it: <https://codesandbox.io/s/883vo47xp8>\n\n### Why defaultExpandAll not working on ajax data?\n\n`default` prefix prop only works when initializing. So `defaultExpandAll` has already executed when ajax load data. You can control `expandedKeys` or render Tree when data loaded to realize expanded all.\n\n### Virtual scroll limitation\n\nVirtual scroll only render items in visible region. Thus not support auto width (like long `title` with horizontal scroll).\n\n### What does `disabled` node work logic in the tree?\n\nTree change its data by conduction. Includes checked or auto expanded, it will conduction state to parent / children node until current node is `disabled`. So if a controlled node is `disabled`, it will only modify self state and not affect other nodes. For example, a parent node contains 3 child nodes and one of them is `disabled`. When check the parent node, it will only check rest 2 child nodes. As the same, when check these 2 child node, parent will be checked whatever checked state the `disabled` one is.\n\nThis conduction logic prevent that modify `disabled` parent checked state by check children node and user can not modify directly with click parent which makes the interactive conflict. If you want to modify this conduction logic, you can customize it with `checkStrictly` prop.\n"},"typography":{"zh-CN":"---\ncategory: Components\nsubtitle: 排版\ngroup: 通用\ntitle: Typography\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*MLt3R6m9huoAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*LT2jR41Uj2EAAAAAAAAAAAAADrJ8AQ/original\n---\n\n文本的基本格式。\n\n## 何时使用\n\n- 当需要展示标题、段落、列表内容时使用，如文章/博客/日志的文本样式。\n- 当需要一列基于文本的基础操作时，如拷贝/省略/可编辑。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/title.tsx\">标题组件</code>\n<code src=\"./demo/paragraph-debug.tsx\" debug>标题与段落</code>\n<code src=\"./demo/text.tsx\">文本与超链接组件</code>\n<code src=\"./demo/editable.tsx\">可编辑</code>\n<code src=\"./demo/copyable.tsx\">可复制</code>\n<code src=\"./demo/ellipsis.tsx\">省略号</code>\n<code src=\"./demo/ellipsis-middle.tsx\">省略中间</code>\n<code src=\"./demo/ellipsis-debug.tsx\" debug>省略号 Debug</code>\n<code src=\"./demo/suffix.tsx\">后缀</code>\n<code src=\"./demo/componentToken-debug.tsx\" debug>组件 Token</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n### Typography.Text\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false |  |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false |  |\n| disabled | 禁用文本 | boolean | false |  |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时不能设置省略行数、是否可展开、onExpand 展开事件。不同于 Typography.Paragraph，Text 组件自身不带 100% 宽度样式，因而默认情况下初次缩略后宽度便不再变化。如果需要自适应宽度，请手工配置宽度样式 | boolean \\| [Omit<ellipsis, 'expandable' \\| 'rows' \\| 'onExpand'>](#ellipsis) | false | [ellipsis](#ellipsis) |\n| keyboard | 添加键盘样式 | boolean | false | 4.3.0 |\n| mark | 添加标记样式 | boolean | false |  |\n| onClick | 点击 Text 时的回调 | (event) => void | - |  |\n| strong | 是否加粗 | boolean | false |  |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false |  |\n\n### Typography.Title\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false |  |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false |  |\n| disabled | 禁用文本 | boolean | false |  |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | boolean \\| [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| level | 重要程度，相当于 `h1`、`h2`、`h3`、`h4`、`h5` | number: 1, 2, 3, 4, 5 | 1 | 5: 4.6.0 |\n| mark | 添加标记样式 | boolean | false |  |\n| onClick | 点击 Title 时的回调 | (event) => void | - |  |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false |  |\n\n### Typography.Paragraph\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| code | 添加代码样式 | boolean | false |  |\n| copyable | 是否可拷贝，为对象时可进行各种自定义 | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | 添加删除线样式 | boolean | false |  |\n| disabled | 禁用文本 | boolean | false |  |\n| editable | 是否可编辑，为对象时可对编辑进行控制 | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | 自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等 | boolean \\| [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| mark | 添加标记样式 | boolean | false |  |\n| onClick | 点击 Paragraph 时的回调 | (event) => void | - |  |\n| strong | 是否加粗 | boolean | false |  |\n| italic | 是否斜体 | boolean | false | 4.16.0 |\n| type | 文本类型 | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | 添加下划线样式 | boolean | false |  |\n\n### copyable\n\n    {\n      text: string,\n      onCopy: function(event),\n      icon: ReactNode,\n      tooltips: false | [ReactNode, ReactNode],\n      format: 'text/plain' | 'text/html',\n    }\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| format | 剪切板数据的 Mime Type | 'text/plain' \\| 'text/html' | - | 4.21.0 |\n| icon | 自定义拷贝图标：\\[默认图标, 拷贝后的图标] | \\[ReactNode, ReactNode] | - | 4.6.0 |\n| text | 拷贝到剪切板里的文本 | string | - |  |\n| tooltips | 自定义提示文案，为 false 时隐藏文案 | \\[ReactNode, ReactNode] | \\[`复制`, `复制成功`] | 4.4.0 |\n| onCopy | 拷贝成功的回调函数 | function | - |  |\n\n### editable\n\n    {\n      icon: ReactNode,\n      tooltip: boolean | ReactNode,\n      editing: boolean,\n      maxLength: number,\n      autoSize: boolean | { minRows: number, maxRows: number },\n      text: string,\n      onChange: function(string),\n      onCancel: function,\n      onStart: function,\n      onEnd: function,\n      triggerType: ('icon' | 'text')[],\n      enterIcon: ReactNode,\n    }\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| autoSize | 自动 resize 文本域 | boolean \\| { minRows: number, maxRows: number } | - | 4.4.0 |\n| editing | 控制是否是编辑中状态 | boolean | false |  |\n| icon | 自定义编辑图标 | ReactNode | &lt;EditOutlined /> | 4.6.0 |\n| maxLength | 编辑中文本域最大长度 | number | - | 4.4.0 |\n| tooltip | 自定义提示文本，为 false 时关闭 | boolean \\| ReactNode | `编辑` | 4.6.0 |\n| text | 显式地指定编辑文案，为空时将隐式地使用 children | string | - | 4.24.0 |\n| onChange | 文本域编辑时触发 | function(value: string) | - |  |\n| onCancel | 按 ESC 退出编辑状态时触发 | function | - |  |\n| onStart | 进入编辑中状态时触发 | function | - |  |\n| onEnd | 按 ENTER 结束编辑状态时触发 | function | - | 4.14.0 |\n| triggerType | 编辑模式触发器类型，图标、文本或者两者都设置（不设置图标作为触发器时它会隐藏） | Array&lt;`icon`\\|`text`> | \\[`icon`] |  |\n| enterIcon | 在编辑段中自定义“enter”图标（传递“null”将删除图标） | ReactNode | `<EnterOutlined />` | 4.17.0 |\n\n### ellipsis\n\n    {\n      rows: number,\n      expandable: boolean,\n      suffix: string,\n      symbol: ReactNode,\n      tooltip: boolean | ReactNode | TooltipProps,\n      onExpand: function(event),\n      onEllipsis: function(ellipsis),\n    }\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| expandable | 是否可展开 | boolean | - |  |\n| rows | 最多显示的行数 | number | - |  |\n| suffix | 自定义省略内容后缀 | string | - |  |\n| symbol | 自定义展开描述文案 | ReactNode | `展开` |  |\n| tooltip | 省略时，展示提示信息 | boolean \\| ReactNode \\| [TooltipProps](/components/tooltip-cn/#api) | - | 4.11.0 |\n| onEllipsis | 触发省略时的回调 | function(ellipsis) | - | 4.2.0 |\n| onExpand | 点击展开时的回调 | function(event) | - |  |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Typography\"></ComponentTokenTable>\n\n## FAQ\n\n### Typography.Link 如何与 react-router 库集成？\n\n`react-router` 支持[自定义](https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/Link.md#component-reactcomponent)渲染组件：\n\n```tsx\n<Link to=\"/\" component={Typography.Link} />\n```\n\n**注意：** 这并不是和 react-router 的 Link 的执行逻辑等价 [参考](https://github.com/ant-design/ant-design/pull/26737/files#r488769888)\n","en-US":"---\ncategory: Components\ngroup: General\ntitle: Typography\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*MLt3R6m9huoAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*LT2jR41Uj2EAAAAAAAAAAAAADrJ8AQ/original\n---\n\nBasic text writing, including headings, body text, lists, and more.\n\n## When To Use\n\n- When need to display a title or paragraph contents in Articles/Blogs/Notes.\n- When you need copyable/editable/ellipsis texts.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/title.tsx\">Title Component</code>\n<code src=\"./demo/paragraph-debug.tsx\" debug>Title and Paragraph</code>\n<code src=\"./demo/text.tsx\">Text and Link Component</code>\n<code src=\"./demo/editable.tsx\">Editable</code>\n<code src=\"./demo/copyable.tsx\">Copyable</code>\n<code src=\"./demo/ellipsis.tsx\">Ellipsis</code>\n<code src=\"./demo/ellipsis-middle.tsx\">Ellipsis from middle</code>\n<code src=\"./demo/ellipsis-debug.tsx\" debug>Ellipsis Debug</code>\n<code src=\"./demo/suffix.tsx\">suffix</code>\n<code src=\"./demo/componentToken-debug.tsx\" debug>Component Token</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n### Typography.Text\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| code | Code style | boolean | false |  |\n| copyable | Whether to be copyable, customize it via setting an object | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | Deleted line style | boolean | false |  |\n| disabled | Disabled content | boolean | false |  |\n| editable | If editable. Can control edit state when is object | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | Display ellipsis when text overflows, can't configure expandable、rows and onExpand by using object. Diff with Typography.Paragraph, Text do not have 100% width style which means it will fix width on the first ellipsis. If you want to have responsive ellipsis, please set width manually | boolean \\| [Omit<ellipsis, 'expandable' \\| 'rows' \\| 'onExpand'>](#ellipsis) | false | [ellipsis](#ellipsis) |\n| keyboard | Keyboard style | boolean | false | 4.3.0 |\n| mark | Marked style | boolean | false |  |\n| onClick | Set the handler to handle click event | (event) => void | - |  |\n| strong | Bold style | boolean | false |  |\n| italic | Italic style | boolean | false | 4.16.0 |\n| type | Content type | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | Underlined style | boolean | false |  |\n\n### Typography.Title\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| code | Code style | boolean | false |  |\n| copyable | Whether to be copyable, customize it via setting an object | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | Deleted line style | boolean | false |  |\n| disabled | Disabled content | boolean | false |  |\n| editable | If editable. Can control edit state when is object | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | Display ellipsis when text overflows, can configure rows and expandable by using object | boolean \\| [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| level | Set content importance. Match with `h1`, `h2`, `h3`, `h4`, `h5` | number: 1, 2, 3, 4, 5 | 1 | 5: 4.6.0 |\n| mark | Marked style | boolean | false |  |\n| onClick | Set the handler to handle click event | (event) => void | - |  |\n| italic | Italic style | boolean | false | 4.16.0 |\n| type | Content type | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | Underlined style | boolean | false |  |\n\n### Typography.Paragraph\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| code | Code style | boolean | false |  |\n| copyable | Whether to be copyable, customize it via setting an object | boolean \\| [copyable](#copyable) | false | [copyable](#copyable) |\n| delete | Deleted line style | boolean | false |  |\n| disabled | Disabled content | boolean | false |  |\n| editable | If editable. Can control edit state when is object | boolean \\| [editable](#editable) | false | [editable](#editable) |\n| ellipsis | Display ellipsis when text overflows, can configure rows and expandable by using object | boolean \\| [ellipsis](#ellipsis) | false | [ellipsis](#ellipsis) |\n| mark | Marked style | boolean | false |  |\n| onClick | Set the handler to handle click event | (event) => void | - |  |\n| strong | Bold style | boolean | false |  |\n| italic | Italic style | boolean | false | 4.16.0 |\n| type | Content type | `secondary` \\| `success` \\| `warning` \\| `danger` | - | success: 4.6.0 |\n| underline | Underlined style | boolean | false |  |\n\n### copyable\n\n    {\n      text: string,\n      onCopy: function(event),\n      icon: ReactNode,\n      tooltips: false | [ReactNode, ReactNode],\n      format: 'text/plain' | 'text/html',\n    }\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| format | The Mime Type of the text | 'text/plain' \\| 'text/html' | - | 4.21.0 |\n| icon | Custom copy icon: \\[copyIcon, copiedIcon] | \\[ReactNode, ReactNode] | - | 4.6.0 |\n| text | The text to copy | string | - |  |\n| tooltips | Custom tooltip text, hide when it is false | \\[ReactNode, ReactNode] | \\[`Copy`, `Copied`] | 4.4.0 |\n| onCopy | Called when copied text | function | - |  |\n\n### editable\n\n    {\n      icon: ReactNode,\n      tooltip: boolean | ReactNode,\n      editing: boolean,\n      maxLength: number,\n      autoSize: boolean | { minRows: number, maxRows: number },\n      text: string,\n      onChange: function(string),\n      onCancel: function,\n      onStart: function,\n      onEnd: function,\n      triggerType: ('icon' | 'text')[],\n      enterIcon: ReactNode,\n    }\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| autoSize | `autoSize` attribute of textarea | boolean \\| { minRows: number, maxRows: number } | - | 4.4.0 |\n| editing | Whether to be editable | boolean | false |  |\n| icon | Custom editable icon | ReactNode | &lt;EditOutlined /> | 4.6.0 |\n| maxLength | `maxLength` attribute of textarea | number | - | 4.4.0 |\n| tooltip | Custom tooltip text, hide when it is false | boolean \\| ReactNode | `Edit` | 4.6.0 |\n| text | Edit text, specify the editing content instead of using the children implicitly | string | - | 4.24.0 |\n| onChange | Called when input at textarea | function(value: string) | - |  |\n| onCancel | Called when type ESC to exit editable state | function | - |  |\n| onStart | Called when enter editable state | function | - |  |\n| onEnd | Called when type ENTER to exit editable state | function | - | 4.14.0 |\n| triggerType | Edit mode trigger - icon, text or both (not specifying icon as trigger hides it) | Array&lt;`icon`\\|`text`> | \\[`icon`] |  |\n| enterIcon | Custom \"enter\" icon in the edit field (passing `null` removes the icon) | ReactNode | `<EnterOutlined />` | 4.17.0 |\n\n### ellipsis\n\n    {\n      rows: number,\n      expandable: boolean,\n      suffix: string,\n      symbol: ReactNode,\n      tooltip: boolean | ReactNode | TooltipProps,\n      onExpand: function(event),\n      onEllipsis: function(ellipsis),\n    }\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| expandable | Whether to be expandable | boolean | - |  |\n| rows | Max rows of content | number | - |  |\n| suffix | Suffix of ellipsis content | string | - |  |\n| symbol | Custom description of ellipsis | ReactNode | `Expand` |  |\n| tooltip | Show tooltip when ellipsis | boolean \\| ReactNode \\| [TooltipProps](/components/tooltip/#api) | - | 4.11.0 |\n| onEllipsis | Called when enter or leave ellipsis state | function(ellipsis) | - | 4.2.0 |\n| onExpand | Called when expand content | function(event) | - |  |\n\n## Design Token\n\n<ComponentTokenTable component=\"Typography\"></ComponentTokenTable>\n\n## FAQ\n\n### How to use Typography.Link in react-router?\n\n`react-router` support [customize](https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/Link.md#component-reactcomponent) render component:\n\n```tsx\n<Link to=\"/\" component={Typography.Link} />\n```\n\n**Note：** This is not equivalent to the execution logic of react-router's Link [reference](https://github.com/ant-design/ant-design/pull/26737/files#r488769888)\n"},"upload":{"zh-CN":"---\ncategory: Components\nsubtitle: 上传\ngroup: 数据录入\ntitle: Upload\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*93ymR4RD4S0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*l1nlSryXib8AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\n文件选择上传和拖拽上传控件。\n\n## 何时使用\n\n上传是将信息（网页、文字、图片、视频等）通过网页或者上传工具发布到远程服务器上的过程。\n\n- 当需要上传一个或一些文件时。\n- 当需要展现上传的进度时。\n- 当需要使用拖拽交互时。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">点击上传</code>\n<code src=\"./demo/avatar.tsx\">用户头像</code>\n<code src=\"./demo/defaultFileList.tsx\">已上传的文件列表</code>\n<code src=\"./demo/picture-card.tsx\">照片墙</code>\n<code src=\"./demo/picture-circle.tsx\">圆形照片墙</code>\n<code src=\"./demo/fileList.tsx\">完全控制的上传列表</code>\n<code src=\"./demo/drag.tsx\">拖拽上传</code>\n<code src=\"./demo/directory.tsx\">文件夹上传</code>\n<code src=\"./demo/upload-manually.tsx\">手动上传</code>\n<code src=\"./demo/upload-png-only.tsx\">只上传 png 图片</code>\n<code src=\"./demo/picture-style.tsx\">图片列表样式</code>\n<code src=\"./demo/preview-file.tsx\">自定义预览</code>\n<code src=\"./demo/max-count.tsx\">限制数量</code>\n<code src=\"./demo/transform-file.tsx\">上传前转换文件</code>\n<code src=\"./demo/upload-with-aliyun-oss.tsx\">阿里云 OSS</code>\n<code src=\"./demo/file-type.tsx\" debug>自定义显示 icon</code>\n<code src=\"./demo/upload-custom-action-icon.tsx\">自定义交互图标</code>\n<code src=\"./demo/drag-sorting.tsx\">上传列表拖拽排序</code>\n<code src=\"./demo/crop-image.tsx\">上传前裁切图片</code>\n<code src=\"./demo/customize-progress-bar.tsx\">自定义进度条样式</code>\n<code src=\"./demo/component-token.tsx\" debug>组件 Token</code>\n<code src=\"./demo/debug-disabled.tsx\" debug>Debug Disabled Styles</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| accept | 接受上传的文件类型，详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) | string | - |  |\n| action | 上传的地址 | string \\| (file) => Promise&lt;string> | - |  |\n| beforeUpload | 上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 `File` 或 `Blob` 对象则上传 resolve 传入对象）；也可以返回 `Upload.LIST_IGNORE`，此时列表中将不展示此文件。 **注意：IE9 不支持该方法** | (file, fileList) => boolean \\| Promise&lt;File> \\| `Upload.LIST_IGNORE` | - |  |\n| customRequest | 通过覆盖默认的上传行为，可以自定义自己的上传实现 | function | - |  |\n| data | 上传所需额外参数或返回上传额外参数的方法 | object\\|(file) => object \\| Promise&lt;object> | - |  |\n| defaultFileList | 默认已经上传的文件列表 | object\\[] | - |  |\n| directory | 支持上传文件夹（[caniuse](https://caniuse.com/#feat=input-file-directory)） | boolean | false |  |\n| disabled | 是否禁用 | boolean | false | 对于自定义 Upload children 时请将 disabled 属性同时传给 child node 确保 disabled 渲染效果保持一致 |\n| fileList | 已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423) | [UploadFile](#uploadfile)\\[] | - |  |\n| headers | 设置上传的请求头部，IE10 以上有效 | object | - |  |\n| iconRender | 自定义显示 icon | (file: UploadFile, listType?: UploadListType) => ReactNode | - |  |\n| isImageUrl | 自定义缩略图是否使用 &lt;img /> 标签进行显示 | (file: UploadFile) => boolean | [(内部实现)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68) |  |\n| itemRender | 自定义上传列表项 | (originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode | - | 4.16.0 |\n| listType | 上传列表的内建样式，支持四种基本样式 `text`, `picture`, `picture-card` 和 `picture-circle` | string | `text` | `picture-circle`(5.2.0+) |\n| maxCount | 限制上传数量。当为 1 时，始终用最新上传的文件代替当前文件 | number | - | 4.10.0 |\n| method | 上传请求的 http method | string | `post` |  |\n| multiple | 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件 | boolean | false |  |\n| name | 发到后台的文件参数名 | string | `file` |  |\n| openFileDialogOnClick | 点击打开文件对话框 | boolean | true |  |\n| previewFile | 自定义文件预览逻辑 | (file: File \\| Blob) => Promise&lt;dataURL: string> | - |  |\n| progress | 自定义进度条样式 | [ProgressProps](/components/progress-cn#api)（仅支持 `type=\"line\"`） | { strokeWidth: 2, showInfo: false } | 4.3.0 |\n| showUploadList | 是否展示文件列表, 可设为一个对象，用于单独设定 `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` 和 `downloadIcon` | boolean \\| { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean, previewIcon?: ReactNode \\| (file: UploadFile) => ReactNode, removeIcon?: ReactNode \\| (file: UploadFile) => ReactNode, downloadIcon?: ReactNode \\| (file: UploadFile) => ReactNode } | true | function: 4.7.0 |\n| withCredentials | 上传请求时是否携带 cookie | boolean | false |  |\n| onChange | 上传文件改变时的回调，上传每个阶段都会触发该事件。详见 [onChange](#onchange) | function | - |  |\n| onDrop | 当文件被拖入上传区域时执行的回调功能 | (event: React.DragEvent) => void | - | 4.16.0 |\n| onDownload | 点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页 | function(file): void | (跳转新标签页) |  |\n| onPreview | 点击文件链接或预览图标时的回调 | function(file) | - |  |\n| onRemove   | 点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除               | function(file): boolean \\| Promise | -   |  |\n\n### UploadFile\n\n继承自 File，附带额外属性用于渲染。\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| crossOrigin | CORS 属性设置 | `'anonymous'` \\| `'use-credentials'` \\| `''` | - | 4.20.0 |\n| name | 文件名 | string | - | - |\n| percent | 上传进度 | number | - | - |\n| status | 上传状态，不同状态展示颜色也会有所不同 | `error` \\| `done` \\| `uploading` \\| `removed` | - | - |\n| thumbUrl | 缩略图地址 | string | - | - |\n| uid | 唯一标识符，不设置时会自动生成 | string | - | - |\n| url | 下载地址 | string | - | - |\n\n### onChange\n\n> 💡 上传中、完成、失败都会调用这个函数。\n\n文件状态改变的回调，返回为：\n\n```jsx\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\n1. `file` 当前操作的文件对象。\n\n   ```jsx\n   {\n      uid: 'uid',      // 文件唯一标识，建议设置为负数，防止和内部产生的 id 冲突\n      name: 'xx.png',   // 文件名\n      status: 'done' | 'uploading' | 'error' | 'removed' , //  beforeUpload 拦截的文件没有 status 状态属性\n      response: '{\"status\": \"success\"}', // 服务端响应内容\n      linkProps: '{\"download\": \"image\"}', // 下载链接额外的 HTML 属性\n   }\n   ```\n\n2. `fileList` 当前的文件列表。\n\n3. `event` 上传中的服务端响应内容，包含了上传进度等信息，高级浏览器支持。\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Upload\"></ComponentTokenTable>\n\n## FAQ\n\n### 服务端如何实现？\n\n- 服务端上传接口实现可以参考 [jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload/wiki#server-side)。\n- 如果要做本地 mock 可以参考这个 [express 的例子](https://github.com/react-component/upload/blob/master/server.js)。\n\n### 如何显示下载链接？\n\n请使用 `fileList` 属性设置数组项的 `url` 属性进行展示控制。\n\n### `customRequest` 怎么使用？\n\n请参考 <https://github.com/react-component/upload#customrequest>。\n\n### 为何 `fileList` 受控时，上传不在列表中的文件不会触发 `onChange` 后续的 `status` 更新事件？\n\n`onChange` 事件仅会作用于在列表中的文件，因而 `fileList` 不存在对应文件时后续事件会被忽略。请注意，在 `4.13.0` 版本之前受控状态存在 bug 导致不在列表中的文件也会触发。\n\n### `onChange` 为什么有时候返回 File 有时候返回 { originFileObj: File }？\n\n历史原因，在 `beforeUpload` 返回 `false` 时，会返回 `File` 对象。在下个大版本我们会统一返回 `{ originFileObj: File }` 对象。当前版本已经兼容所有场景下 `info.file.originFileObj` 获取原 `File` 写法。你可以提前切换。\n\n### 为何有时 Chrome 点击 Upload 无法弹出文件选择框？\n\n与 `antd` 无关，原生上传也会失败。请重启 `Chrome` 浏览器，让其完成升级工作。\n\n相关 `issue`：\n\n- [#32672](https://github.com/ant-design/ant-design/issues/32672)\n- [#32913](https://github.com/ant-design/ant-design/issues/32913)\n- [#33988](https://github.com/ant-design/ant-design/issues/33988)\n\n### 文件夹上传在 Safari 仍然可以选中文件?\n\n组件内部是以 `directory`、`webkitdirectory` 属性控制 input 来实现文件夹选择的, 但似乎在 Safari 的实现中，[并不会阻止用户选择文件](https://stackoverflow.com/q/55649945/3040605)，请尝试额外传递无法匹配文件的 `accept` 属性来规避此问题 例如:\n\n```jsx\naccept: `.${'n'.repeat(100)}`;\n```\n","en-US":"---\ncategory: Components\ngroup: Data Entry\ntitle: Upload\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*93ymR4RD4S0AAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*l1nlSryXib8AAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 2\n---\n\nUpload the file by selecting or dragging.\n\n## When To Use\n\nUploading is the process of publishing information (web pages, text, pictures, video, etc.) to a remote server via a web page or upload tool.\n\n- When you need to upload one or more files.\n- When you need to show the process of uploading.\n- When you need to upload files by dragging and dropping.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Upload by clicking</code>\n<code src=\"./demo/avatar.tsx\">Avatar</code>\n<code src=\"./demo/defaultFileList.tsx\">Default Files</code>\n<code src=\"./demo/picture-card.tsx\">Pictures Wall</code>\n<code src=\"./demo/picture-circle.tsx\">Pictures with picture-circle type</code>\n<code src=\"./demo/fileList.tsx\">Complete control over file list</code>\n<code src=\"./demo/drag.tsx\">Drag and Drop</code>\n<code src=\"./demo/directory.tsx\">Upload directory</code>\n<code src=\"./demo/upload-manually.tsx\">Upload manually</code>\n<code src=\"./demo/upload-png-only.tsx\">Upload png file only</code>\n<code src=\"./demo/picture-style.tsx\">Pictures with list style</code>\n<code src=\"./demo/preview-file.tsx\">Customize preview file</code>\n<code src=\"./demo/max-count.tsx\">Max Count</code>\n<code src=\"./demo/transform-file.tsx\">Transform file before request</code>\n<code src=\"./demo/upload-with-aliyun-oss.tsx\">Aliyun OSS</code>\n<code src=\"./demo/file-type.tsx\" debug>custom show icon</code>\n<code src=\"./demo/upload-custom-action-icon.tsx\">custom action icon</code>\n<code src=\"./demo/drag-sorting.tsx\">Drag sorting of uploadList</code>\n<code src=\"./demo/crop-image.tsx\">Crop image before uploading</code>\n<code src=\"./demo/customize-progress-bar.tsx\">Customize Progress Bar</code>\n<code src=\"./demo/component-token.tsx\" debug>Component Token</code>\n<code src=\"./demo/debug-disabled.tsx\" debug>Debug Disabled Styles</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| accept | File types that can be accepted. See [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) | string | - |  |\n| action | Uploading URL | string \\| (file) => Promise&lt;string> | - |  |\n| beforeUpload | Hook function which will be executed before uploading. Uploading will be stopped with `false` or a rejected Promise returned. When returned value is `Upload.LIST_IGNORE`, the list of files that have been uploaded will ignore it. **Warning：this function is not supported in IE9** | (file, fileList) => boolean \\| Promise&lt;File> \\| `Upload.LIST_IGNORE` | - |  |\n| customRequest | Override for the default xhr behavior allowing for additional customization and the ability to implement your own XMLHttpRequest | function | - |  |\n| data | Uploading extra params or function which can return uploading extra params | object \\| (file) => object \\| Promise&lt;object> | - |  |\n| defaultFileList | Default list of files that have been uploaded | object\\[] | - |  |\n| directory | Support upload whole directory ([caniuse](https://caniuse.com/#feat=input-file-directory)) | boolean | false |  |\n| disabled | Disable upload button | boolean | false | When customizing Upload children, please pass the disabled attribute to the child node at the same time to ensure the disabled rendering effect is consistent. |\n| fileList | List of files that have been uploaded (controlled). Here is a common issue [#2423](https://github.com/ant-design/ant-design/issues/2423) when using it | [UploadFile](#uploadfile)\\[] | - |  |\n| headers | Set request headers, valid above IE10 | object | - |  |\n| iconRender | Custom show icon | (file: UploadFile, listType?: UploadListType) => ReactNode | - |  |\n| isImageUrl | Customize if render &lt;img /> in thumbnail | (file: UploadFile) => boolean | [(inside implementation)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68) |  |\n| itemRender | Custom item of uploadList | (originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode | - | 4.16.0 |\n| listType | Built-in stylesheets, support for four types: `text`, `picture`, `picture-card` or `picture-circle` | string | `text` | `picture-circle`(5.2.0+) |\n| maxCount | Limit the number of uploaded files. Will replace current one when `maxCount` is `1` | number | - | 4.10.0 |\n| method | The http method of upload request | string | `post` |  |\n| multiple | Whether to support selected multiple files. `IE10+` supported. You can select multiple files with CTRL holding down while multiple is set to be true | boolean | false |  |\n| name | The name of uploading file | string | `file` |  |\n| openFileDialogOnClick | Click open file dialog | boolean | true |  |\n| previewFile | Customize preview file logic | (file: File \\| Blob) => Promise&lt;dataURL: string> | - |  |\n| progress | Custom progress bar | [ProgressProps](/components/progress/#api) (support `type=\"line\"` only) | { strokeWidth: 2, showInfo: false } | 4.3.0 |\n| showUploadList | Whether to show default upload list, could be an object to specify `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` and `downloadIcon` individually | boolean \\| { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean, previewIcon?: ReactNode \\| (file: UploadFile) => ReactNode, removeIcon?: ReactNode \\| (file: UploadFile) => ReactNode, downloadIcon?: ReactNode \\| (file: UploadFile) => ReactNode } | true | function: 4.7.0 |\n| withCredentials | The ajax upload with cookie sent | boolean | false |  |\n| onChange | A callback function, can be executed when uploading state is changing. It will trigger by every uploading phase. see [onChange](#onchange) | function | - |  |\n| onDrop | A callback function executed when files are dragged and dropped into the upload area | (event: React.DragEvent) => void | - | 4.16.0 |\n| onDownload | Click the method to download the file, pass the method to perform the method logic, and do not pass the default jump to the new TAB | function(file): void | (Jump to new TAB) |  |\n| onPreview | A callback function, will be executed when the file link or preview icon is clicked | function(file) | - |  |\n| onRemove | A callback function, will be executed when removing file button is clicked, remove event will be prevented when the return value is false or a Promise which resolve(false) or reject | function(file): boolean \\| Promise | - |  |\n\n### UploadFile\n\nExtends File with additional props.\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| crossOrigin | CORS settings attributes | `'anonymous'` \\| `'use-credentials'` \\| `''` | - | 4.20.0 |\n| name | File name | string | - | - |\n| percent | Upload progress percent | number | - | - |\n| status | Upload status. Show different style when configured | `error` \\| `done` \\| `uploading` \\| `removed` | - | - |\n| thumbUrl | Thumb image url | string | - | - |\n| uid | unique id. Will auto-generate when not provided | string | - | - |\n| url | Download url | string | - | - |\n\n### onChange\n\n> 💡 The function will be called when uploading is in progress, completed, or failed.\n\nWhen uploading state change, it returns:\n\n```jsx\n{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n```\n\n1. `file` File object for the current operation.\n\n   ```jsx\n   {\n      uid: 'uid',      // unique identifier, negative is recommended, to prevent interference with internally generated id\n      name: 'xx.png',   // file name\n      status: 'done' | 'uploading' | 'error' | 'removed', // Intercepted file by beforeUpload doesn't have a status field.\n      response: '{\"status\": \"success\"}', // response from server\n      linkProps: '{\"download\": \"image\"}', // additional HTML props of file link\n      xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\n   }\n   ```\n\n2. `fileList` current list of files\n\n3. `event` response from the server, including uploading progress, supported by advanced browsers.\n\n## Design Token\n\n<ComponentTokenTable component=\"Upload\"></ComponentTokenTable>\n\n## FAQ\n\n### How do I implement upload server side?\n\n- You can consult [jQuery-File-Upload](https://github.com/blueimp/jQuery-File-Upload/wiki#server-side) about how to implement server side upload interface.\n- There is a mock example of [express](https://github.com/react-component/upload/blob/master/server.js) in rc-upload.\n\n### I want to display download links.\n\nPlease set property `url` of each item in `fileList` to control the content of the link.\n\n### How to use `customRequest`?\n\nSee <https://github.com/react-component/upload#customrequest>.\n\n### Why will the `fileList` that's in control not trigger `onChange` `status` update when the file is not in the list?\n\n`onChange` will only trigger when the file is in the list, it will ignore any events removed from the list. Please note that there does exist a bug which makes an event still trigger even when the file is not in the list before `4.13.0`.\n\n### Why does `onChange` sometimes return File object and other times return { originFileObj: File }?\n\nFor compatible case, we return File object when `beforeUpload` return `false`. It will merge to `{ originFileObj: File }` in the next major version. Current version is compatible to get origin file by `info.file.originFileObj`. You can change this before a major release.\n\n### Why sometimes Chrome can not upload?\n\nChrome update will also break native upload. Please restart Chrome to finish the upload work.\n\nRef:\n\n- [#32672](https://github.com/ant-design/ant-design/issues/32672)\n- [#32913](https://github.com/ant-design/ant-design/issues/32913)\n- [#33988](https://github.com/ant-design/ant-design/issues/33988)\n\n### Can still select files when uploading a folder in Safari?\n\nInside the upload component, we use the `directory` and `webkitdirectory` properties to control only directories can be selected. However, in Safari's implementation it doesn't seem to work. See [here](https://stackoverflow.com/q/55649945/3040605). Please try passing an additional `accept` attribute that cannot match any files. For example:\n\n```jsx\naccept: `.${'n'.repeat(100)}`;\n```\n"},"watermark":{"zh-CN":"---\ncategory: Components\nsubtitle: 水印\ngroup: 反馈\ntitle: Watermark\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*wr1ISY50SyYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*duAQQbjHlHQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 1\ntag: New\n---\n\n给页面的某个区域加上水印。自 `5.0.0` 版本开始提供该组件。\n\n## 何时使用\n\n- 页面需要添加水印标识版权时使用。\n- 适用于防止信息盗用。\n\n## 代码演示\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">基本</code>\n<code src=\"./demo/multi-line.tsx\">多行水印</code>\n<code src=\"./demo/image.tsx\">图片水印</code>\n<code src=\"./demo/custom.tsx\">自定义配置</code>\n<code src=\"./demo/portal.tsx\">Modal 与 Drawer</code>\n\n## API\n\n通用属性参考：[通用属性](/docs/react/common-props)\n\n> 自 `antd@5.0.0` 版本开始提供该组件。\n\n### Watermark\n\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| width | 水印的宽度，`content` 的默认值为自身的宽度 | number | 120 |  |\n| height | 水印的高度，`content` 的默认值为自身的高度 | number | 64 |  |\n| inherit | 是否将水印传导给弹出组件如 Modal、Drawer | boolean | true | 5.11.0 |\n| rotate | 水印绘制时，旋转的角度，单位 `°` | number | -22 |  |\n| zIndex | 追加的水印元素的 z-index | number | 9 |  |\n| image | 图片源，建议导出 2 倍或 3 倍图，优先级高 (支持 base64 格式) | string | - |  |\n| content | 水印文字内容 | string \\| string[] | - |  |\n| font | 文字样式 | [Font](#font) | [Font](#font) |  |\n| gap | 水印之间的间距 | \\[number, number\\] | \\[100, 100\\] |  |\n| offset | 水印距离容器左上角的偏移量，默认为 `gap/2` | \\[number, number\\] | \\[gap\\[0\\]/2, gap\\[1\\]/2\\] |  |\n\n### Font\n\n<!-- prettier-ignore -->\n| 参数 | 说明 | 类型 | 默认值 | 版本 |\n| --- | --- | --- | --- | --- |\n| color | 字体颜色 | [CanvasFillStrokeStyles.fillStyle](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) | rgba(0,0,0,.15) |  |\n| fontSize | 字体大小 | number | 16 |  |\n| fontWeight | 字体粗细 | `normal` \\| `light` \\| `weight` \\| number | normal |  |\n| fontFamily | 字体类型 | string | sans-serif |  |\n| fontStyle | 字体样式 | `none` \\| `normal` \\| `italic` \\| `oblique` | normal |  |\n| textAlign | 指定文本对齐方向  | [CanvasTextAlign](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) | 5.10.0 |\n\n## 主题变量（Design Token）\n\n<ComponentTokenTable component=\"Watermark\"></ComponentTokenTable>\n\n## FAQ\n\n### 处理异常图片水印\n\n当使用图片水印且图片加载异常时，可以同时添加 `content` 防止水印失效（自 5.2.3 开始支持）。\n\n```typescript jsx\n<Watermark\n  height={30}\n  width={130}\n  content=\"Ant Design\"\n  image=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*lkAoRbywo0oAAAAAAAAAAAAADrJ8AQ/original\"\n>\n  <div style={{ height: 500 }} />\n</Watermark>\n```\n","en-US":"---\ncategory: Components\ngroup: Feedback\ntitle: Watermark\ncover: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*wr1ISY50SyYAAAAAAAAAAAAADrJ8AQ/original\ncoverDark: https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*duAQQbjHlHQAAAAAAAAAAAAADrJ8AQ/original\ndemo:\n  cols: 1\n---\n\nAdd specific text or patterns to the page. Available since `5.0.0`.\n\n## When To Use\n\n- Use when the page needs to be watermarked to identify the copyright.\n- Suitable for preventing information theft.\n\n## Examples\n\n<!-- prettier-ignore -->\n<code src=\"./demo/basic.tsx\">Basic</code>\n<code src=\"./demo/multi-line.tsx\">Multi-line watermark</code>\n<code src=\"./demo/image.tsx\">Image watermark</code>\n<code src=\"./demo/custom.tsx\">Custom configuration</code>\n<code src=\"./demo/portal.tsx\">Modal or Drawer</code>\n\n## API\n\nCommon props ref：[Common props](/docs/react/common-props)\n\n> This component is available since `antd@5.0.0`.\n\n### Watermark\n\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| width | The width of the watermark, the default value of `content` is its own width | number | 120 |  |\n| height | The height of the watermark, the default value of `content` is its own height | number | 64 |  |\n| inherit | Pass the watermark to the pop-up component such as Modal, Drawer | boolean | true | 5.11.0 |\n| rotate | When the watermark is drawn, the rotation Angle, unit `°` | number | -22 |  |\n| zIndex | The z-index of the appended watermark element | number | 9 |  |\n| image | Image source, it is recommended to export 2x or 3x image, high priority (support base64 format) | string | - |  |\n| content | Watermark text content | string \\| string[] | - |  |\n| font | Text style | [Font](#font) | [Font](#font) |  |\n| gap | The spacing between watermarks | \\[number, number\\] | \\[100, 100\\] |  |\n| offset | The offset of the watermark from the upper left corner of the container. The default is `gap/2` | \\[number, number\\] | \\[gap\\[0\\]/2, gap\\[1\\]/2\\] |  |\n\n### Font\n\n<!-- prettier-ignore -->\n| Property | Description | Type | Default | Version |\n| --- | --- | --- | --- | --- |\n| color | font color | [CanvasFillStrokeStyles.fillStyle](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle) | rgba(0,0,0,.15) |  |\n| fontSize | font size | number | 16 |  |\n| fontWeight | font weight | `normal` \\| `light` \\| `weight` \\| number | normal |  |\n| fontFamily | font family | string | sans-serif |  |\n| fontStyle | font style  | `none` \\| `normal` \\| `italic` \\| `oblique` | normal |  |\n| textAlign | specify the text alignment direction  | [CanvasTextAlign](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign) | `center` | 5.10.0 |\n\n## Design Token\n\n<ComponentTokenTable component=\"Watermark\"></ComponentTokenTable>\n\n## FAQ\n\n### Handle abnormal image watermarks\n\nWhen using an image watermark and the image loads abnormally, you can add `content` at the same time to prevent the watermark from becoming invalid (since 5.2.3).\n\n```typescript jsx\n<Watermark\n  height={30}\n  width={130}\n  content=\"Ant Design\"\n  image=\"https://mdn.alipayobjects.com/huamei_7uahnr/afts/img/A*lkAoRbywo0oAAAAAAAAAAAAADrJ8AQ/original\"\n>\n  <div style={{ height: 500 }} />\n</Watermark>\n```\n"}}